import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { Plus, Edit, Trash2, Clock } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { SecureFileUpload } from "@/components/SecureFileUpload";

interface ServicePlan {
  id: string;
  name: string;
  description: string;
  category_id: string;
  total_price: number;
  entry_price: number;
  image_url: string;
  active: boolean;
  plan_code: string;
  created_at: string;
  max_participants: number;
}

export const ServicePlansManager: React.FC = () => {
  const { toast } = useToast();
  const [plans, setPlans] = useState<ServicePlan[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingPlan, setEditingPlan] = useState<ServicePlan | null>(null);
  
  // Form state
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category_id: 'Estética',
    total_price: 0,
    entry_price: 0,
    image_url: '',
    active: true,
    max_participants: 9
  });

  const categories = [
    'Estética',
    'Beleza',
    'Odontologia',
    'Tatuagem',
    'Consultas',
    'Procedimentos'
  ];

  useEffect(() => {
    loadPlans();
  }, []);

  const loadPlans = async () => {
    try {
      const { data, error } = await supabase
        .from('custom_plans')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setPlans(data || []);
    } catch (error) {
      console.error('Error loading service plans:', error);
      toast({
        title: "Erro",
        description: "Erro ao carregar planos de serviço",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Usuário não autenticado');

      // plan_code will be auto-generated by trigger, providing temporary value
      const planData = {
        name: formData.name,
        description: formData.description,
        category_id: formData.category_id,
        total_price: formData.total_price,
        entry_price: formData.entry_price,
        image_url: formData.image_url || null,
        active: formData.active,
        max_participants: formData.max_participants,
        created_by: user.id,
        allow_professional_choice: false,
        public_enrollment: true,
        plan_code: '' // Will be replaced by trigger
      };

      if (editingPlan) {
        const { error } = await supabase
          .from('custom_plans')
          .update(planData)
          .eq('id', editingPlan.id);

        if (error) throw error;
        
        toast({
          title: "Sucesso!",
          description: "Plano de serviço atualizado com sucesso"
        });
      } else {
        const { error } = await supabase
          .from('custom_plans')
          .insert(planData);

        if (error) throw error;
        
        toast({
          title: "Sucesso!",
          description: "Plano de serviço cadastrado com sucesso"
        });
      }

      resetForm();
      loadPlans();
      setIsDialogOpen(false);
    } catch (error: any) {
      console.error('Error saving service plan:', error);
      toast({
        title: "Erro",
        description: error.message || "Erro ao salvar plano de serviço",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    if (!confirm('Tem certeza que deseja excluir este plano de serviço?')) return;

    try {
      const { error } = await supabase
        .from('custom_plans')
        .delete()
        .eq('id', id);

      if (error) throw error;

      toast({
        title: "Sucesso!",
        description: "Plano de serviço excluído com sucesso"
      });
      
      loadPlans();
    } catch (error: any) {
      console.error('Error deleting service plan:', error);
      toast({
        title: "Erro",
        description: "Erro ao excluir plano de serviço",
        variant: "destructive"
      });
    }
  };

  const handleEdit = (plan: ServicePlan) => {
    setEditingPlan(plan);
    setFormData({
      name: plan.name,
      description: plan.description || '',
      category_id: plan.category_id,
      total_price: plan.total_price,
      entry_price: plan.entry_price,
      image_url: plan.image_url || '',
      active: plan.active,
      max_participants: plan.max_participants
    });
    setIsDialogOpen(true);
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      category_id: 'Estética',
      total_price: 0,
      entry_price: 0,
      image_url: '',
      active: true,
      max_participants: 9
    });
    setEditingPlan(null);
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  if (loading) {
    return <div className="flex justify-center p-8">Carregando planos de serviço...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">Planos de Serviço (para Usuários)</h2>
          <p className="text-sm text-muted-foreground">
            Planos de estética, beleza, odontologia que exigem 9 indicações para contemplação
          </p>
        </div>
        
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button onClick={() => resetForm()}>
              <Plus className="h-4 w-4 mr-2" />
              Cadastrar Plano
            </Button>
          </DialogTrigger>
          
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>
                {editingPlan ? 'Editar Plano de Serviço' : 'Cadastrar Novo Plano de Serviço'}
              </DialogTitle>
            </DialogHeader>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Nome do Plano</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    required
                  />
                </div>
                
                <div>
                  <Label htmlFor="category_id">Categoria</Label>
                  <Select value={formData.category_id} onValueChange={(value) => setFormData({...formData, category_id: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione uma categoria" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map(cat => (
                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div>
                <Label htmlFor="description">Descrição</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="total_price">Valor Total (R$)</Label>
                  <Input
                    id="total_price"
                    type="number"
                    step="0.01"
                    value={formData.total_price}
                    onChange={(e) => setFormData({...formData, total_price: parseFloat(e.target.value) || 0})}
                    required
                  />
                </div>
                
                <div>
                  <Label htmlFor="entry_price">Valor da Entrada (R$)</Label>
                  <Input
                    id="entry_price"
                    type="number"
                    step="0.01"
                    value={formData.entry_price}
                    onChange={(e) => setFormData({...formData, entry_price: parseFloat(e.target.value) || 0})}
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="max_participants">Máx. Participantes</Label>
                  <Input
                    id="max_participants"
                    type="number"
                    value={formData.max_participants}
                    onChange={(e) => setFormData({...formData, max_participants: parseInt(e.target.value) || 9})}
                    required
                  />
                </div>
              </div>

              <div>
                <Label>Imagem do Plano</Label>
                <SecureFileUpload
                  type="image"
                  category="service_plans"
                  onUploadComplete={(result) => {
                    setFormData({...formData, image_url: result.url});
                    toast({
                      title: "Upload concluído",
                      description: "Imagem enviada com sucesso!"
                    });
                  }}
                  label="Selecionar Imagem"
                  description="Clique ou arraste uma imagem para fazer upload"
                />
                {formData.image_url && (
                  <div className="mt-2">
                    <img src={formData.image_url} alt="Preview" className="w-20 h-20 object-cover rounded" />
                  </div>
                )}
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="active"
                  checked={formData.active}
                  onCheckedChange={(checked) => setFormData({...formData, active: checked})}
                />
                <Label htmlFor="active">Plano Ativo</Label>
              </div>

              <div className="flex justify-end space-x-2">
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>
                  Cancelar
                </Button>
                <Button type="submit" disabled={loading}>
                  {editingPlan ? 'Atualizar' : 'Cadastrar'} Plano
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {plans.map((plan) => (
          <Card key={plan.id} className="overflow-hidden">
            {plan.image_url && (
              <div className="h-48 bg-gray-200">
                <img 
                  src={plan.image_url} 
                  alt={plan.name}
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.currentTarget.style.display = 'none';
                  }}
                />
              </div>
            )}
            
            <CardHeader>
              <div className="flex justify-between items-start">
                <CardTitle className="text-lg">{plan.name}</CardTitle>
                <div className="flex space-x-1">
                  <Badge variant={plan.active ? "default" : "secondary"}>
                    {plan.active ? "Ativo" : "Inativo"}
                  </Badge>
                </div>
              </div>
              <p className="text-sm text-muted-foreground">
                Código: {plan.plan_code}
              </p>
            </CardHeader>
            
            <CardContent>
              <div className="space-y-2">
                <p className="text-sm text-gray-600 line-clamp-2">{plan.description}</p>
                <p className="text-sm"><strong>Categoria:</strong> {plan.category_id}</p>
                <p className="text-lg font-bold text-green-600">{formatCurrency(plan.total_price)}</p>
                <p className="text-sm text-gray-500">
                  Entrada: {formatCurrency(plan.entry_price)} ({((plan.entry_price / plan.total_price) * 100).toFixed(1)}%)
                </p>
                <p className="text-sm text-blue-600">
                  Máx. {plan.max_participants} participantes
                </p>
                
                <div className="flex justify-end space-x-2 pt-4">
                  <Button size="sm" variant="outline" onClick={() => handleEdit(plan)}>
                    <Edit className="h-4 w-4" />
                  </Button>
                  <Button size="sm" variant="destructive" onClick={() => handleDelete(plan.id)}>
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {plans.length === 0 && (
        <Card>
          <CardContent className="p-8 text-center">
            <Clock className="h-12 w-12 mx-auto text-gray-400 mb-4" />
            <p className="text-gray-500">Nenhum plano de serviço cadastrado ainda.</p>
            <p className="text-sm text-gray-400 mt-2">
              Clique em "Cadastrar Plano" para adicionar o primeiro plano de serviço.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};