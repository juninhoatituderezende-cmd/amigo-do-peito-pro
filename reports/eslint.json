[{"filePath":"/workspace/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/AdminLoginRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/AdminProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/AuthRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/DashboardFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/DiagnosticDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/DiagnosticProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":12,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":12,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { logger } from '@/lib/logger';\n\ninterface DiagnosticContextType {\n  connectionStatus: 'testing' | 'connected' | 'failed' | 'unknown';\n  lastError: string | null;\n  testConnection: () => Promise<void>;\n}\n\nconst DiagnosticContext = createContext<DiagnosticContextType | undefined>(undefined);\n\nexport const useDiagnostic = () => {\n  const context = useContext(DiagnosticContext);\n  if (context === undefined) {\n    throw new Error('useDiagnostic must be used within a DiagnosticProvider');\n  }\n  return context;\n};\n\ninterface DiagnosticProviderProps {\n  children: React.ReactNode;\n}\n\nexport const DiagnosticProvider: React.FC<DiagnosticProviderProps> = ({ children }) => {\n  const [connectionStatus, setConnectionStatus] = useState<'testing' | 'connected' | 'failed' | 'unknown'>('unknown');\n  const [lastError, setLastError] = useState<string | null>(null);\n\n  const testConnection = async () => {\n    setConnectionStatus('testing');\n    setLastError(null);\n\n    try {\n      await logger.logActivity('diagnostic_test_started');\n      \n      const isConnected = await logger.testSupabaseConnection();\n      \n      if (isConnected) {\n        setConnectionStatus('connected');\n        await logger.logActivity('diagnostic_test_success');\n      } else {\n        setConnectionStatus('failed');\n        setLastError('Falha na conexão com Supabase');\n        await logger.logActivity('diagnostic_test_failed', { reason: 'connection_failed' });\n      }\n    } catch (error) {\n      console.error('Diagnostic error:', error);\n      setConnectionStatus('failed');\n      setLastError(error instanceof Error ? error.message : 'Erro desconhecido');\n      await logger.logError(error as Error, 'DiagnosticProvider');\n    }\n  };\n\n  useEffect(() => {\n    // Teste automático na inicialização\n    testConnection();\n  }, []);\n\n  const value: DiagnosticContextType = {\n    connectionStatus,\n    lastError,\n    testConnection\n  };\n\n  return (\n    <DiagnosticContext.Provider value={value}>\n      {children}\n    </DiagnosticContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/EnhancedPurchaseFlow.tsx","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":71,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":71,"endColumn":57,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2007,2146],"text":"{ const phoneRegex = /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/;\n        if (!phoneRegex.test(value)) return \"Formato: (11) 99999-9999\";\n        return \"\"; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":76,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":76,"endColumn":56,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2180,2371],"text":"{ const cpfRegex = /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/;\n        if (!cpfRegex.test(value)) return \"Formato: 000.000.000-00\";\n        if (!validateCPF(value)) return \"CPF inválido\";\n        return \"\"; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":103,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":103,"endColumn":55,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3087,3338],"text":"{ const phoneNumbers = value.replace(/\\D/g, \"\");\n        if (phoneNumbers.length <= 10) {\n          return phoneNumbers.replace(/(\\d{2})(\\d{4})(\\d{4})/, \"($1) $2-$3\");\n        }\n        return phoneNumbers.replace(/(\\d{2})(\\d{5})(\\d{4})/, \"($1) $2-$3\"); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":110,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":110,"endColumn":53,"suggestions":[{"messageId":"addBrackets","fix":{"range":[3372,3498],"text":"{ const cpfNumbers = value.replace(/\\D/g, \"\");\n        return cpfNumbers.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\"); }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5560,5563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5560,5563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PaymentProcessor } from \"@/components/PaymentProcessor\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { \n  CheckCircle, \n  AlertCircle, \n  User, \n  Mail, \n  Phone, \n  CreditCard,\n  Loader2,\n  Shield,\n  Lock\n} from \"lucide-react\";\n\ninterface PurchaseFlowProps {\n  planId: string;\n  planData: {\n    title: string;\n    description: string;\n    entry_value: number;\n    contemplation_value: number;\n  };\n  influencerCode?: string;\n}\n\ninterface FormData {\n  full_name: string;\n  email: string;\n  phone: string;\n  cpf: string;\n}\n\ninterface ValidationErrors {\n  [key: string]: string;\n}\n\nexport function EnhancedPurchaseFlow({ planId, planData, influencerCode }: PurchaseFlowProps) {\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState<FormData>({\n    full_name: \"\",\n    email: \"\",\n    phone: \"\",\n    cpf: \"\",\n  });\n  const [errors, setErrors] = useState<ValidationErrors>({});\n  const [loading, setLoading] = useState(false);\n  const [userId, setUserId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const validateField = (name: string, value: string): string => {\n    switch (name) {\n      case \"full_name\":\n        if (value.length < 2) return \"Nome deve ter pelo menos 2 caracteres\";\n        if (!/^[a-zA-ZÀ-ÿ\\s]+$/.test(value)) return \"Nome deve conter apenas letras\";\n        return \"\";\n      \n      case \"email\":\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return \"Email inválido\";\n        return \"\";\n      \n      case \"phone\":\n        const phoneRegex = /^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/;\n        if (!phoneRegex.test(value)) return \"Formato: (11) 99999-9999\";\n        return \"\";\n      \n      case \"cpf\":\n        const cpfRegex = /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/;\n        if (!cpfRegex.test(value)) return \"Formato: 000.000.000-00\";\n        if (!validateCPF(value)) return \"CPF inválido\";\n        return \"\";\n      \n      default:\n        return \"\";\n    }\n  };\n\n  const validateCPF = (cpf: string): boolean => {\n    const numbers = cpf.replace(/[^\\d]/g, \"\");\n    if (numbers.length !== 11 || /^(\\d)\\1{10}$/.test(numbers)) return false;\n    \n    const digits = numbers.split(\"\").map(Number);\n    const checkDigit = (slice: number) => {\n      const sum = digits.slice(0, slice).reduce((acc, digit, i) => acc + digit * (slice + 1 - i), 0);\n      const remainder = sum % 11;\n      return remainder < 2 ? 0 : 11 - remainder;\n    };\n    \n    return checkDigit(9) === digits[9] && checkDigit(10) === digits[10];\n  };\n\n  const formatField = (name: string, value: string): string => {\n    switch (name) {\n      case \"phone\":\n        const phoneNumbers = value.replace(/\\D/g, \"\");\n        if (phoneNumbers.length <= 10) {\n          return phoneNumbers.replace(/(\\d{2})(\\d{4})(\\d{4})/, \"($1) $2-$3\");\n        }\n        return phoneNumbers.replace(/(\\d{2})(\\d{5})(\\d{4})/, \"($1) $2-$3\");\n      \n      case \"cpf\":\n        const cpfNumbers = value.replace(/\\D/g, \"\");\n        return cpfNumbers.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\n      \n      default:\n        return value;\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    const formattedValue = formatField(name, value);\n    \n    setFormData(prev => ({ ...prev, [name]: formattedValue }));\n    \n    // Real-time validation\n    const error = validateField(name, formattedValue);\n    setErrors(prev => ({ ...prev, [name]: error }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: ValidationErrors = {};\n    \n    Object.keys(formData).forEach(key => {\n      const error = validateField(key, formData[key as keyof FormData]);\n      if (error) newErrors[key] = error;\n    });\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmitUserData = async () => {\n    if (!validateForm()) {\n      toast({\n        title: \"Dados inválidos\",\n        description: \"Por favor, corrija os erros nos campos destacados\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Register user and proceed to payment\n      const { data, error } = await supabase.auth.signUp({\n        email: formData.email,\n        password: Math.random().toString(36).slice(-8), // Temporary password\n        options: {\n          data: {\n            full_name: formData.full_name,\n            phone: formData.phone,\n            cpf: formData.cpf,\n          }\n        }\n      });\n\n      if (error) throw error;\n      \n      if (data.user) {\n        setUserId(data.user.id);\n        setStep(2);\n        \n        toast({\n          title: \"Dados confirmados!\",\n          description: \"Agora escolha a forma de pagamento\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Erro no cadastro\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePaymentSuccess = (paymentData: any) => {\n    setStep(3);\n    toast({\n      title: \"Pagamento processado!\",\n      description: \"Redirecionando para confirmação...\",\n    });\n  };\n\n  const getFieldIcon = (field: string) => {\n    switch (field) {\n      case \"full_name\": return <User className=\"h-4 w-4\" />;\n      case \"email\": return <Mail className=\"h-4 w-4\" />;\n      case \"phone\": return <Phone className=\"h-4 w-4\" />;\n      case \"cpf\": return <CreditCard className=\"h-4 w-4\" />;\n      default: return null;\n    }\n  };\n\n  const getStepIcon = (stepNumber: number) => {\n    if (step > stepNumber) return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n    if (step === stepNumber) return <div className=\"h-5 w-5 bg-primary rounded-full\" />;\n    return <div className=\"h-5 w-5 bg-gray-300 rounded-full\" />;\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4 space-y-6\">\n      {/* Progress Steps */}\n      <div className=\"flex items-center justify-center space-x-4 mb-8\">\n        <div className=\"flex items-center space-x-2\">\n          {getStepIcon(1)}\n          <span className={`text-sm ${step >= 1 ? 'text-primary font-medium' : 'text-gray-400'}`}>\n            Dados Pessoais\n          </span>\n        </div>\n        <div className=\"h-px w-8 bg-gray-300\" />\n        <div className=\"flex items-center space-x-2\">\n          {getStepIcon(2)}\n          <span className={`text-sm ${step >= 2 ? 'text-primary font-medium' : 'text-gray-400'}`}>\n            Pagamento\n          </span>\n        </div>\n        <div className=\"h-px w-8 bg-gray-300\" />\n        <div className=\"flex items-center space-x-2\">\n          {getStepIcon(3)}\n          <span className={`text-sm ${step >= 3 ? 'text-primary font-medium' : 'text-gray-400'}`}>\n            Confirmação\n          </span>\n        </div>\n      </div>\n\n      {/* Plan Summary */}\n      <Card className=\"border-primary/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"font-semibold\">{planData.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">{planData.description}</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary\">\n                R$ {planData.entry_value.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Meta: R$ {planData.contemplation_value.toFixed(2)}\n              </div>\n            </div>\n          </div>\n          {influencerCode && (\n            <Badge variant=\"secondary\" className=\"mt-2\">\n              Código de indicação: {influencerCode}\n            </Badge>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Step 1: Personal Data */}\n      {step === 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Shield className=\"h-5 w-5\" />\n              <span>Seus Dados Pessoais</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert>\n              <Lock className=\"h-4 w-4\" />\n              <AlertDescription>\n                Seus dados estão protegidos e serão usados apenas para participação no plano\n              </AlertDescription>\n            </Alert>\n\n            {Object.entries(formData).map(([key, value]) => (\n              <div key={key} className=\"space-y-2\">\n                <Label htmlFor={key} className=\"flex items-center space-x-2\">\n                  {getFieldIcon(key)}\n                  <span className=\"capitalize\">\n                    {key.replace('_', ' ')} {key === 'cpf' ? '(CPF)' : ''}\n                  </span>\n                </Label>\n                <Input\n                  id={key}\n                  name={key}\n                  value={value}\n                  onChange={handleInputChange}\n                  className={errors[key] ? \"border-red-500\" : \"\"}\n                  placeholder={\n                    key === 'phone' ? \"(11) 99999-9999\" :\n                    key === 'cpf' ? \"000.000.000-00\" :\n                    key === 'email' ? \"seu@email.com\" :\n                    \"Digite seu \" + key.replace('_', ' ')\n                  }\n                />\n                {errors[key] && (\n                  <div className=\"flex items-center space-x-2 text-red-500 text-sm\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <span>{errors[key]}</span>\n                  </div>\n                )}\n              </div>\n            ))}\n\n            <Button \n              onClick={handleSubmitUserData}\n              disabled={loading || Object.keys(errors).some(key => errors[key])}\n              className=\"w-full\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Validando dados...\n                </>\n              ) : (\n                \"Continuar para pagamento\"\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Payment */}\n      {step === 2 && userId && (\n        <PaymentProcessor\n          planId={planId}\n          userId={userId}\n          influencerCode={influencerCode}\n          onPaymentSuccess={handlePaymentSuccess}\n        />\n      )}\n\n      {/* Step 3: Confirmation */}\n      {step === 3 && (\n        <Card className=\"text-center\">\n          <CardContent className=\"p-8\">\n            <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Parabéns!</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Sua participação no plano foi confirmada. Em breve você receberá um email com todos os detalhes.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <Button className=\"w-full\" onClick={() => window.location.href = \"/usuario/dashboard\"}>\n                Acessar meu painel\n              </Button>\n              <Button variant=\"outline\" className=\"w-full\">\n                Compartilhar link de indicação\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/FileUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/GoogleOAuthSetup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/LazyLoad.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":81,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":81,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2780,2783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2780,2783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":130,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":130,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense, lazy } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Componente para loading skeleton customizável\nexport const LoadingSkeleton = ({ \n  type = 'card',\n  count = 1 \n}: { \n  type?: 'card' | 'list' | 'table' | 'dashboard';\n  count?: number;\n}) => {\n  const renderSkeleton = () => {\n    switch (type) {\n      case 'card':\n        return (\n          <div className=\"space-y-4\">\n            {Array.from({ length: count }).map((_, i) => (\n              <div key={i} className=\"border rounded-lg p-4 space-y-3\">\n                <Skeleton className=\"h-4 w-[250px]\" />\n                <Skeleton className=\"h-4 w-[200px]\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-[80%]\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        );\n      \n      case 'list':\n        return (\n          <div className=\"space-y-2\">\n            {Array.from({ length: count }).map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4 py-2\">\n                <Skeleton className=\"h-12 w-12 rounded-full\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-[200px]\" />\n                  <Skeleton className=\"h-4 w-[150px]\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        );\n      \n      case 'table':\n        return (\n          <div className=\"space-y-3\">\n            {Array.from({ length: count }).map((_, i) => (\n              <div key={i} className=\"flex space-x-4\">\n                <Skeleton className=\"h-4 flex-1\" />\n                <Skeleton className=\"h-4 flex-1\" />\n                <Skeleton className=\"h-4 flex-1\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            ))}\n          </div>\n        );\n      \n      case 'dashboard':\n        return (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"border rounded-lg p-4 space-y-3\">\n                <Skeleton className=\"h-4 w-[100px]\" />\n                <Skeleton className=\"h-8 w-[60px]\" />\n                <Skeleton className=\"h-3 w-[80px]\" />\n              </div>\n            ))}\n          </div>\n        );\n      \n      default:\n        return <Skeleton className=\"h-20 w-full\" />;\n    }\n  };\n\n  return renderSkeleton();\n};\n\n// HOC para lazy loading com skeleton personalizado\nexport const withLazyLoading = <P extends object>(\n  Component: React.ComponentType<P>,\n  fallback?: React.ReactNode\n) => {\n  const LazyComponent = lazy(() => Promise.resolve({ default: Component }));\n  \n  return React.forwardRef<any, P>((props, ref) => (\n    <Suspense fallback={fallback || <LoadingSkeleton type=\"card\" count={3} />}>\n      <LazyComponent {...props} ref={ref} />\n    </Suspense>\n  ));\n};\n\n// Componente para lazy loading de imagens\nexport const LazyImage = ({ \n  src, \n  alt, \n  className,\n  fallback \n}: {\n  src: string;\n  alt: string;\n  className?: string;\n  fallback?: string;\n}) => {\n  const [loaded, setLoaded] = React.useState(false);\n  const [error, setError] = React.useState(false);\n\n  return (\n    <div className={`relative ${className}`}>\n      {!loaded && !error && (\n        <Skeleton className=\"absolute inset-0 w-full h-full\" />\n      )}\n      <img\n        src={error ? fallback : src}\n        alt={alt}\n        className={`${className} ${loaded ? 'opacity-100' : 'opacity-0'} transition-opacity duration-300`}\n        onLoad={() => setLoaded(true)}\n        onError={() => {\n          setError(true);\n          setLoaded(true);\n        }}\n        loading=\"lazy\"\n      />\n    </div>\n  );\n};\n\n// Hook para intersection observer (lazy loading ao entrar na viewport)\nexport const useIntersectionObserver = (\n  ref: React.RefObject<Element>,\n  options: IntersectionObserverInit = {}\n) => {\n  const [isIntersecting, setIsIntersecting] = React.useState(false);\n\n  React.useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsIntersecting(entry.isIntersecting);\n      },\n      {\n        threshold: 0.1,\n        ...options\n      }\n    );\n\n    observer.observe(element);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref, options]);\n\n  return isIntersecting;\n};\n\n// Componente para carregar conteúdo só quando visível\nexport const LazySection = ({ \n  children, \n  fallback,\n  className = \"\"\n}: {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  className?: string;\n}) => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const isVisible = useIntersectionObserver(ref, { rootMargin: '100px' });\n\n  return (\n    <div ref={ref} className={className}>\n      {isVisible ? children : (fallback || <LoadingSkeleton type=\"card\" />)}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/LoadingComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2513,2516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2513,2516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, RefreshCw } from \"lucide-react\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  text?: string;\n  fullScreen?: boolean;\n  className?: string;\n  variant?: \"default\" | \"dots\" | \"bars\" | \"pulse\";\n}\n\nexport function LoadingSpinner({ \n  size = \"md\", \n  text, \n  fullScreen = false, \n  className = \"\",\n  variant = \"default\"\n}: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-8 h-8\", \n    lg: \"w-12 h-12\"\n  };\n\n  const containerClasses = fullScreen \n    ? \"fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center\"\n    : \"flex items-center justify-center\";\n\n  const renderSpinner = () => {\n    switch (variant) {\n      case \"dots\":\n        return (\n          <div className=\"flex space-x-1\">\n            <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce [animation-delay:-0.3s]\" />\n            <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce [animation-delay:-0.15s]\" />\n            <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" />\n          </div>\n        );\n      case \"bars\":\n        return (\n          <div className=\"flex space-x-1\">\n            <div className=\"w-1 h-6 bg-primary animate-pulse [animation-delay:-0.4s]\" />\n            <div className=\"w-1 h-6 bg-primary animate-pulse [animation-delay:-0.2s]\" />\n            <div className=\"w-1 h-6 bg-primary animate-pulse\" />\n          </div>\n        );\n      case \"pulse\":\n        return <div className={`${sizeClasses[size]} bg-primary rounded-full animate-pulse`} />;\n      default:\n        return <Loader2 className={`${sizeClasses[size]} animate-spin text-primary`} />;\n    }\n  };\n\n  const SpinnerComponent = (\n    <div className={`flex items-center justify-center space-x-3 ${className}`}>\n      {renderSpinner()}\n      {text && (\n        <span className=\"text-sm text-muted-foreground animate-fade-in\">{text}</span>\n      )}\n    </div>\n  );\n\n  if (fullScreen) {\n    return (\n      <div className={containerClasses}>\n        <div className=\"bg-background border rounded-lg p-6 shadow-lg\">\n          {SpinnerComponent}\n        </div>\n      </div>\n    );\n  }\n\n  return SpinnerComponent;\n}\n\nexport function LoadingButton({ children, loading, loadingText = \"Carregando...\", variant = \"default\", size = \"default\", ...props }: any) {\n  return (\n    <Button {...props} disabled={loading || props.disabled} variant={variant} size={size}>\n      {loading ? (\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"w-4 h-4 animate-spin\" />\n          <span>{loadingText}</span>\n        </div>\n      ) : (\n        children\n      )}\n    </Button>\n  );\n}\n\nexport function SkeletonCard({ animate = true }: { animate?: boolean }) {\n  return (\n    <Card className={animate ? \"animate-pulse\" : \"\"}>\n      <CardHeader>\n        <Skeleton className=\"h-4 w-3/4\" />\n        <Skeleton className=\"h-3 w-1/2\" />\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <Skeleton className=\"h-4 w-full\" />\n        <Skeleton className=\"h-4 w-4/5\" />\n        <Skeleton className=\"h-4 w-2/3\" />\n        <div className=\"flex space-x-2 pt-2\">\n          <Skeleton className=\"h-8 w-20\" />\n          <Skeleton className=\"h-8 w-16\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport function SkeletonTable({ rows = 5, columns = 4 }: { rows?: number; columns?: number }) {\n  return (\n    <div className=\"space-y-3\">\n      {/* Header */}\n      <div className=\"flex space-x-4 pb-2 border-b\">\n        {Array.from({ length: columns }).map((_, i) => (\n          <Skeleton key={`header-${i}`} className=\"h-4 w-24\" />\n        ))}\n      </div>\n      {/* Rows */}\n      {Array.from({ length: rows }).map((_, i) => (\n        <div key={`row-${i}`} className=\"flex space-x-4\">\n          {Array.from({ length: columns }).map((_, j) => (\n            <Skeleton \n              key={`cell-${i}-${j}`} \n              className={`h-4 ${j === 0 ? 'w-32' : j === columns - 1 ? 'w-16' : 'w-24'}`} \n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport function SkeletonText({ lines = 3, className = \"\" }: { lines?: number; className?: string }) {\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {Array.from({ length: lines }).map((_, i) => (\n        <Skeleton \n          key={i} \n          className={`h-4 ${\n            i === lines - 1 ? 'w-2/3' : i === 0 ? 'w-full' : 'w-5/6'\n          }`} \n        />\n      ))}\n    </div>\n  );\n}\n\nexport function SkeletonStats() {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {Array.from({ length: 4 }).map((_, i) => (\n        <Card key={i} className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Skeleton className=\"h-4 w-4\" />\n              <Skeleton className=\"h-4 w-20\" />\n            </div>\n            <Skeleton className=\"h-8 w-16 mt-2\" />\n            <Skeleton className=\"h-3 w-24 mt-1\" />\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\nexport function SkeletonChart() {\n  return (\n    <Card>\n      <CardHeader>\n        <Skeleton className=\"h-6 w-48\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"flex items-end space-x-2\">\n              <Skeleton className=\"h-3 w-8\" />\n              <Skeleton className={`w-4 h-${8 + (i * 2)}`} />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/MobileDebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/OAuthDebug.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[738,741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[738,741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[805,808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[805,808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2240,2243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2240,2243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3446,3449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3446,3449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4812,4815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4812,4815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle, XCircle, AlertTriangle, RefreshCw } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport const OAuthDebug = () => {\n  const { user, session, loading } = useAuth();\n  const { toast } = useToast();\n  const [testingConnection, setTestingConnection] = useState(false);\n  const [supabaseAuthConfig, setSupabaseAuthConfig] = useState<any>(null);\n  const [oauthProviders, setOauthProviders] = useState<any>(null);\n\n  // Verificar configuração do Supabase ao carregar\n  useEffect(() => {\n    checkSupabaseConfig();\n  }, []);\n\n  const checkSupabaseConfig = async () => {\n    try {\n      // Tentar acessar configuração de auth (se disponível via API)\n      console.log('🔍 Checking Supabase configuration...');\n      \n      // Verificar se conseguimos fazer uma query básica\n      const { data, error } = await supabase.from('profiles').select('count').limit(1);\n      \n      if (error) {\n        console.error('❌ Database connection failed:', error);\n        setSupabaseAuthConfig({ error: error.message });\n      } else {\n        console.log('✅ Database connection successful');\n        setSupabaseAuthConfig({ connected: true });\n      }\n    } catch (err: any) {\n      console.error('❌ Supabase config check failed:', err);\n      setSupabaseAuthConfig({ error: err.message });\n    }\n  };\n\n  const testSupabaseConnection = async () => {\n    setTestingConnection(true);\n    try {\n      const { data, error } = await supabase.from('profiles').select('count').limit(1);\n      \n      if (error) {\n        toast({\n          title: \"❌ Conexão com Supabase falhou\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"✅ Conexão com Supabase OK\",\n          description: \"Base de dados acessível\",\n          variant: \"default\",\n        });\n      }\n    } catch (err: any) {\n      toast({\n        title: \"❌ Erro de conexão\",\n        description: err.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setTestingConnection(false);\n    }\n  };\n\n  const handleAdvancedTest = async () => {\n    try {\n      console.log('🧪 Running advanced OAuth diagnostics...');\n      \n      // Testar se o provider Google está habilitado\n      const response = await fetch('https://rczygmsaybzcrmdxxyge.supabase.co/auth/v1/settings', {\n        headers: {\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const settings = await response.json();\n        console.log('📋 Supabase Auth Settings:', settings);\n        setOauthProviders(settings);\n        \n        toast({\n          title: \"✅ Configurações carregadas\",\n          description: \"Verifique o console para detalhes\",\n          variant: \"default\",\n        });\n      } else {\n        console.error('❌ Failed to fetch auth settings:', response.status, response.statusText);\n        toast({\n          title: \"❌ Erro ao carregar configurações\",\n          description: `Status: ${response.status}`,\n          variant: \"destructive\",\n        });\n      }\n    } catch (err: any) {\n      console.error('❌ Advanced test failed:', err);\n      toast({\n        title: \"❌ Teste avançado falhou\",\n        description: err.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleTestGoogleOAuth = async () => {\n    try {\n      console.log('🧪 Testing Google OAuth configuration...');\n      console.log('📍 Current URL:', window.location.href);\n      console.log('📍 Origin:', window.location.origin);\n      \n      const { data, error } = await supabase.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/`,\n          queryParams: {\n            access_type: 'offline',\n            prompt: 'consent',\n          },\n        }\n      });\n\n      if (error) {\n        console.error('❌ Google OAuth Error Details:', {\n          message: error.message,\n          status: error.status,\n          details: error\n        });\n        \n        toast({\n          title: \"❌ Erro no Google OAuth\",\n          description: `${error.message} (Status: ${error.status || 'unknown'})`,\n          variant: \"destructive\",\n        });\n      } else {\n        console.log('✅ Google OAuth data:', data);\n        toast({\n          title: \"🚀 Google OAuth iniciado\",\n          description: \"Redirecionando para Google...\",\n          variant: \"default\",\n        });\n      }\n    } catch (err: any) {\n      console.error('❌ Unexpected error:', err);\n      toast({\n        title: \"❌ Erro inesperado\",\n        description: err.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-2xl mx-auto p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            🔍 Diagnóstico OAuth Google\n          </CardTitle>\n          <CardDescription>\n            Verificação do status da autenticação Google\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Status atual */}\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Status atual:</strong> {loading ? 'Carregando...' : session ? 'Usuário logado' : 'Usuário não logado'}\n            </AlertDescription>\n          </Alert>\n\n          {/* Informações do usuário */}\n          {user && (\n            <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n              <h4 className=\"font-medium text-green-800 mb-2\">✅ Usuário autenticado:</h4>\n              <ul className=\"text-sm text-green-700 space-y-1\">\n                <li><strong>ID:</strong> {user.id}</li>\n                <li><strong>Email:</strong> {user.email}</li>\n                <li><strong>Nome:</strong> {user.full_name || 'Não informado'}</li>\n                <li><strong>Role:</strong> {user.role}</li>\n              </ul>\n            </div>\n          )}\n\n          {/* Verificar configuração */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Verificações necessárias:</h4>\n            \n            <div className=\"space-y-2\">\n              <Button \n                onClick={testSupabaseConnection}\n                disabled={testingConnection}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                {testingConnection ? (\n                  <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                ) : (\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                )}\n                Testar Conexão Supabase\n              </Button>\n              \n              <Button \n                onClick={handleAdvancedTest}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                🔬 Verificar Configuração Supabase\n              </Button>\n              \n              <Button \n                onClick={handleTestGoogleOAuth}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                🚀 Testar Google OAuth\n              </Button>\n            </div>\n          </div>\n\n          {/* Resultados dos testes */}\n          {supabaseAuthConfig && (\n            <div className=\"bg-gray-50 p-4 rounded-lg border\">\n              <h4 className=\"font-medium mb-2\">🔬 Resultados dos Testes:</h4>\n              <pre className=\"text-xs bg-card p-2 rounded border overflow-auto\">\n                {JSON.stringify(supabaseAuthConfig, null, 2)}\n              </pre>\n            </div>\n          )}\n\n          {oauthProviders && (\n            <div className=\"bg-gray-50 p-4 rounded-lg border\">\n              <h4 className=\"font-medium mb-2\">⚙️ Configuração OAuth:</h4>\n              <pre className=\"text-xs bg-card p-2 rounded border overflow-auto max-h-40\">\n                {JSON.stringify(oauthProviders, null, 2)}\n              </pre>\n            </div>\n          )}\n\n          {/* URLs importantes */}\n          <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">📋 URLs que devem estar configuradas no Google Cloud:</h4>\n            <div className=\"text-sm text-blue-700 space-y-2\">\n              <div>\n                <strong>Authorized JavaScript Origins:</strong>\n                <div className=\"bg-card p-2 rounded border font-mono text-xs mt-1 space-y-1\">\n                  <div>https://rczygmsaybzcrmdxxyge.supabase.co</div>\n                  <div>{window.location.origin}</div>\n                </div>\n              </div>\n              <div>\n                <strong>Authorized Redirect URIs:</strong>\n                <div className=\"bg-card p-2 rounded border font-mono text-xs mt-1\">\n                  https://rczygmsaybzcrmdxxyge.supabase.co/auth/v1/callback\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-3 p-3 bg-yellow-100 border border-yellow-300 rounded\">\n              <p className=\"text-xs text-yellow-800\">\n                <strong>⚠️ IMPORTANTE:</strong> Se você está testando, adicione <code>{window.location.origin}</code> às \"Authorized JavaScript Origins\" no Google Cloud Console.\n              </p>\n            </div>\n          </div>\n\n          {/* URLs do Supabase */}\n          <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n            <h4 className=\"font-medium text-green-800 mb-2\">⚙️ Configuração no Supabase:</h4>\n            <div className=\"text-sm text-green-700 space-y-2\">\n              <div>\n                <strong>Site URL (em Auth Settings):</strong>\n                <div className=\"bg-card p-2 rounded border font-mono text-xs mt-1\">\n                  {window.location.origin}\n                </div>\n              </div>\n              <div>\n                <strong>Redirect URLs (adicionar):</strong>\n                <div className=\"bg-card p-2 rounded border font-mono text-xs mt-1\">\n                  {window.location.origin}/**\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Links diretos para configuração */}\n          <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n            <h4 className=\"font-medium text-purple-800 mb-2\">🔗 Links diretos para configuração:</h4>\n            <div className=\"space-y-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => window.open('https://supabase.com/dashboard/project/rczygmsaybzcrmdxxyge/auth/url-configuration', '_blank')}\n                className=\"w-full text-xs\"\n              >\n                📐 Supabase - URL Configuration\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => window.open('https://supabase.com/dashboard/project/rczygmsaybzcrmdxxyge/auth/providers', '_blank')}\n                className=\"w-full text-xs\"\n              >\n                🔑 Supabase - OAuth Providers\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => window.open('https://console.cloud.google.com/apis/credentials', '_blank')}\n                className=\"w-full text-xs\"\n              >\n                ☁️ Google Cloud - Credentials\n              </Button>\n            </div>\n          </div>\n\n          {/* Checklist */}\n          <div className=\"bg-yellow-50 p-4 rounded-lg border border-yellow-200\">\n            <h4 className=\"font-medium text-yellow-800 mb-2\">⚠️ Checklist de configuração:</h4>\n            <ul className=\"text-sm text-yellow-700 space-y-1\">\n              <li>□ Google Cloud Console configurado</li>\n              <li>□ Client ID e Secret inseridos no Supabase</li>\n              <li>□ Provider Google habilitado no Supabase</li>\n              <li>□ URLs de redirect configuradas corretamente</li>\n              <li>□ {window.location.origin} adicionado nas JavaScript Origins</li>\n            </ul>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/OptimizedApp.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":10,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":10,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2596,2599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2596,2599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3328,3331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3328,3331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { Suspense, useEffect } from 'react';\nimport { TimerManager, performanceTracker, analyzeBundleSize } from '@/utils/performanceOptimizer';\n\n// Lazy load componentes pesados\nconst AdminDashboard = React.lazy(() => import('@/pages/admin/AdminDashboard'));\nconst InfluencerDashboard = React.lazy(() => import('@/pages/influencer/InfluencerDashboard'));\nconst ProDashboard = React.lazy(() => import('@/pages/pro/ProDashboard'));\n\n// Timer manager global\nexport const globalTimerManager = new TimerManager();\n\n// Error fallback component\nconst ErrorFallback: React.FC<{ error: Error; resetError: () => void }> = ({ error, resetError }) => (\n  <div className=\"min-h-screen flex items-center justify-center bg-background text-foreground\">\n    <div className=\"text-center\">\n      <h2 className=\"text-2xl font-bold mb-4\">Algo deu errado</h2>\n      <p className=\"text-muted-foreground mb-4\">\n        {error.message || 'Erro desconhecido'}\n      </p>\n      <button\n        onClick={resetError}\n        className=\"bg-primary text-primary-foreground px-4 py-2 rounded mr-2\"\n      >\n        Tentar Novamente\n      </button>\n      <button\n        onClick={() => window.location.reload()}\n        className=\"bg-secondary text-secondary-foreground px-4 py-2 rounded\"\n      >\n        Recarregar Página\n      </button>\n    </div>\n  </div>\n);\n\n// Loading fallback\nconst LoadingFallback: React.FC = () => (\n  <div className=\"min-h-screen flex items-center justify-center bg-background\">\n    <div className=\"text-center\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n      <p className=\"text-foreground\">Carregando...</p>\n    </div>\n  </div>\n);\n\n// Performance wrapper\nexport const PerformanceWrapper: React.FC<{\n  children: React.ReactNode;\n  componentName: string;\n}> = ({ children, componentName }) => {\n  useEffect(() => {\n    performanceTracker.start(componentName);\n    \n    return () => {\n      performanceTracker.end(componentName);\n    };\n  }, [componentName]);\n\n  return <>{children}</>;\n};\n\n// App cleanup hook\nexport const useAppCleanup = () => {\n  useEffect(() => {\n    // Performance tracking\n    if (process.env.NODE_ENV === 'development') {\n      analyzeBundleSize();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      globalTimerManager.cleanup();\n    };\n  }, []);\n};\n\n// Simple error boundary\nclass SimpleErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback: React.ComponentType<{ error: Error; resetError: () => void }> },\n  { hasError: boolean; error: Error | null }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by error boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError && this.state.error) {\n      const FallbackComponent = this.props.fallback;\n      return <FallbackComponent \n        error={this.state.error} \n        resetError={() => this.setState({ hasError: false, error: null })}\n      />;\n    }\n\n    return this.props.children;\n  }\n}\n\n// Optimized route component\nexport const OptimizedRoute: React.FC<{\n  component: React.ComponentType<any>;\n  componentName: string;\n  children?: React.ReactNode;\n}> = ({ component: Component, componentName, children }) => {\n  return (\n    <SimpleErrorBoundary fallback={ErrorFallback}>\n      <Suspense fallback={<LoadingFallback />}>\n        <PerformanceWrapper componentName={componentName}>\n          <Component />\n        </PerformanceWrapper>\n      </Suspense>\n    </SimpleErrorBoundary>\n  );\n};\n\n// Memory-optimized image component\nexport const OptimizedImage: React.FC<{\n  src: string;\n  alt: string;\n  className?: string;\n  loading?: 'lazy' | 'eager';\n}> = ({ src, alt, className, loading = 'lazy' }) => {\n  const [imageSrc, setImageSrc] = React.useState<string | null>(null);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const imgRef = React.useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    if (!imgRef.current || loading === 'eager') {\n      setImageSrc(src);\n      return;\n    }\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setImageSrc(src);\n          observer.disconnect();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(imgRef.current);\n\n    return () => observer.disconnect();\n  }, [src, loading]);\n\n  return (\n    <div ref={imgRef} className={className}>\n      {imageSrc && (\n        <img\n          src={imageSrc}\n          alt={alt}\n          className={`transition-opacity duration-300 ${\n            isLoaded ? 'opacity-100' : 'opacity-0'\n          }`}\n          onLoad={() => setIsLoaded(true)}\n          loading={loading}\n        />\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/PaymentCheckout.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { QrCode, CreditCard, Copy, ArrowLeft, CheckCircle } from \"lucide-react\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  image_url?: string;\n  active: boolean;\n  created_at: string;\n}\n\ninterface PaymentCheckoutProps {\n  plan: Plan;\n  onBack: () => void;\n  onSuccess?: (paymentData: any) => void;\n}\n\nexport const PaymentCheckout = ({ plan, onBack, onSuccess }: PaymentCheckoutProps) => {\n  const [paymentMethod, setPaymentMethod] = useState<'pix' | 'boleto' | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [pixData, setPixData] = useState<any>(null);\n  const [copySuccess, setCopySuccess] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const processPayment = async (method: 'pix' | 'boleto') => {\n    if (!user?.id) {\n      toast({\n        title: \"Erro\",\n        description: \"Usuário não autenticado\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      setProcessing(true);\n      \n      console.log('🚀 Iniciando pagamento:', { \n        plan_id: plan.id, \n        user_id: user.id, \n        method,\n        plan_name: plan.name,\n        amount: plan.price\n      });\n\n      // Chamar edge function para criar pagamento via Asaas\n      const { data: response, error } = await supabase.functions.invoke('create-asaas-payment', {\n        body: {\n          plan_id: plan.id,\n          plan_category: 'tatuador', // Detectar automaticamente baseado no plano\n          user_id: user.id,\n          payment_method: method,\n          municipio: 'sao_paulo'\n        }\n      });\n\n      console.log('📡 Resposta da edge function:', response);\n\n      if (error) {\n        console.error('❌ Erro na edge function:', error);\n        throw new Error(error.message || 'Erro na comunicação com o servidor');\n      }\n\n      if (!response?.success) {\n        console.error('❌ Resposta de erro:', response);\n        throw new Error(response?.error || 'Erro ao processar pagamento');\n      }\n\n      if (method === 'pix') {\n        // Para PIX, exibir QR Code e código\n        setPixData({\n          qr_code: response.qr_code || null,\n          pix_code: response.pix_code || 'Código PIX não disponível',\n          amount: response.amount || plan.price,\n          payment_id: response.payment_id,\n          redirect_url: response.redirect_url\n        });\n\n        toast({\n          title: \"PIX Gerado!\",\n          description: \"Use o QR Code ou copie o código PIX para pagar.\",\n        });\n      } else if (method === 'boleto') {\n        // Para boleto, redirecionar direto\n        if (response.redirect_url) {\n          window.open(response.redirect_url, '_blank');\n          toast({\n            title: \"Boleto Gerado!\",\n            description: \"O boleto foi aberto em uma nova aba.\",\n          });\n        }\n      }\n\n      if (onSuccess) {\n        onSuccess(response);\n      }\n\n    } catch (error) {\n      console.error('💥 Erro ao processar pagamento:', error);\n      toast({\n        title: \"Erro no pagamento\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const copyPixCode = async () => {\n    if (!pixData?.pix_code) return;\n    \n    try {\n      await navigator.clipboard.writeText(pixData.pix_code);\n      setCopySuccess(true);\n      toast({\n        title: \"Código copiado!\",\n        description: \"Cole no seu app de banco para pagar.\",\n      });\n      \n      setTimeout(() => setCopySuccess(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar\",\n        description: \"Selecione e copie o código manualmente.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Se PIX foi gerado, mostrar tela de PIX\n  if (pixData) {\n    return (\n      <Card className=\"w-full max-w-2xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setPixData(null)}>\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"flex-1\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <QrCode className=\"h-5 w-5 text-primary\" />\n                Pagamento PIX\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {plan.name} - {formatCurrency(pixData.amount)}\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* QR Code (se disponível) */}\n          {pixData.qr_code && (\n            <div className=\"text-center\">\n              <div className=\"inline-block p-4 bg-white rounded-lg border-2\">\n                <img \n                  src={pixData.qr_code} \n                  alt=\"QR Code PIX\" \n                  className=\"w-48 h-48 mx-auto\"\n                />\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Escaneie com o app do seu banco\n              </p>\n            </div>\n          )}\n\n          {/* Código PIX */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Código PIX (Copia e Cola)</label>\n            <div className=\"flex gap-2\">\n              <div className=\"flex-1 p-3 bg-muted rounded-lg font-mono text-sm break-all\">\n                {pixData.pix_code}\n              </div>\n              <Button\n                onClick={copyPixCode}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"shrink-0\"\n              >\n                {copySuccess ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          {/* Instruções */}\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <h4 className=\"font-medium text-blue-900 mb-2\">Como pagar:</h4>\n            <ol className=\"text-sm text-blue-800 space-y-1\">\n              <li>1. Abra o app do seu banco</li>\n              <li>2. Procure por \"PIX\" ou \"Pagar com PIX\"</li>\n              <li>3. Escaneie o QR Code ou cole o código PIX</li>\n              <li>4. Confirme o pagamento</li>\n            </ol>\n          </div>\n\n          {/* Link direto se disponível */}\n          {pixData.redirect_url && (\n            <Button \n              onClick={() => window.open(pixData.redirect_url, '_blank')}\n              className=\"w-full\"\n              variant=\"outline\"\n            >\n              Abrir página de pagamento\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Tela principal de seleção de método\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <CardTitle className=\"flex-1\">Finalizar Pagamento</CardTitle>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Resumo do Plano */}\n        <div className=\"p-4 bg-muted/50 rounded-lg\">\n          <div className=\"flex items-start gap-3\">\n            {plan.image_url && (\n              <img \n                src={plan.image_url} \n                alt={plan.name}\n                className=\"w-16 h-16 object-cover rounded-lg\"\n              />\n            )}\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold\">{plan.name}</h3>\n              {plan.description && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {plan.description}\n                </p>\n              )}\n              <p className=\"text-2xl font-bold text-primary mt-2\">\n                {formatCurrency(plan.price)}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Métodos de Pagamento */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium\">Escolha a forma de pagamento:</h3>\n          \n          <div className=\"grid gap-3\">\n            <Button\n              variant={paymentMethod === 'pix' ? 'default' : 'outline'}\n              onClick={() => setPaymentMethod('pix')}\n              className=\"h-auto p-4 justify-start\"\n            >\n              <QrCode className=\"h-5 w-5 mr-3\" />\n              <div className=\"text-left\">\n                <div className=\"font-medium\">PIX</div>\n                <div className=\"text-sm opacity-75\">Pagamento instantâneo</div>\n              </div>\n            </Button>\n\n            <Button\n              variant={paymentMethod === 'boleto' ? 'default' : 'outline'}\n              onClick={() => setPaymentMethod('boleto')}\n              className=\"h-auto p-4 justify-start\"\n            >\n              <CreditCard className=\"h-5 w-5 mr-3\" />\n              <div className=\"text-left\">\n                <div className=\"font-medium\">Boleto Bancário</div>\n                <div className=\"text-sm opacity-75\">Vence em 7 dias</div>\n              </div>\n            </Button>\n          </div>\n        </div>\n\n        {/* Botão de Pagamento */}\n        {paymentMethod && (\n          <Button\n            onClick={() => processPayment(paymentMethod)}\n            disabled={processing}\n            className=\"w-full h-12\"\n            size=\"lg\"\n          >\n            {processing ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-background border-t-transparent mr-2\" />\n                Processando...\n              </>\n            ) : (\n              <>\n                Pagar com {paymentMethod === 'pix' ? 'PIX' : 'Boleto'}\n              </>\n            )}\n          </Button>\n        )}\n\n        {paymentMethod === 'pix' && !processing && (\n          <p className=\"text-xs text-center text-muted-foreground\">\n            Após o pagamento, você será redirecionado para seu painel\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/PaymentDebugTool.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2386,2389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2386,2389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4927,4930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4927,4930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Bug, CheckCircle, XCircle } from \"lucide-react\";\n\nexport const PaymentDebugTool = () => {\n  const [debugging, setDebugging] = useState(false);\n  const [debugResults, setDebugResults] = useState<any>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const runDebugTest = async () => {\n    if (!user?.id) {\n      toast({\n        title: \"Erro\",\n        description: \"Usuário não autenticado\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      setDebugging(true);\n      setDebugResults(null);\n\n      const results = {\n        step1: null,\n        step2: null,\n        step3: null,\n        step4: null,\n        final: null\n      };\n\n      // Step 1: Verificar dados do usuário\n      console.log('🔍 DEBUG Step 1: Verificando dados do usuário...');\n      const { data: userProfile, error: userError } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      results.step1 = {\n        success: !userError,\n        data: userProfile,\n        error: userError,\n        cpf_exists: !!userProfile?.cpf,\n        cpf_value: userProfile?.cpf\n      };\n\n      // Step 2: Verificar se o plano existe\n      console.log('🔍 DEBUG Step 2: Verificando plano específico...');\n      const planId = '1c179f6e-8748-421e-9781-97793ec5a6dd';\n      const { data: plan, error: planError } = await supabase\n        .from('planos_tatuador')\n        .select('*')\n        .eq('id', planId)\n        .eq('active', true)\n        .single();\n\n      results.step2 = {\n        success: !planError,\n        data: plan,\n        error: planError,\n        plan_exists: !!plan,\n        plan_active: plan?.active\n      };\n\n      // Step 3: Testar unified-plans-loader\n      console.log('🔍 DEBUG Step 3: Testando unified-plans-loader...');\n      const { data: plansResponse, error: plansError } = await supabase.functions.invoke('unified-plans-loader', {\n        body: { include_inactive: false, admin_view: false }\n      });\n\n      const foundPlan = plansResponse?.plans?.find((p: any) => p.id === planId);\n\n      results.step3 = {\n        success: plansResponse?.success,\n        total_plans: plansResponse?.plans?.length || 0,\n        target_plan_found: !!foundPlan,\n        target_plan_data: foundPlan,\n        error: plansError\n      };\n\n      // Step 4: Verificar integração Asaas\n      console.log('🔍 DEBUG Step 4: Verificando integração Asaas...');\n      const { data: asaasConfigs, error: asaasError } = await supabase\n        .from('asaas_integration')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      let asaasConfig = null;\n      if (asaasConfigs && asaasConfigs.length > 0) {\n        // Buscar primeiro ativo, ou pegar o mais recente\n        asaasConfig = asaasConfigs.find(config => config.status === 'active') || asaasConfigs[0];\n      }\n\n      results.step4 = {\n        success: !asaasError && !!asaasConfig,\n        data: asaasConfig,\n        error: asaasError,\n        total_configs: asaasConfigs?.length || 0,\n        integration_active: asaasConfig?.status === 'active',\n        connection_status: asaasConfig?.connection_status\n      };\n\n      // Final: Tentar criar pagamento de teste\n      console.log('🔍 DEBUG Final: Testando create-asaas-payment...');\n      \n      try {\n        const { data: paymentResponse, error: paymentError } = await supabase.functions.invoke('create-asaas-payment', {\n          body: {\n            plan_id: planId,\n            plan_category: 'tattoo',\n            user_id: user.id,\n            payment_method: 'pix',\n            municipio: 'sao_paulo'\n          }\n        });\n\n        results.final = {\n          success: paymentResponse?.success || false,\n          data: paymentResponse,\n          error: paymentError,\n          error_details: paymentError?.message || paymentError?.details\n        };\n      } catch (error) {\n        results.final = {\n          success: false,\n          error: error,\n          error_type: 'exception',\n          error_message: error instanceof Error ? error.message : 'Erro desconhecido'\n        };\n      }\n\n      setDebugResults(results);\n\n      toast({\n        title: \"Debug Completo\",\n        description: \"Verifique os resultados abaixo\",\n      });\n\n    } catch (error) {\n      console.error('❌ Erro no debug:', error);\n      toast({\n        title: \"Erro no debug\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDebugging(false);\n    }\n  };\n\n  const renderDebugStep = (stepName: string, stepData: any) => {\n    if (!stepData) return null;\n\n    return (\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            {stepData.success ? (\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            ) : (\n              <XCircle className=\"h-5 w-5 text-red-600\" />\n            )}\n            {stepName}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <pre className=\"text-xs bg-muted p-3 rounded overflow-auto max-h-40\">\n            {JSON.stringify(stepData, null, 2)}\n          </pre>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bug className=\"h-5 w-5\" />\n          Debug do Fluxo de Pagamento\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Ferramenta para diagnosticar problemas no fluxo de pagamento do produto \"Fechamento de braço\"\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <Button\n          onClick={runDebugTest}\n          disabled={debugging || !user?.id}\n          className=\"w-full\"\n        >\n          {debugging ? \"Executando Debug...\" : \"Executar Debug Completo\"}\n        </Button>\n\n        {!user?.id && (\n          <p className=\"text-sm text-red-600\">\n            Você precisa estar logado para executar o debug\n          </p>\n        )}\n\n        {debugResults && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Resultados do Debug:</h3>\n            \n            {renderDebugStep(\"Step 1: Dados do Usuário\", debugResults.step1)}\n            {renderDebugStep(\"Step 2: Verificação do Plano\", debugResults.step2)}\n            {renderDebugStep(\"Step 3: Unified Plans Loader\", debugResults.step3)}\n            {renderDebugStep(\"Step 4: Integração Asaas\", debugResults.step4)}\n            {renderDebugStep(\"Final: Criação de Pagamento\", debugResults.final)}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/PaymentModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[716,719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[716,719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'generatePixPayment', 'loading', and 'pixData'. Either include them or remove the dependency array.","line":85,"column":6,"nodeType":"ArrayExpression","endLine":85,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [generatePixPayment, isOpen, loading, pixData, plan]","fix":{"range":[2530,2544],"text":"[generatePixPayment, isOpen, loading, pixData, plan]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { QrCode, Copy, CheckCircle, Loader2, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  image_url?: string;\n  active: boolean;\n  created_at: string;\n}\n\ninterface PaymentModalProps {\n  plan: Plan | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: (paymentData: any) => void;\n}\n\nexport const PaymentModal = ({ plan, isOpen, onClose, onSuccess }: PaymentModalProps) => {\n  const [loading, setLoading] = useState(false);\n  const [pixData, setPixData] = useState<any>(null);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const generatePixPayment = async () => {\n    if (!plan) return;\n\n    try {\n      setLoading(true);\n      console.log('🚀 PIX ULTRA SIMPLES - Gerando para:', plan.name, 'R$', plan.price);\n\n      const { data: paymentResponse, error } = await supabase.functions.invoke('create-simple-pix', {\n        body: {\n          plan_id: plan.id,\n          plan_category: 'tattoo',\n          user_id: (await supabase.auth.getUser()).data.user?.id,\n          payment_method: 'pix',\n          municipio: 'sao_paulo'\n        }\n      });\n\n      if (error) {\n        console.error('❌ Erro PIX SIMPLES:', error);\n        throw new Error(error.message || 'Erro ao gerar PIX');\n      }\n\n      if (!paymentResponse?.success) {\n        throw new Error(paymentResponse?.error || 'Falha ao gerar PIX');\n      }\n\n      console.log('✅ PIX SIMPLES FUNCIONOU:', paymentResponse);\n      setPixData(paymentResponse);\n\n      toast({\n        title: \"PIX Pronto!\",\n        description: \"Escaneie o QR Code ou copie o código para pagar\",\n      });\n\n    } catch (error) {\n      console.error('💥 Erro PIX:', error);\n      toast({\n        title: \"Erro no PIX\",\n        description: error instanceof Error ? error.message : \"Erro ao gerar PIX\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-gerar PIX quando modal abre\n  React.useEffect(() => {\n    if (isOpen && plan && !pixData && !loading) {\n      console.log('🎯 Modal aberto - Gerando PIX automaticamente');\n      generatePixPayment();\n    }\n  }, [isOpen, plan]);\n\n  const copyPixCode = async () => {\n    if (pixData?.pix_code) {\n      await navigator.clipboard.writeText(pixData.pix_code);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n      \n      toast({\n        title: \"Copiado!\",\n        description: \"Código PIX copiado para a área de transferência\",\n      });\n    }\n  };\n\n  const handleClose = () => {\n    setPixData(null);\n    setCopied(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>PIX Instantâneo</span>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Resumo do Produto */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h3 className=\"font-semibold\">{plan?.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{plan?.description}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-2xl font-bold text-green-600\">R$ {plan?.price}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Status de Loading ou QR Code */}\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <Loader2 className=\"mx-auto h-8 w-8 animate-spin text-primary\" />\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Gerando PIX instantâneo...\n              </p>\n            </div>\n          ) : !pixData ? (\n            <div className=\"text-center py-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                PIX será gerado automaticamente...\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* QR Code */}\n              {pixData.qr_code && (\n                <div className=\"text-center space-y-2\">\n                  <p className=\"text-sm font-medium\">📱 Escaneie o QR Code:</p>\n                  <div className=\"flex justify-center\">\n                    <img \n                      src={`data:image/png;base64,${pixData.qr_code}`}\n                      alt=\"QR Code PIX\"\n                      className=\"w-48 h-48 border rounded-lg shadow-md\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Código PIX */}\n              {pixData.pix_code && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium\">💳 Ou copie o código PIX:</p>\n                  <div className=\"flex gap-2\">\n                    <input\n                      type=\"text\"\n                      value={pixData.pix_code}\n                      readOnly\n                      className=\"flex-1 p-2 text-xs border rounded bg-muted font-mono\"\n                    />\n                    <Button onClick={copyPixCode} variant=\"outline\" size=\"sm\">\n                      {copied ? <CheckCircle className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Status */}\n              <div className=\"text-center p-4 bg-green-50 rounded-lg border border-green-200\">\n                <p className=\"text-sm text-green-700 font-medium\">\n                  ✅ PIX Pronto! Aguardando pagamento...\n                </p>\n                <p className=\"text-xs text-green-600 mt-1\">\n                  Após o pagamento, seu plano será ativado automaticamente.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/PaymentProcessor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[584,587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[584,587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, QrCode, Copy, Check, Loader2 } from \"lucide-react\";\n\ninterface PaymentProcessorProps {\n  planId: string;\n  userId: string;\n  influencerCode?: string;\n  onPaymentSuccess?: (paymentData: any) => void;\n}\n\nexport function PaymentProcessor({ \n  planId, \n  userId, \n  influencerCode, \n  onPaymentSuccess \n}: PaymentProcessorProps) {\n  const [paymentMethod, setPaymentMethod] = useState<\"credit_card\" | \"pix\">(\"credit_card\");\n  const [processing, setProcessing] = useState(false);\n  const [pixData, setPixData] = useState<any>(null);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const processPayment = async (method: \"credit_card\" | \"pix\") => {\n    try {\n      setProcessing(true);\n      \n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) throw new Error(\"Usuário não autenticado\");\n\n      const { data, error } = await supabase.functions.invoke('process-real-payment', {\n        body: {\n          plan_id: planId,\n          user_id: userId,\n          influencer_code: influencerCode,\n          payment_method: method,\n        },\n        headers: {\n          Authorization: `Bearer ${session.access_token}`,\n        },\n      });\n\n      if (error) throw error;\n\n      if (method === \"credit_card\") {\n        // Redirect to Stripe checkout\n        window.open(data.checkout_url, '_blank');\n        \n        toast({\n          title: \"Redirecionando para pagamento\",\n          description: \"Você será redirecionado para finalizar a compra com cartão de crédito.\",\n        });\n      } else {\n        // Show PIX data\n        setPixData(data);\n        toast({\n          title: \"PIX gerado com sucesso\",\n          description: \"Copie o código PIX ou escaneie o QR Code para pagar.\",\n        });\n      }\n\n      onPaymentSuccess?.(data);\n\n    } catch (error) {\n      console.error(\"Payment error:\", error);\n      toast({\n        title: \"Erro no pagamento\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const copyPixCode = async () => {\n    if (pixData?.pix_code) {\n      try {\n        await navigator.clipboard.writeText(pixData.pix_code);\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n        \n        toast({\n          title: \"Código PIX copiado\",\n          description: \"Cole no seu aplicativo bancário para pagar.\",\n        });\n      } catch (error) {\n        console.error(\"Failed to copy PIX code:\", error);\n      }\n    }\n  };\n\n  if (pixData) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <QrCode className=\"h-5 w-5\" />\n            <span>Pagamento via PIX</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center\">\n            <img \n              src={pixData.qr_code} \n              alt=\"QR Code PIX\" \n              className=\"mx-auto mb-4 border rounded-lg\"\n            />\n            <Badge variant=\"outline\" className=\"mb-2\">\n              R$ {pixData.amount.toFixed(2)}\n            </Badge>\n          </div>\n\n          <Separator />\n\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium\">Código PIX:</p>\n            <div className=\"flex items-center space-x-2\">\n              <code className=\"flex-1 p-2 bg-gray-100 rounded text-xs break-all\">\n                {pixData.pix_code}\n              </code>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={copyPixCode}\n                disabled={copied}\n              >\n                {copied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-700\">\n              <strong>Como pagar:</strong><br />\n              1. Abra seu aplicativo bancário<br />\n              2. Escolha PIX → Copiar e Colar<br />\n              3. Cole o código acima<br />\n              4. Confirme o pagamento\n            </p>\n          </div>\n\n          <Button \n            variant=\"outline\" \n            className=\"w-full\"\n            onClick={() => {\n              setPixData(null);\n              setPaymentMethod(\"credit_card\");\n            }}\n          >\n            Voltar para seleção de pagamento\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Escolha a forma de pagamento</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Button\n            variant={paymentMethod === \"credit_card\" ? \"default\" : \"outline\"}\n            className=\"h-20 flex-col space-y-2\"\n            onClick={() => setPaymentMethod(\"credit_card\")}\n            disabled={processing}\n          >\n            <CreditCard className=\"h-6 w-6\" />\n            <span>Cartão de Crédito</span>\n          </Button>\n\n          <Button\n            variant={paymentMethod === \"pix\" ? \"default\" : \"outline\"}\n            className=\"h-20 flex-col space-y-2\"\n            onClick={() => setPaymentMethod(\"pix\")}\n            disabled={processing}\n          >\n            <QrCode className=\"h-6 w-6\" />\n            <span>PIX</span>\n          </Button>\n        </div>\n\n        <Separator />\n\n        <Button\n          className=\"w-full\"\n          onClick={() => processPayment(paymentMethod)}\n          disabled={processing}\n        >\n          {processing ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              Processando...\n            </>\n          ) : (\n            <>\n              Pagar com {paymentMethod === \"credit_card\" ? \"Cartão\" : \"PIX\"}\n            </>\n          )}\n        </Button>\n\n        {paymentMethod === \"credit_card\" && (\n          <p className=\"text-xs text-gray-500 text-center\">\n            Você será redirecionado para uma página segura do Stripe\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/SecureFileUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[491,494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[491,494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[895,898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[895,898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useFileUpload } from \"@/hooks/useFileUpload\";\nimport { Upload, File, Image, Video, X, Check } from \"lucide-react\";\n\ninterface SecureFileUploadProps {\n  type: 'image' | 'document' | 'video';\n  category?: string;\n  onUploadComplete?: (result: any) => void;\n  accept?: string;\n  maxSize?: string;\n  label?: string;\n  description?: string;\n  className?: string;\n}\n\nexport function SecureFileUpload({\n  type,\n  category = 'general',\n  onUploadComplete,\n  accept,\n  maxSize,\n  label,\n  description,\n  className = \"\",\n}: SecureFileUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState<any>(null);\n  const { uploading, progress, uploadFile } = useFileUpload();\n\n  const getAcceptTypes = () => {\n    if (accept) return accept;\n    switch (type) {\n      case 'image': return '.jpg,.jpeg,.png,.webp';\n      case 'document': return '.pdf,.jpg,.jpeg,.png';\n      case 'video': return '.mp4,.mov,.avi';\n      default: return '*';\n    }\n  };\n\n  const getMaxSizeText = () => {\n    if (maxSize) return maxSize;\n    switch (type) {\n      case 'image': return '5MB';\n      case 'document': return '10MB';\n      case 'video': return '100MB';\n      default: return '10MB';\n    }\n  };\n\n  const getIcon = () => {\n    switch (type) {\n      case 'image': return <Image className=\"h-8 w-8\" />;\n      case 'video': return <Video className=\"h-8 w-8\" />;\n      default: return <File className=\"h-8 w-8\" />;\n    }\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFile(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files[0]) {\n      handleFile(e.target.files[0]);\n    }\n  };\n\n  const handleFile = async (file: File) => {\n    const result = await uploadFile(file, { type, category });\n    if (result) {\n      setUploadedFile(result);\n      onUploadComplete?.(result);\n    }\n  };\n\n  const removeFile = () => {\n    setUploadedFile(null);\n  };\n\n  if (uploadedFile) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Check className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"font-medium\">{uploadedFile.file_name}</p>\n                <p className=\"text-sm text-gray-500\">\n                  {(uploadedFile.file_size / 1024 / 1024).toFixed(2)} MB\n                </p>\n              </div>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={removeFile}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          {getIcon()}\n          <span>{label || `Upload de ${type}`}</span>\n        </CardTitle>\n        {description && (\n          <CardDescription>{description}</CardDescription>\n        )}\n      </CardHeader>\n      <CardContent>\n        <div\n          className={`relative border-2 border-dashed rounded-lg p-6 transition-colors ${\n            dragActive\n              ? \"border-primary bg-primary/5\"\n              : \"border-gray-300 hover:border-gray-400\"\n          }`}\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n        >\n          <input\n            type=\"file\"\n            accept={getAcceptTypes()}\n            onChange={handleChange}\n            disabled={uploading}\n            className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer disabled:cursor-not-allowed\"\n          />\n          \n          <div className=\"text-center\">\n            <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <div className=\"mt-4\">\n              <p className=\"text-lg font-medium\">\n                {uploading ? \"Enviando...\" : \"Clique ou arraste o arquivo\"}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Formatos aceitos: {getAcceptTypes()} (máx. {getMaxSizeText()})\n              </p>\n            </div>\n          </div>\n\n          {uploading && (\n            <div className=\"mt-4\">\n              <Progress value={progress} className=\"w-full\" />\n              <p className=\"text-sm text-center mt-2 text-gray-600\">\n                {progress}% concluído\n              </p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/SecurityAlert.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[468,471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[468,471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'query' is never reassigned. Use 'const' instead.","line":42,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":16,"fix":{"range":[1283,1434],"text":"const query = supabase\n        .from('notification_triggers')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(10);"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Shield, AlertTriangle, Bell, X } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from 'sonner';\n\ninterface SecurityEvent {\n  id: string;\n  event_type: string;\n  created_at: string;\n  details: any;\n  user_id?: string | null;\n  ip_address?: unknown;\n  user_agent?: string | null;\n}\n\ninterface SecurityAlertProps {\n  enableRealTimeAlerts?: boolean;\n  showCriticalOnly?: boolean;\n}\n\nconst CRITICAL_EVENTS = [\n  'invalid_webhook_signature',\n  'payment_amount_mismatch',\n  'webhook_rate_limit_exceeded',\n  'transaction_limit_exceeded',\n  'deprecated_webhook_accessed'\n];\n\nexport const SecurityAlert = ({ enableRealTimeAlerts = true, showCriticalOnly = false }: SecurityAlertProps) => {\n  const [alerts, setAlerts] = useState<SecurityEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isMinimized, setIsMinimized] = useState(false);\n\n  const fetchRecentAlerts = async () => {\n    try {\n      setLoading(true);\n      \n      // Use notification_triggers as a substitute for security events\n      let query = supabase\n        .from('notification_triggers')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(10);\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error('Error fetching security alerts:', error);\n        return;\n      }\n\n      // Transform notification triggers to security events format\n      const transformedData = (data || []).map(item => ({\n        id: item.id,\n        event_type: item.event_type || 'notification_trigger',\n        created_at: item.created_at,\n        details: item.data,\n        user_id: item.user_id,\n        ip_address: null,\n        user_agent: null\n      }));\n\n      setAlerts(transformedData);\n    } catch (error) {\n      console.error('Error in fetchRecentAlerts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchRecentAlerts();\n\n    if (enableRealTimeAlerts) {\n      const channel = supabase\n        .channel('security-events')\n        .on('postgres_changes', \n          { \n            event: 'INSERT', \n            schema: 'public', \n            table: 'notification_triggers' \n          },\n          (payload) => {\n            const newEvent = payload.new as SecurityEvent;\n            \n            // Add to alerts list\n            setAlerts(prev => [newEvent, ...prev.slice(0, 9)]);\n            \n            // Show toast for critical events\n            if (CRITICAL_EVENTS.includes(newEvent.event_type)) {\n              toast.error(`Security Alert: ${getEventTitle(newEvent.event_type)}`, {\n                description: `Critical security event detected at ${new Date(newEvent.created_at).toLocaleTimeString()}`,\n                action: {\n                  label: 'View Details',\n                  onClick: () => setIsMinimized(false)\n                }\n              });\n            }\n          }\n        )\n        .subscribe();\n\n      return () => {\n        channel.unsubscribe();\n      };\n    }\n  }, [enableRealTimeAlerts, showCriticalOnly]);\n\n  const getEventTitle = (eventType: string): string => {\n    const titles: { [key: string]: string } = {\n      'invalid_webhook_signature': 'Invalid Webhook Signature',\n      'payment_amount_mismatch': 'Payment Amount Mismatch',\n      'webhook_rate_limit_exceeded': 'Webhook Rate Limit Exceeded',\n      'transaction_limit_exceeded': 'Transaction Limit Exceeded',\n      'deprecated_webhook_accessed': 'Deprecated Webhook Accessed',\n      'webhook_invalid_json': 'Invalid Webhook JSON',\n      'referral_limit_exceeded': 'Referral Limit Exceeded',\n      'payment_processed_successfully': 'Payment Processed',\n      'transaction_validation': 'Transaction Validated'\n    };\n    \n    return titles[eventType] || eventType.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getEventSeverity = (eventType: string): 'critical' | 'warning' | 'info' => {\n    if (CRITICAL_EVENTS.includes(eventType)) {\n      return 'critical';\n    }\n    \n    const warningEvents = [\n      'webhook_invalid_json',\n      'referral_limit_exceeded',\n      'transaction_validation'\n    ];\n    \n    return warningEvents.includes(eventType) ? 'warning' : 'info';\n  };\n\n  const getSeverityColor = (severity: string): string => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-destructive text-destructive-foreground';\n      case 'warning':\n        return 'bg-accent text-accent-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'warning':\n        return <Bell className=\"h-4 w-4\" />;\n      default:\n        return <Shield className=\"h-4 w-4\" />;\n    }\n  };\n\n  const criticalCount = alerts.filter(alert => \n    CRITICAL_EVENTS.includes(alert.event_type)\n  ).length;\n\n  if (loading) {\n    return (\n      <Alert className=\"border-muted\">\n        <Shield className=\"h-4 w-4\" />\n        <AlertTitle>Security Monitor</AlertTitle>\n        <AlertDescription>Loading security events...</AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (isMinimized) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Button\n          onClick={() => setIsMinimized(false)}\n          variant={criticalCount > 0 ? \"destructive\" : \"secondary\"}\n          size=\"sm\"\n          className=\"rounded-full\"\n        >\n          <Shield className=\"h-4 w-4 mr-2\" />\n          Security {criticalCount > 0 && `(${criticalCount})`}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Alert className={criticalCount > 0 ? \"border-destructive\" : \"border-muted\"}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"h-4 w-4\" />\n            <AlertTitle>Security Monitor</AlertTitle>\n            {criticalCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {criticalCount} Critical\n              </Badge>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              onClick={fetchRecentAlerts}\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              Refresh\n            </Button>\n            <Button\n              onClick={() => setIsMinimized(true)}\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <AlertDescription className=\"mt-4\">\n          {alerts.length === 0 ? (\n            <div className=\"text-center py-4 text-muted-foreground\">\n              No recent security events\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {alerts.map((alert) => {\n                const severity = getEventSeverity(alert.event_type);\n                const title = getEventTitle(alert.event_type);\n                \n                return (\n                  <div\n                    key={alert.id}\n                    className=\"flex items-start justify-between p-3 rounded-lg border bg-card\"\n                  >\n                    <div className=\"flex items-start space-x-3 flex-1\">\n                      <div className={`p-1 rounded ${getSeverityColor(severity)}`}>\n                        {getSeverityIcon(severity)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h4 className=\"text-sm font-medium\">{title}</h4>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {severity}\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {new Date(alert.created_at).toLocaleString()}\n                        </p>\n                        {alert.ip_address && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            IP: {String(alert.ip_address)}\n                          </p>\n                        )}\n                        {alert.details && (\n                          <details className=\"mt-2\">\n                            <summary className=\"text-xs text-muted-foreground cursor-pointer hover:text-foreground\">\n                              View Details\n                            </summary>\n                            <pre className=\"text-xs mt-1 p-2 bg-muted rounded overflow-x-auto\">\n                              {JSON.stringify(alert.details, null, 2)}\n                            </pre>\n                          </details>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/SimpleImageUpload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AdminManagementPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadParticipants'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadParticipants]","fix":{"range":[1574,1576],"text":"[loadParticipants]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Users, CheckCircle, XCircle, Clock, Settings, Edit, Trash2 } from 'lucide-react';\n\ninterface Participant {\n  id: string;\n  nome: string;\n  email: string;\n  telefone: string;\n  serviceType: string;\n  status: string;\n  paymentStatus: string;\n  contemplationStatus: string;\n  joinDate: string;\n  contemplationDate?: string | null;\n}\n\nexport function AdminManagementPanel() {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedParticipant, setSelectedParticipant] = useState<Participant | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadParticipants();\n  }, []);\n\n  const loadParticipants = async () => {\n    setLoading(true);\n    try {\n      // Carregar participantes dos planos\n      const { data: participantsData, error } = await supabase\n        .from('group_participants')\n        .select('*')\n        .order('joined_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Carregar dados de usuários separadamente (usando profiles em vez de users)\n      const userIds = participantsData?.map(p => p.user_id) || [];\n      const { data: usersData } = await supabase\n        .from('profiles')\n        .select('user_id, full_name, email, phone')\n        .in('user_id', userIds);\n\n      // Carregar dados de grupos separadamente\n      const groupIds = participantsData?.map(p => p.group_id) || [];\n      const { data: groupsData } = await supabase\n        .from('plan_groups')\n        .select('id')\n        .in('id', groupIds);\n\n      // Transformar dados para o formato esperado\n      const transformedParticipants = (participantsData || []).map(participant => {\n        const user = usersData?.find(u => u.user_id === participant.user_id);\n        const group = groupsData?.find(g => g.id === participant.group_id);\n        \n        return {\n          id: participant.id,\n          nome: user?.full_name || 'N/A',\n          email: user?.email || 'N/A', \n          telefone: user?.phone || 'N/A',\n          serviceType: 'Plano MLM',\n          status: participant.status === 'active' ? 'Ativo' : 'Pendente',\n          paymentStatus: participant.status || 'pending',\n          contemplationStatus: 'aguardando',\n          joinDate: participant.joined_at?.split('T')[0] || new Date().toISOString().split('T')[0],\n          contemplationDate: null\n        };\n      });\n\n      setParticipants(transformedParticipants);\n    } catch (error) {\n      console.error('Erro ao carregar participantes:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar participantes.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateContemplation = async (participantId: string, newStatus: string) => {\n    try {\n      // Atualizar no Supabase\n      const { error } = await supabase\n        .from('group_participants')\n        .update({\n          status: newStatus === 'contemplado' ? 'contemplated' : 'active'\n        })\n        .eq('id', participantId);\n\n      if (error) throw error;\n\n      // Atualizar estado local\n      setParticipants(prev => prev.map(p => \n        p.id === participantId \n          ? { \n              ...p, \n              contemplationStatus: newStatus, \n              contemplationDate: newStatus === 'contemplado' ? new Date().toISOString().split('T')[0] : null \n            }\n          : p\n      ));\n\n      // Se contemplado, criar registro na tabela contemplations\n      if (newStatus === 'contemplado') {\n        const participant = participants.find(p => p.id === participantId);\n        if (participant) {\n          // Log the contemplation (since we don't have a contemplations table)\n          console.log(`Participant ${participant.nome} was contemplated`);\n        }\n      }\n\n      toast({\n        title: \"Sucesso\",\n        description: \"Status de contemplação atualizado com sucesso.\",\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar contemplação:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status de contemplação.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteParticipant = async (participantId: string) => {\n    try {\n      // Remover do Supabase\n      const { error } = await supabase\n        .from('group_participants')\n        .delete()\n        .eq('id', participantId);\n\n      if (error) throw error;\n\n      // Atualizar estado local\n      setParticipants(prev => prev.filter(p => p.id !== participantId));\n\n      toast({\n        title: \"Sucesso\",\n        description: \"Participante removido com sucesso.\",\n      });\n    } catch (error) {\n      console.error('Erro ao remover participante:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao remover participante.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-500\"><CheckCircle className=\"w-3 h-3 mr-1\" />Pago</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\"><Clock className=\"w-3 h-3 mr-1\" />Pendente</Badge>;\n      case 'contemplado':\n        return <Badge className=\"bg-blue-500\"><CheckCircle className=\"w-3 h-3 mr-1\" />Contemplado</Badge>;\n      case 'aguardando':\n        return <Badge variant=\"outline\"><Clock className=\"w-3 h-3 mr-1\" />Aguardando</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Gerenciamento de Participantes</h2>\n        <Button onClick={loadParticipants}>\n          <Settings className=\"mr-2 h-4 w-4\" />\n          Atualizar\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"participants\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"participants\">Participantes</TabsTrigger>\n          <TabsTrigger value=\"contemplation\">Contemplação</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"participants\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"mr-2 h-5 w-5\" />\n                Lista de Participantes\n              </CardTitle>\n              <CardDescription>\n                Gerencie todos os participantes dos planos\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>E-mail</TableHead>\n                    <TableHead>Telefone</TableHead>\n                    <TableHead>Serviço</TableHead>\n                    <TableHead>Pagamento</TableHead>\n                    <TableHead>Contemplação</TableHead>\n                    <TableHead>Data Inscrição</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {participants.map((participant) => (\n                    <TableRow key={participant.id}>\n                      <TableCell className=\"font-medium\">{participant.nome}</TableCell>\n                      <TableCell>{participant.email}</TableCell>\n                      <TableCell>{participant.telefone}</TableCell>\n                      <TableCell>{participant.serviceType}</TableCell>\n                      <TableCell>{getStatusBadge(participant.paymentStatus)}</TableCell>\n                      <TableCell>{getStatusBadge(participant.contemplationStatus)}</TableCell>\n                      <TableCell>{new Date(participant.joinDate).toLocaleDateString('pt-BR')}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedParticipant(participant);\n                              setIsEditDialogOpen(true);\n                            }}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteParticipant(participant.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"contemplation\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Gerenciar Contemplação</CardTitle>\n              <CardDescription>\n                Gerencie o status de contemplação dos participantes\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {participants.filter(p => p.paymentStatus === 'paid').map((participant) => (\n                <div key={participant.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">{participant.nome}</p>\n                    <p className=\"text-sm text-muted-foreground\">{participant.serviceType}</p>\n                    <p className=\"text-sm\">Status: {getStatusBadge(participant.contemplationStatus)}</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleUpdateContemplation(participant.id, 'contemplado')}\n                      disabled={participant.contemplationStatus === 'contemplado'}\n                    >\n                      Contemplar\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleUpdateContemplation(participant.id, 'aguardando')}\n                      disabled={participant.contemplationStatus === 'aguardando'}\n                    >\n                      Reverter\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Dialog de Edição */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Editar Participante</DialogTitle>\n            <DialogDescription>\n              Atualize as informações do participante\n            </DialogDescription>\n          </DialogHeader>\n          {selectedParticipant && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"nome\">Nome</Label>\n                <Input id=\"nome\" defaultValue={selectedParticipant.nome} />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">E-mail</Label>\n                <Input id=\"email\" defaultValue={selectedParticipant.email} />\n              </div>\n              <div>\n                <Label htmlFor=\"telefone\">Telefone</Label>\n                <Input id=\"telefone\" defaultValue={selectedParticipant.telefone} />\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancelar\n            </Button>\n            <Button onClick={() => setIsEditDialogOpen(false)}>\n              Salvar\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AdminMonitoringPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AdminPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AdminProductsManagerSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AsaasIntegrationManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'autoTestTimer' and 'testConnectionSilent'. Either include them or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [autoTestTimer, form.apiKey, form.environment, testConnectionSilent]","fix":{"range":[2317,2348],"text":"[autoTestTimer, form.apiKey, form.environment, testConnectionSilent]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Settings, \n  Check, \n  X, \n  AlertTriangle, \n  RefreshCw, \n  Link,\n  Shield,\n  Database,\n  RefreshCcw,\n  Lock,\n  Eye,\n  EyeOff,\n  Key\n} from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface AsaasIntegration {\n  id: string;\n  environment: string;\n  status: string;\n  connection_status: string;\n  last_sync_at?: string;\n  error_message?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport function AsaasIntegrationManager() {\n  const navigate = useNavigate();\n  const [integration, setIntegration] = useState<AsaasIntegration | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [testing, setTesting] = useState(false);\n  const [syncing, setSyncing] = useState(false);\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [isValidApiKey, setIsValidApiKey] = useState(false);\n  const [autoTestTimer, setAutoTestTimer] = useState<NodeJS.Timeout | null>(null);\n  const [form, setForm] = useState({\n    apiKey: '',\n    environment: 'sandbox' as 'sandbox' | 'production',\n    autoSync: false\n  });\n\n  useEffect(() => {\n    loadIntegration();\n  }, []);\n\n  // Auto-test connection after user stops typing API key\n  useEffect(() => {\n    if (autoTestTimer) {\n      clearTimeout(autoTestTimer);\n    }\n\n    if (form.apiKey.length > 10) { // Basic validation for API key length\n      setAutoTestTimer(setTimeout(() => {\n        testConnectionSilent();\n      }, 2000));\n    } else {\n      setIsValidApiKey(false);\n    }\n\n    return () => {\n      if (autoTestTimer) {\n        clearTimeout(autoTestTimer);\n      }\n    };\n  }, [form.apiKey, form.environment]);\n\n  const loadIntegration = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('asaas_integration')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .maybeSingle();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (data) {\n        setIntegration(data);\n        setForm(prev => ({\n          ...prev,\n          environment: data.environment as 'sandbox' | 'production',\n          autoSync: data.status === 'active'\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading integration:', error);\n      toast.error('Erro ao carregar configuração');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testConnection = async () => {\n    if (!form.apiKey.trim()) {\n      toast.error('Informe a API Key do Asaas');\n      return;\n    }\n\n    setTesting(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'test_connection',\n          api_key: form.apiKey,\n          environment: form.environment\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.success) {\n        toast.success('Conexão testada com sucesso!');\n        return true;\n      } else {\n        toast.error(data.error || 'Falha na conexão');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error testing connection:', error);\n      toast.error('Erro ao testar conexão');\n      return false;\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  // Silent test for auto-validation (no toasts)\n  const testConnectionSilent = async () => {\n    if (!form.apiKey.trim() || form.apiKey.length < 10) {\n      setIsValidApiKey(false);\n      return;\n    }\n\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'test_connection',\n          api_key: form.apiKey,\n          environment: form.environment\n        }\n      });\n\n      if (error) throw error;\n\n      setIsValidApiKey(data.success);\n    } catch (error) {\n      console.error('Silent connection test failed:', error);\n      setIsValidApiKey(false);\n    }\n  };\n\n  const saveConfiguration = async () => {\n    const connectionTest = await testConnection();\n    if (!connectionTest) return;\n\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'save_configuration',\n          api_key: form.apiKey,\n          environment: form.environment,\n          auto_sync: form.autoSync\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.success) {\n        toast.success('Configuração salva com sucesso!');\n        await loadIntegration();\n      } else {\n        toast.error(data.error || 'Erro ao salvar configuração');\n      }\n    } catch (error) {\n      console.error('Error saving configuration:', error);\n      toast.error('Erro ao salvar configuração');\n    }\n  };\n\n  const syncProducts = async () => {\n    setSyncing(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'sync_products'\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.success) {\n        toast.success(`Sincronização concluída: ${data.synced} produtos sincronizados`);\n        await loadIntegration();\n      } else {\n        toast.error(data.error || 'Erro na sincronização');\n      }\n    } catch (error) {\n      console.error('Error syncing products:', error);\n      toast.error('Erro ao sincronizar produtos');\n    } finally {\n      setSyncing(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected':\n      case 'active':\n        return 'bg-success text-success-foreground';\n      case 'disconnected':\n      case 'inactive':\n        return 'bg-muted text-muted-foreground';\n      case 'error':\n        return 'bg-destructive text-destructive-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <RefreshCw className=\"h-6 w-6 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Integração Asaas</h2>\n        <div className=\"flex items-center gap-4\">\n          {integration && (\n            <div className=\"flex items-center gap-2\">\n              <Badge className={getStatusColor(integration.connection_status)}>\n                {integration.connection_status === 'connected' && <Check className=\"h-3 w-3 mr-1\" />}\n                {integration.connection_status === 'disconnected' && <X className=\"h-3 w-3 mr-1\" />}\n                {integration.connection_status === 'error' && <AlertTriangle className=\"h-3 w-3 mr-1\" />}\n                {integration.connection_status === 'connected' ? 'Conectado' : \n                 integration.connection_status === 'disconnected' ? 'Desconectado' : 'Erro'}\n              </Badge>\n              <Badge className={getStatusColor(integration.status)}>\n                {integration.status === 'active' ? 'Ativo' : \n                 integration.status === 'inactive' ? 'Inativo' : 'Erro'}\n              </Badge>\n            </div>\n          )}\n          <Button \n            onClick={() => navigate('/admin/dashboard')}\n            variant=\"outline\"\n            className=\"bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500 rounded-lg\"\n          >\n            Voltar ao Painel\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"configuration\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"configuration\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Configuração\n          </TabsTrigger>\n          <TabsTrigger value=\"sync\" className=\"flex items-center gap-2\">\n            <RefreshCcw className=\"h-4 w-4\" />\n            Sincronização\n          </TabsTrigger>\n          <TabsTrigger value=\"monitoring\" className=\"flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            Monitoramento\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"configuration\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5\" />\n                Configuração da API\n              </CardTitle>\n              <CardDescription>\n                Configure a conexão com a API do Asaas para integração automática\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"apiKey\" className=\"flex items-center gap-2\">\n                    <Lock className=\"h-4 w-4\" />\n                    API Key do Asaas\n                    {isValidApiKey && (\n                      <Check className=\"h-4 w-4 text-success\" />\n                    )}\n                    {form.apiKey && !isValidApiKey && form.apiKey.length > 10 && (\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    )}\n                  </Label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2\">\n                      <Key className=\"h-4 w-4 text-muted-foreground\" />\n                    </div>\n                    <Input\n                      id=\"apiKey\"\n                      type={showApiKey ? \"text\" : \"password\"}\n                      placeholder=\"Insira sua API Key do Asaas\"\n                      value={form.apiKey}\n                      onChange={(e) => setForm(prev => ({ ...prev, apiKey: e.target.value }))}\n                      className={`pl-10 pr-12 ${\n                        isValidApiKey ? 'border-success' : \n                        form.apiKey && !isValidApiKey && form.apiKey.length > 10 ? 'border-destructive' : ''\n                      }`}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowApiKey(!showApiKey)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                    >\n                      {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                  {isValidApiKey && (\n                    <p className=\"text-sm text-success flex items-center gap-1\">\n                      <Check className=\"h-3 w-3\" />\n                      API Key válida e conectada\n                    </p>\n                  )}\n                  {form.apiKey && !isValidApiKey && form.apiKey.length > 10 && (\n                    <p className=\"text-sm text-destructive flex items-center gap-1\">\n                      <X className=\"h-3 w-3\" />\n                      API Key inválida ou erro de conexão\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"environment\">Ambiente</Label>\n                  <Select \n                    value={form.environment}\n                    onValueChange={(value: 'sandbox' | 'production') => \n                      setForm(prev => ({ ...prev, environment: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sandbox\">Sandbox (Testes)</SelectItem>\n                      <SelectItem value=\"production\">Produção</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"autoSync\"\n                  checked={form.autoSync}\n                  onCheckedChange={(checked) => setForm(prev => ({ ...prev, autoSync: checked }))}\n                />\n                <Label htmlFor=\"autoSync\">Sincronização automática ativa</Label>\n              </div>\n\n              <Alert>\n                <Link className=\"h-4 w-4\" />\n                <AlertDescription>\n                  A API Key será criptografada antes de ser armazenada no banco de dados.\n                  Para ambiente de produção, certifique-se de usar a API Key de produção do Asaas.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"flex gap-3\">\n                <Button \n                  onClick={testConnection} \n                  disabled={testing || !form.apiKey.trim()}\n                  variant=\"outline\"\n                >\n                  {testing ? (\n                    <>\n                      <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Testando...\n                    </>\n                  ) : (\n                    <>\n                      <Check className=\"h-4 w-4 mr-2\" />\n                      Testar Conexão\n                    </>\n                  )}\n                </Button>\n\n                <Button \n                  onClick={saveConfiguration}\n                  disabled={!isValidApiKey}\n                  className={isValidApiKey ? 'bg-success hover:bg-success/90' : ''}\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  {isValidApiKey ? 'Salvar & Ativar' : 'Salvar Configuração'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sync\">\n          <Card>\n            <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <RefreshCcw className=\"h-5 w-5\" />\n              Sincronização de Produtos\n            </CardTitle>\n              <CardDescription>\n                Sincronize produtos e planos automaticamente com o Asaas\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {integration && integration.connection_status === 'connected' ? (\n                <>\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Sincronização Manual</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Sincroniza todos os produtos e planos com o Asaas\n                      </p>\n                    </div>\n                    <Button \n                      onClick={syncProducts} \n                      disabled={syncing}\n                    >\n                      {syncing ? (\n                        <>\n                          <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Sincronizando...\n                        </>\n                      ) : (\n                        <>\n                          <RefreshCcw className=\"h-4 w-4 mr-2\" />\n                          Sincronizar Agora\n                        </>\n                      )}\n                    </Button>\n                  </div>\n\n                  {integration.last_sync_at && (\n                    <Alert>\n                      <Database className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Última sincronização: {new Date(integration.last_sync_at).toLocaleString('pt-BR')}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </>\n              ) : (\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Configure e teste a conexão primeiro para habilitar a sincronização.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"monitoring\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Status da Integração\n              </CardTitle>\n              <CardDescription>\n                Monitore o status e histórico da integração\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {integration ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label>Status da Conexão</Label>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge className={getStatusColor(integration.connection_status)}>\n                          {integration.connection_status === 'connected' ? 'Conectado' : \n                           integration.connection_status === 'disconnected' ? 'Desconectado' : 'Erro'}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label>Ambiente</Label>\n                      <p className=\"text-sm mt-1 capitalize\">{integration.environment}</p>\n                    </div>\n\n                    <div>\n                      <Label>Criado em</Label>\n                      <p className=\"text-sm mt-1\">\n                        {new Date(integration.created_at).toLocaleString('pt-BR')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label>Status do Sistema</Label>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <Badge className={getStatusColor(integration.status)}>\n                          {integration.status === 'active' ? 'Ativo' : \n                           integration.status === 'inactive' ? 'Inativo' : 'Erro'}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    {integration.last_sync_at && (\n                      <div>\n                        <Label>Última Sincronização</Label>\n                        <p className=\"text-sm mt-1\">\n                          {new Date(integration.last_sync_at).toLocaleString('pt-BR')}\n                        </p>\n                      </div>\n                    )}\n\n                    <div>\n                      <Label>Atualizado em</Label>\n                      <p className=\"text-sm mt-1\">\n                        {new Date(integration.updated_at).toLocaleString('pt-BR')}\n                      </p>\n                    </div>\n                  </div>\n\n                  {integration.error_message && (\n                    <div className=\"md:col-span-2\">\n                      <Alert>\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          <strong>Último Erro:</strong> {integration.error_message}\n                        </AlertDescription>\n                      </Alert>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Nenhuma configuração encontrada. Configure a integração primeiro.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AsaasPaymentConfig.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1056,1059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1056,1059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Loader2, Key, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\n\nexport function AsaasPaymentConfig() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [environment, setEnvironment] = useState<\"sandbox\" | \"production\">(\"sandbox\");\n  const [loading, setLoading] = useState(false);\n  const [testingConnection, setTestingConnection] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<\"disconnected\" | \"connected\" | \"error\">(\"disconnected\");\n  const [config, setConfig] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadConfiguration();\n  }, []);\n\n  const loadConfiguration = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('asaas_integration')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single();\n\n      if (data && !error) {\n        setConfig(data);\n        setEnvironment(data.environment as \"sandbox\" | \"production\");\n        setConnectionStatus(data.connection_status as \"disconnected\" | \"connected\" | \"error\" || \"disconnected\");\n      }\n    } catch (error) {\n      console.log(\"Nenhuma configuração encontrada\");\n    }\n  };\n\n  const testConnection = async () => {\n    if (!apiKey.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, insira a API key.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setTestingConnection(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'test_connection',\n          api_key: apiKey,\n          environment: environment\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.success) {\n        setConnectionStatus(\"connected\");\n        toast({\n          title: \"Conexão bem-sucedida!\",\n          description: `Conectado à conta: ${data.account?.name || 'Asaas'}`,\n        });\n      } else {\n        setConnectionStatus(\"error\");\n        toast({\n          title: \"Erro na conexão\",\n          description: data.error || \"Não foi possível conectar com a API.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Erro ao testar conexão:\", error);\n      setConnectionStatus(\"error\");\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao testar a conexão com a API.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setTestingConnection(false);\n    }\n  };\n\n  const saveConfiguration = async () => {\n    if (!apiKey.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, insira a API key.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (connectionStatus !== \"connected\") {\n      toast({\n        title: \"Erro\",\n        description: \"Por favor, teste a conexão antes de salvar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('asaas-integration-manager', {\n        body: {\n          action: 'save_configuration',\n          api_key: apiKey,\n          environment: environment\n        }\n      });\n\n      if (error) throw error;\n\n      if (data.success) {\n        setConfig(data.config);\n        toast({\n          title: \"Configuração salva!\",\n          description: \"API key configurada com sucesso.\",\n        });\n        setApiKey(\"\"); // Limpar o campo por segurança\n        loadConfiguration(); // Recarregar configurações\n      } else {\n        throw new Error(data.error || \"Erro ao salvar configuração\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao salvar configuração:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao salvar a configuração.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (connectionStatus) {\n      case \"connected\": return \"text-green-600\";\n      case \"error\": return \"text-red-600\";\n      default: return \"text-gray-500\";\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (connectionStatus) {\n      case \"connected\": return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case \"error\": return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      default: return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Key className=\"h-5 w-5\" />\n          Configuração API Asaas\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Status atual */}\n        {config && (\n          <div className=\"p-4 border rounded-lg bg-gray-50\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-medium\">Status da integração:</span>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon()}\n                <span className={`capitalize ${getStatusColor()}`}>\n                  {config.connection_status === \"connected\" ? \"Conectado\" : \"Desconectado\"}\n                </span>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">Ambiente:</span>\n                <Badge variant={config.environment === \"production\" ? \"default\" : \"secondary\"} className=\"ml-2\">\n                  {config.environment === \"production\" ? \"Produção\" : \"Sandbox\"}\n                </Badge>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Última sincronização:</span>\n                <span className=\"ml-2\">\n                  {config.last_sync_at ? new Date(config.last_sync_at).toLocaleString() : \"Nunca\"}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Formulário de configuração */}\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"environment\">Ambiente</Label>\n            <Select value={environment} onValueChange={(value: \"sandbox\" | \"production\") => setEnvironment(value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione o ambiente\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"sandbox\">Sandbox (Teste)</SelectItem>\n                <SelectItem value=\"production\">Produção</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"apiKey\">API Key Asaas</Label>\n            <Input\n              id=\"apiKey\"\n              type=\"password\"\n              placeholder=\"Insira sua API key do Asaas\"\n              value={apiKey}\n              onChange={(e) => setApiKey(e.target.value)}\n            />\n            <p className=\"text-xs text-gray-500\">\n              Sua API key será armazenada de forma segura e criptografada.\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={testConnection}\n              disabled={testingConnection || !apiKey.trim()}\n              variant=\"outline\"\n              className=\"flex-1\"\n            >\n              {testingConnection ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Testando...\n                </>\n              ) : (\n                \"Testar Conexão\"\n              )}\n            </Button>\n\n            <Button\n              onClick={saveConfiguration}\n              disabled={loading || connectionStatus !== \"connected\"}\n              className=\"flex-1\"\n            >\n              {loading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Salvando...\n                </>\n              ) : (\n                \"Salvar Configuração\"\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Informações adicionais */}\n        <div className=\"p-4 bg-blue-50 rounded-lg\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">Como obter sua API Key:</h4>\n          <ol className=\"text-sm text-blue-800 space-y-1\">\n            <li>1. Acesse sua conta no Asaas</li>\n            <li>2. Vá em Configurações → Integrações → API</li>\n            <li>3. Copie sua API Key {environment === \"sandbox\" ? \"(Sandbox)\" : \"(Produção)\"}</li>\n            <li>4. Cole aqui e teste a conexão</li>\n          </ol>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/AsaasSplitDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ContemplationSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ContemplationValidation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ContemplationValidationSimple.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadParticipants'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadParticipants]","fix":{"range":[968,970],"text":"[loadParticipants]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Award, CheckCircle, Clock, Users } from 'lucide-react';\n\ninterface GroupParticipant {\n  id: string;\n  user_id: string;\n  group_id: string;\n  amount_paid: number;\n  status: string;\n  joined_at: string;\n  user_name?: string;\n  user_email?: string;\n}\n\nexport function ContemplationValidationSimple() {\n  const [participants, setParticipants] = useState<GroupParticipant[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadParticipants();\n  }, []);\n\n  const loadParticipants = async () => {\n    setLoading(true);\n    try {\n      // Load group participants\n      const { data: participantsData, error } = await supabase\n        .from('group_participants')\n        .select('*')\n        .order('joined_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Load user details for each participant\n      const userIds = participantsData?.map(p => p.user_id) || [];\n      const { data: usersData } = await supabase\n        .from('profiles')\n        .select('user_id, full_name, email')\n        .in('user_id', userIds);\n\n      // Combine the data\n      const enrichedParticipants = (participantsData || []).map(participant => ({\n        ...participant,\n        user_name: usersData?.find(u => u.user_id === participant.user_id)?.full_name || 'N/A',\n        user_email: usersData?.find(u => u.user_id === participant.user_id)?.email || 'N/A'\n      }));\n\n      setParticipants(enrichedParticipants);\n    } catch (error) {\n      console.error('Erro ao carregar participantes:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar participantes para contemplação.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleContemplation = async (participantId: string, action: 'contemplate' | 'remove') => {\n    try {\n      const newStatus = action === 'contemplate' ? 'contemplated' : 'active';\n      \n      const { error } = await supabase\n        .from('group_participants')\n        .update({ status: newStatus })\n        .eq('id', participantId);\n\n      if (error) throw error;\n\n      setParticipants(prev => \n        prev.map(p => \n          p.id === participantId ? { ...p, status: newStatus } : p\n        )\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: `Participante ${action === 'contemplate' ? 'contemplado' : 'reativado'} com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar contemplação:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status de contemplação.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'contemplated':\n        return <Badge className=\"bg-blue-500\"><Award className=\"w-3 h-3 mr-1\" />Contemplado</Badge>;\n      case 'active':\n        return <Badge className=\"bg-green-500\"><CheckCircle className=\"w-3 h-3 mr-1\" />Ativo</Badge>;\n      default:\n        return <Badge variant=\"outline\"><Clock className=\"w-3 h-3 mr-1\" />Pendente</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Validação de Contemplação</h2>\n        <Button onClick={loadParticipants}>\n          <Users className=\"mr-2 h-4 w-4\" />\n          Atualizar\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Award className=\"mr-2 h-5 w-5\" />\n            Participantes Elegíveis\n          </CardTitle>\n          <CardDescription>\n            Gerencie as contemplações dos participantes dos grupos\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Nome</TableHead>\n                <TableHead>E-mail</TableHead>\n                <TableHead>Valor Pago</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Data Ingresso</TableHead>\n                <TableHead>Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {participants.map((participant) => (\n                <TableRow key={participant.id}>\n                  <TableCell className=\"font-medium\">{participant.user_name}</TableCell>\n                  <TableCell>{participant.user_email}</TableCell>\n                  <TableCell>R$ {participant.amount_paid.toFixed(2)}</TableCell>\n                  <TableCell>{getStatusBadge(participant.status)}</TableCell>\n                  <TableCell>{new Date(participant.joined_at).toLocaleDateString('pt-BR')}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      {participant.status !== 'contemplated' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleContemplation(participant.id, 'contemplate')}\n                        >\n                          <Award className=\"h-4 w-4 mr-1\" />\n                          Contemplar\n                        </Button>\n                      )}\n                      {participant.status === 'contemplated' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleContemplation(participant.id, 'remove')}\n                        >\n                          Reverter\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ContratacaoMonitor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadData]","fix":{"range":[3244,3246],"text":"[loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertCircle, CheckCircle, Clock, XCircle, RefreshCw, DollarSign, Calculator, Download, Settings, AlertTriangle } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ContratacaoStats {\n  total_tentativas: number;\n  sucesso: number;\n  falhas: number;\n  pendentes: number;\n  taxa_sucesso: number;\n  valor_total_processado: number;\n  impostos_arrecadados: number;\n}\n\ninterface ErrorLog {\n  id: string;\n  created_at: string;\n  error_message: string;\n  user_id: string;\n  plan_id: string;\n  valor: number;\n  status: string;\n}\n\nexport const ContratacaoMonitor = () => {\n  const [stats, setStats] = useState<ContratacaoStats | null>(null);\n  const [errorLogs, setErrorLogs] = useState<ErrorLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n\n      // Buscar estatísticas de transações\n      const { data: transacoes, error: transacoesError } = await supabase\n        .from('transacoes')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (transacoesError) {\n        throw transacoesError;\n      }\n\n      // Calcular estatísticas\n      const total = transacoes?.length || 0;\n      const sucesso = transacoes?.filter(t => t.status === 'pago').length || 0;\n      const falhas = transacoes?.filter(t => t.status === 'falha').length || 0;\n      const pendentes = transacoes?.filter(t => t.status === 'pendente').length || 0;\n      \n      const taxaSucesso = total > 0 ? (sucesso / total) * 100 : 0;\n      const valorTotal = transacoes?.reduce((acc, t) => acc + (t.valor || 0), 0) || 0;\n      const impostosTotal = transacoes?.reduce((acc, t) => acc + (t.valor_impostos || 0), 0) || 0;\n\n      setStats({\n        total_tentativas: total,\n        sucesso,\n        falhas,\n        pendentes,\n        taxa_sucesso: taxaSucesso,\n        valor_total_processado: valorTotal,\n        impostos_arrecadados: impostosTotal\n      });\n\n      // Buscar logs de erro recentes\n      const { data: payments, error: paymentsError } = await supabase\n        .from('payments')\n        .select('*')\n        .eq('status', 'failed')\n        .order('created_at', { ascending: false })\n        .limit(10);\n\n      if (!paymentsError && payments) {\n        const formattedErrors: ErrorLog[] = payments.map(p => ({\n          id: p.id,\n          created_at: p.created_at,\n          error_message: 'Falha no pagamento',\n          user_id: p.user_id,\n          plan_id: p.plan_id || '',\n          valor: p.amount || 0,\n          status: p.status\n        }));\n        setErrorLogs(formattedErrors);\n      }\n\n    } catch (error) {\n      console.error('Erro ao carregar dados do monitor:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados de monitoramento\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pago':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'pendente':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'falha':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pago':\n        return 'bg-green-100 text-green-800';\n      case 'pendente':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'falha':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Monitor de Contratações</h2>\n        <Button onClick={loadData} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Atualizar\n        </Button>\n      </div>\n\n      {/* Estatísticas Principais */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Tentativas</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.total_tentativas || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Todas as tentativas de contratação\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Taxa de Sucesso</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              {stats?.taxa_sucesso.toFixed(1) || 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats?.sucesso || 0} de {stats?.total_tentativas || 0} sucessos\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Valor Processado</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {formatCurrency(stats?.valor_total_processado || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total em transações\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Impostos Calculados</CardTitle>\n            <Calculator className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {formatCurrency(stats?.impostos_arrecadados || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total de impostos calculados\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Status Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Breakdown por Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n              <div className=\"text-2xl font-bold text-green-600\">{stats?.sucesso || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">Pagos</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Clock className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n              <div className=\"text-2xl font-bold text-yellow-600\">{stats?.pendentes || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">Pendentes</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <XCircle className=\"h-8 w-8 text-red-500\" />\n              </div>\n              <div className=\"text-2xl font-bold text-red-600\">{stats?.falhas || 0}</div>\n              <div className=\"text-sm text-muted-foreground\">Falhas</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Logs de Erro Recentes */}\n      {errorLogs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Falhas Recentes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {errorLogs.map((error) => (\n                <div key={error.id} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusIcon(error.status)}\n                    <div>\n                      <div className=\"font-medium text-sm\">{error.error_message}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(error.created_at).toLocaleString('pt-BR')}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">{formatCurrency(error.valor)}</div>\n                    <Badge variant=\"outline\" className={getStatusColor(error.status)}>\n                      {error.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Ações Rápidas */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ações Rápidas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            <Button variant=\"outline\" size=\"sm\" onClick={loadData}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Atualizar Dados\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar Relatório\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Configurações\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\">\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              Logs Detalhados\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/CreateAdminUser.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Shield, CheckCircle } from \"lucide-react\";\n\nexport function CreateAdminUser() {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<any>(null);\n  const { toast } = useToast();\n\n  const createAdmin = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.functions.invoke(\"create-admin-user\", {\n        body: {\n          email: \"Juninhoatitude@hotmail.com\",\n          password: \"Atitude2025@\",\n          full_name: \"Renaldo Administrador\",\n          phone: null\n        }\n      });\n\n      if (error) throw error;\n\n      setResult(data);\n      \n      if (data.success) {\n        toast({\n          title: \"✅ Sucesso!\",\n          description: \"Administrador cadastrado com sucesso\",\n        });\n      } else {\n        toast({\n          title: \"❌ Erro\",\n          description: data.error || \"Erro ao cadastrar administrador\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Erro:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao comunicar com o servidor\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 p-3 bg-blue-100 rounded-full w-fit\">\n            <Shield className=\"h-8 w-8 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Criar Administrador</CardTitle>\n          <CardDescription>\n            Cadastro de novo usuário administrativo do sistema\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input \n                  id=\"email\"\n                  value=\"Juninhoatitude@hotmail.com\"\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Senha</Label>\n                <Input \n                  id=\"password\"\n                  type=\"password\"\n                  value=\"Atitude2025@\"\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Nome Completo</Label>\n              <Input \n                id=\"name\"\n                value=\"Renaldo Administrador\"\n                disabled\n                className=\"bg-gray-50\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Papel</Label>\n              <Input \n                id=\"role\"\n                value=\"admin\"\n                disabled\n                className=\"bg-gray-50\"\n              />\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-900 mb-2\">Permissões Administrativas</h4>\n            <ul className=\"text-sm text-blue-800 space-y-1\">\n              <li>• Gerenciamento de usuários e profissionais</li>\n              <li>• Produtos e marketplace</li>\n              <li>• Pagamentos e configurações de split</li>\n              <li>• Relatórios e auditoria do sistema</li>\n            </ul>\n          </div>\n\n          <Button \n            onClick={createAdmin} \n            disabled={loading}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Criando Administrador...\n              </>\n            ) : (\n              <>\n                <Shield className=\"mr-2 h-4 w-4\" />\n                Criar Administrador\n              </>\n            )}\n          </Button>\n\n          {result && (\n            <div className={`p-4 rounded-lg ${result.success ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>\n              {result.success ? (\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-green-800\">\n                    <CheckCircle className=\"h-5 w-5 mr-2\" />\n                    <span className=\"font-semibold\">Administrador Criado com Sucesso!</span>\n                  </div>\n                  <div className=\"text-sm text-green-700 space-y-1\">\n                    <p><strong>ID:</strong> {result.user_id}</p>\n                    <p><strong>Email:</strong> {result.email}</p>\n                    <p><strong>Role:</strong> {result.role}</p>\n                    <p><strong>Status:</strong> {result.status}</p>\n                    <p><strong>Nível de Acesso:</strong> {result.access_level}</p>\n                    <p><strong>Criado em:</strong> {new Date(result.created_at).toLocaleString('pt-BR')}</p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-red-800\">\n                  <p className=\"font-semibold\">Erro ao criar administrador:</p>\n                  <p className=\"text-sm mt-1\">{result.error}</p>\n                  {result.details && (\n                    <p className=\"text-sm mt-1 text-red-600\">{result.details}</p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/CreateMultipleAdmins.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[470,473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[470,473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[856,859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[856,859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, UserPlus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst CreateMultipleAdmins = () => {\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  const admins = [\n    {\n      email: 'Juninhoatitude@hotmail.com',\n      password: 'Atitude2025@',\n      full_name: 'Junior Admin',\n      phone: null\n    },\n    {\n      email: 'charlesink1996@gmail.com', \n      password: 'Arthur1234!',\n      full_name: 'Charles Admin',\n      phone: null\n    }\n  ];\n\n  const createAdmin = async (adminData: any) => {\n    const response = await fetch(`https://jiqgwevetdkvcqelniaw.supabase.co/functions/v1/create-admin-user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(adminData)\n    });\n\n    return await response.json();\n  };\n\n  const handleCreateAdmins = async () => {\n    setLoading(true);\n    setResults([]);\n\n    try {\n      const promises = admins.map(admin => createAdmin(admin));\n      const results = await Promise.all(promises);\n      \n      setResults(results);\n\n      const successCount = results.filter(r => r.success).length;\n      const failCount = results.filter(r => !r.success).length;\n\n      if (successCount > 0) {\n        toast({\n          title: \"Administradores criados!\",\n          description: `${successCount} admin(s) criado(s) com sucesso. ${failCount > 0 ? `${failCount} falharam.` : ''}`,\n        });\n      } else {\n        toast({\n          title: \"Erro ao criar administradores\",\n          description: \"Nenhum administrador foi criado.\",\n          variant: \"destructive\"\n        });\n      }\n\n    } catch (error) {\n      console.error(\"Erro:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao processar requisição.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserPlus className=\"h-6 w-6\" />\n            Cadastrar Administradores\n          </CardTitle>\n          <CardDescription>\n            Criar contas de administrador para os usuários especificados\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          \n          {/* Lista de admins a serem criados */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Administradores a criar:</h3>\n            {admins.map((admin, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div>\n                  <p className=\"font-medium\">{admin.full_name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{admin.email}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Botão para criar */}\n          <Button \n            onClick={handleCreateAdmins} \n            disabled={loading}\n            className=\"w-full\"\n            size=\"lg\"\n          >\n            {loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Criando administradores...\n              </>\n            ) : (\n              <>\n                <UserPlus className=\"mr-2 h-4 w-4\" />\n                Criar {admins.length} Administradores\n              </>\n            )}\n          </Button>\n\n          {/* Resultados */}\n          {results.length > 0 && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Resultados:</h3>\n              {results.map((result, index) => (\n                <Alert key={index} variant={result.success ? \"default\" : \"destructive\"}>\n                  <AlertDescription>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium\">\n                        {admins[index].email} - {result.success ? \"✅ Sucesso\" : \"❌ Falhou\"}\n                      </p>\n                      {result.success ? (\n                        <div className=\"text-sm\">\n                          <p>ID: {result.user_id}</p>\n                          <p>Criado em: {new Date(result.created_at).toLocaleString()}</p>\n                        </div>\n                      ) : (\n                        <p className=\"text-sm text-red-600\">{result.error}</p>\n                      )}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              ))}\n            </div>\n          )}\n\n          {/* Instruções de acesso */}\n          {results.some(r => r.success) && (\n            <Alert>\n              <AlertDescription>\n                <p className=\"font-medium mb-2\">Como acessar:</p>\n                <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                  <li>Acesse <code>/admin-login</code></li>\n                  <li>Use as credenciais fornecidas</li>\n                  <li>Será redirecionado para <code>/admin</code></li>\n                </ol>\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CreateMultipleAdmins;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/CustomPlansManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlans'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlans]","fix":{"range":[2397,2399],"text":"[loadPlans]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5947,5950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5947,5950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8161,8164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8161,8164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":522,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18155,18158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18155,18158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MobileButton } from \"@/components/ui/mobile-button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { ImageUpload } from \"@/components/ui/image-upload\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useResponsiveDesign } from \"@/hooks/useResponsiveDesign\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Plus, Edit, Trash2, Package, Users, DollarSign } from 'lucide-react';\n\ninterface CustomPlan {\n  id: string;\n  name: string;\n  description: string | null;\n  price: number;\n  duration_months: number;\n  features: string[];\n  category: string;\n  active: boolean;\n  max_participants: number;\n  professional_id: string | null;\n  image_url: string | null;\n  created_at: string;\n}\n\nexport function CustomPlansManager() {\n  const [plans, setPlans] = useState<CustomPlan[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<CustomPlan | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [deleting, setDeleting] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    price: '',\n    duration_months: '1',\n    features: '',\n    category: 'service',\n    max_participants: '10',\n    active: true,\n    image_url: null as string | null\n  });\n  const { toast } = useToast();\n  const { isMobile } = useResponsiveDesign();\n\n  useEffect(() => {\n    loadPlans();\n  }, []);\n\n  const loadPlans = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('custom_plans')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      const formattedPlans = (data || []).map(plan => ({\n        ...plan,\n        features: Array.isArray(plan.features) \n          ? plan.features.map(f => String(f)) \n          : []\n      }));\n      \n      setPlans(formattedPlans);\n    } catch (error) {\n      console.error('Erro ao carregar planos:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar planos customizados.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (submitting) return;\n\n    // Validação de campos\n    if (!formData.name.trim()) {\n      toast({\n        title: \"❌ Erro de Validação\",\n        description: \"Nome do plano é obrigatório.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.price || parseFloat(formData.price) <= 0) {\n      toast({\n        title: \"❌ Erro de Validação\", \n        description: \"Preço deve ser maior que zero.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.duration_months || parseInt(formData.duration_months) <= 0) {\n      toast({\n        title: \"❌ Erro de Validação\",\n        description: \"Duração deve ser maior que zero.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.max_participants || parseInt(formData.max_participants) <= 0) {\n      toast({\n        title: \"❌ Erro de Validação\",\n        description: \"Máximo de participantes deve ser maior que zero.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSubmitting(true);\n    try {\n      const featuresArray = formData.features.split('\\n').filter(f => f.trim());\n      \n      const planData = {\n        name: formData.name.trim(),\n        description: formData.description?.trim() || null,\n        price: parseFloat(formData.price),\n        duration_months: parseInt(formData.duration_months),\n        features: featuresArray,\n        category: formData.category,\n        max_participants: parseInt(formData.max_participants),\n        active: formData.active,\n        image_url: formData.image_url\n      };\n\n      console.log('Enviando dados do plano:', planData);\n\n      if (editingPlan) {\n        const { data, error } = await supabase\n          .from('custom_plans')\n          .update(planData)\n          .eq('id', editingPlan.id)\n          .select();\n        \n        if (error) {\n          console.error('Erro detalhado ao atualizar:', error);\n          throw error;\n        }\n        \n        console.log('Plano atualizado:', data);\n        \n        toast({\n          title: \"✅ Sucesso\",\n          description: \"Plano atualizado com sucesso!\",\n        });\n      } else {\n        const { data, error } = await supabase\n          .from('custom_plans')\n          .insert([planData])\n          .select();\n        \n        if (error) {\n          console.error('Erro detalhado ao criar:', error);\n          throw error;\n        }\n        \n        console.log('Plano criado:', data);\n        \n        toast({\n          title: \"✅ Sucesso\",\n          description: \"Plano criado com sucesso!\",\n        });\n      }\n\n      setIsDialogOpen(false);\n      setEditingPlan(null);\n      resetForm();\n      await loadPlans();\n    } catch (error: any) {\n      console.error('Erro ao salvar plano:', error);\n      toast({\n        title: \"❌ Erro\",\n        description: error.message || \"Erro ao salvar plano. Verifique os dados e tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleEdit = (plan: CustomPlan) => {\n    setEditingPlan(plan);\n    setFormData({\n      name: plan.name,\n      description: plan.description || '',\n      price: plan.price.toString(),\n      duration_months: plan.duration_months.toString(),\n      features: plan.features.join('\\n'),\n      category: plan.category,\n      max_participants: plan.max_participants.toString(),\n      active: plan.active,\n      image_url: plan.image_url\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = async (planId: string) => {\n    if (deleting) return; // Evitar múltiplas exclusões simultâneas\n    \n    setDeleting(planId);\n    try {\n      console.log('Tentando excluir plano:', planId);\n      \n      // Primeiro verificar se o plano existe\n      const { data: existingPlan, error: fetchError } = await supabase\n        .from('custom_plans')\n        .select('id, name')\n        .eq('id', planId)\n        .single();\n\n      if (fetchError) {\n        console.error('Erro ao buscar plano:', fetchError);\n        throw new Error('Plano não encontrado.');\n      }\n\n      console.log('Plano encontrado:', existingPlan);\n      \n      // Tentar excluir o plano\n      const { data, error } = await supabase\n        .from('custom_plans')\n        .delete()\n        .eq('id', planId)\n        .select();\n\n      if (error) {\n        console.error('Erro detalhado ao excluir:', error);\n        throw new Error(`Erro ao excluir: ${error.message}`);\n      }\n\n      console.log('Plano excluído com sucesso:', data);\n\n      // Atualizar estado local imediatamente\n      setPlans(prev => prev.filter(plan => plan.id !== planId));\n\n      toast({\n        title: \"✅ Sucesso\",\n        description: `Plano \"${existingPlan.name}\" excluído com sucesso!`,\n      });\n      \n      // Forçar reload da lista após um pequeno delay para garantir consistência\n      setTimeout(() => {\n        loadPlans();\n      }, 500);\n      \n    } catch (error: any) {\n      console.error('Erro ao excluir plano:', error);\n      toast({\n        title: \"❌ Erro de Exclusão\",\n        description: error.message || \"Não foi possível excluir o plano. Verifique se não há dependências.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDeleting(null);\n    }\n  };\n\n  const togglePlanStatus = async (planId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('custom_plans')\n        .update({ active: !currentStatus })\n        .eq('id', planId);\n\n      if (error) throw error;\n\n      setPlans(prev => \n        prev.map(plan => \n          plan.id === planId \n            ? { ...plan, active: !currentStatus }\n            : plan\n        )\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: `Plano ${!currentStatus ? 'ativado' : 'desativado'} com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar plano:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status do plano.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      price: '',\n      duration_months: '1',\n      features: '',\n      category: 'service',\n      max_participants: '10',\n      active: true,\n      image_url: null\n    });\n  };\n\n  const handleNewPlan = () => {\n    setEditingPlan(null);\n    resetForm();\n    setIsDialogOpen(true);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4 md:space-y-6 p-2 md:p-4 lg:p-6 min-h-screen\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-xl md:text-2xl lg:text-3xl font-bold tracking-tight\">\n            {isMobile ? 'Planos' : 'Gerenciar Planos Customizados'}\n          </h2>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {isMobile ? 'Gerencie seus planos' : 'Crie, edite e gerencie todos os planos disponíveis'}\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <MobileButton \n              onClick={handleNewPlan} \n              className=\"w-full sm:w-auto\"\n              size={isMobile ? \"default\" : \"default\"}\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              {isMobile ? 'Novo' : 'Novo Plano'}\n            </MobileButton>\n          </DialogTrigger>\n          <DialogContent className=\"w-[95vw] max-w-2xl h-[85vh] flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle>\n                {editingPlan ? 'Editar Plano' : 'Criar Novo Plano'}\n              </DialogTitle>\n              <DialogDescription>\n                {editingPlan ? 'Modifique as informações do plano.' : 'Preencha os dados para criar um novo plano.'}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex-1 overflow-y-auto pr-2\">\n              <form \n                onSubmit={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  handleSubmit(e);\n                }} \n                className=\"space-y-4 pb-4\"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Nome do Plano</label>\n                    <Input\n                      value={formData.name}\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      placeholder=\"Ex: Plano Premium\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Categoria *</label>\n                    <Select \n                      value={formData.category} \n                      onValueChange={(value) => {\n                        console.log('Categoria selecionada:', value);\n                        setFormData(prev => ({...prev, category: value}));\n                      }}\n                    >\n                      <SelectTrigger \n                        className=\"bg-background border focus:ring-2 focus:ring-primary/20\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <SelectValue placeholder=\"Selecione uma categoria\" />\n                      </SelectTrigger>\n                      <SelectContent \n                        className=\"bg-background border shadow-lg z-[9999] max-h-60\" \n                        align=\"start\"\n                      >\n                        <SelectItem value=\"service\" className=\"hover:bg-muted focus:bg-muted cursor-pointer\">\n                          🔧 Serviço\n                        </SelectItem>\n                        <SelectItem value=\"tattoo\" className=\"hover:bg-muted focus:bg-muted cursor-pointer\">\n                          🎨 Tatuagem\n                        </SelectItem>\n                        <SelectItem value=\"dental\" className=\"hover:bg-muted focus:bg-muted cursor-pointer\">\n                          🦷 Dental\n                        </SelectItem>\n                        <SelectItem value=\"course\" className=\"hover:bg-muted focus:bg-muted cursor-pointer\">\n                          📚 Curso\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <ImageUpload\n                  currentImageUrl={formData.image_url}\n                  onImageChange={(imageUrl) => setFormData({...formData, image_url: imageUrl})}\n                  bucketName=\"plan-images\"\n                  path=\"plans\"\n                  maxSizeMB={5}\n                />\n\n                <div>\n                  <label className=\"text-sm font-medium\">Descrição</label>\n                  <Textarea\n                    value={formData.description}\n                    onChange={(e) => setFormData({...formData, description: e.target.value})}\n                    placeholder=\"Descreva o plano...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Preço (R$) *</label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0.01\"\n                      value={formData.price}\n                      onChange={(e) => setFormData({...formData, price: e.target.value})}\n                      placeholder=\"99.99\"\n                      className=\"bg-background\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Duração (meses) *</label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={formData.duration_months}\n                      onChange={(e) => setFormData({...formData, duration_months: e.target.value})}\n                      className=\"bg-background\"\n                      placeholder=\"1\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Máx. Participantes *</label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"100\"\n                      value={formData.max_participants}\n                      onChange={(e) => setFormData({...formData, max_participants: e.target.value})}\n                      className=\"bg-background\"\n                      placeholder=\"10\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Recursos (um por linha)</label>\n                  <Textarea\n                    value={formData.features}\n                    onChange={(e) => setFormData({...formData, features: e.target.value})}\n                    placeholder=\"Acesso à plataforma&#10;Suporte prioritário&#10;Materiais exclusivos\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"active\"\n                    checked={formData.active}\n                    onCheckedChange={(checked) => setFormData({...formData, active: Boolean(checked)})}\n                  />\n                  <label htmlFor=\"active\" className=\"text-sm font-medium\">Plano ativo</label>\n                </div>\n\n                <div className=\"flex flex-col-reverse sm:flex-row justify-end gap-2 pt-4 border-t\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={(e) => {\n                      e.preventDefault();\n                      setIsDialogOpen(false);\n                    }}\n                    className=\"w-full sm:w-auto\"\n                    disabled={submitting}\n                  >\n                    Cancelar\n                  </Button>\n                  <MobileButton \n                    type=\"submit\" \n                    className=\"w-full sm:w-auto\"\n                    disabled={submitting || !formData.name.trim() || !formData.price || parseFloat(formData.price) <= 0}\n                    onClick={(e) => {\n                      // Força preventDefault para evitar comportamento padrão do form\n                      e.preventDefault();\n                      handleSubmit(e as any);\n                    }}\n                  >\n                    {submitting ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n                        Salvando...\n                      </>\n                    ) : (\n                      `${editingPlan ? 'Atualizar' : 'Criar'} Plano`\n                    )}\n                  </MobileButton>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Package className=\"mr-2 h-5 w-5\" />\n            Lista de Planos Customizados\n          </CardTitle>\n          <CardDescription>\n            Gerencie todos os planos disponíveis na plataforma\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {isMobile ? (\n            // Layout Mobile Otimizado\n            <div className=\"space-y-3 p-3\">\n              {plans.map((plan) => (\n                <Card key={plan.id} className=\"border border-border/50 hover:border-border transition-colors\">\n                  <CardContent className=\"p-3\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start gap-3\">\n                        {plan.image_url && (\n                          <img\n                            src={plan.image_url}\n                            alt={plan.name}\n                            className=\"w-14 h-14 object-cover rounded-lg border border-border flex-shrink-0\"\n                          />\n                        )}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <div className=\"min-w-0 flex-1\">\n                              <h3 className=\"font-medium text-base truncate\">{plan.name}</h3>\n                              {plan.description && (\n                                <p className=\"text-xs text-muted-foreground line-clamp-2 mt-1\">\n                                  {plan.description}\n                                </p>\n                              )}\n                            </div>\n                            {plan.active ? (\n                              <Badge className=\"bg-green-500 text-xs flex-shrink-0\">Ativo</Badge>\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"text-xs flex-shrink-0\">Inativo</Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-3 text-xs\">\n                        <div className=\"space-y-1\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Categoria:</span>\n                            <Badge variant=\"outline\" className=\"ml-1 text-xs\">{plan.category}</Badge>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Duração:</span>\n                            <span className=\"ml-1 font-medium\">{plan.duration_months} {plan.duration_months === 1 ? 'mês' : 'meses'}</span>\n                          </div>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Preço:</span>\n                            <span className=\"ml-1 font-medium\">R$ {plan.price.toFixed(2)}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Máx.:</span>\n                            <span className=\"ml-1\">{plan.max_participants} usuários</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex flex-col gap-2 pt-2 border-t border-border/50\">\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          <MobileButton\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => togglePlanStatus(plan.id, plan.active)}\n                            className=\"text-xs\"\n                          >\n                            {plan.active ? 'Desativar' : 'Ativar'}\n                          </MobileButton>\n                          <MobileButton\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(plan)}\n                            className=\"text-xs\"\n                          >\n                            <Edit className=\"h-3 w-3 mr-1\" />\n                            Editar\n                          </MobileButton>\n                        </div>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <MobileButton\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"w-full text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground disabled:opacity-50 text-xs\"\n                              disabled={deleting === plan.id}\n                            >\n                              {deleting === plan.id ? (\n                                <>\n                                  <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-current mr-1\" />\n                                  Excluindo...\n                                </>\n                              ) : (\n                                <>\n                                  <Trash2 className=\"h-3 w-3 mr-1\" />\n                                  Excluir Plano\n                                </>\n                              )}\n                            </MobileButton>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent className=\"bg-background border shadow-lg w-[95vw] max-w-md\">\n                            <AlertDialogHeader>\n                              <AlertDialogTitle className=\"text-left\">Confirmar exclusão</AlertDialogTitle>\n                              <AlertDialogDescription className=\"text-left text-sm\">\n                                Tem certeza que deseja excluir o plano <strong>\"{plan.name}\"</strong>?\n                                <br /><br />\n                                ⚠️ <strong>Esta ação não pode ser desfeita</strong> e removerá:\n                                <br />• O plano e suas configurações\n                                <br />• Todos os dados relacionados\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter className=\"flex flex-col gap-2 sm:flex-row\">\n                              <AlertDialogCancel className=\"bg-background w-full sm:w-auto order-2 sm:order-1\" disabled={deleting === plan.id}>\n                                Cancelar\n                              </AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  handleDelete(plan.id);\n                                }}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90 w-full sm:w-auto order-1 sm:order-2\"\n                                disabled={deleting === plan.id}\n                              >\n                                {deleting === plan.id ? (\n                                  <>\n                                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\" />\n                                    Excluindo...\n                                  </>\n                                ) : 'Sim, Excluir'}\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            // Desktop Table Layout\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Categoria</TableHead>\n                    <TableHead>Preço</TableHead>\n                    <TableHead>Duração</TableHead>\n                    <TableHead>Participantes</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {plans.map((plan) => (\n                    <TableRow key={plan.id}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          {plan.image_url && (\n                            <img\n                              src={plan.image_url}\n                              alt={plan.name}\n                              className=\"w-12 h-12 object-cover rounded-lg border border-border flex-shrink-0\"\n                            />\n                          )}\n                          <div>\n                            <div className=\"font-medium\">{plan.name}</div>\n                            {plan.description && (\n                              <div className=\"text-sm text-muted-foreground\">{plan.description}</div>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{plan.category}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <DollarSign className=\"h-4 w-4 mr-1\" />\n                          R$ {plan.price.toFixed(2)}\n                        </div>\n                      </TableCell>\n                      <TableCell>{plan.duration_months} {plan.duration_months === 1 ? 'mês' : 'meses'}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <Users className=\"h-4 w-4 mr-1\" />\n                          {plan.max_participants}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {plan.active ? (\n                          <Badge className=\"bg-green-500\">Ativo</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Inativo</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => togglePlanStatus(plan.id, plan.active)}\n                          >\n                            {plan.active ? 'Desativar' : 'Ativar'}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(plan)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent className=\"bg-background border shadow-lg\">\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Confirmar exclusão</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Tem certeza que deseja excluir o plano \"{plan.name}\"? Esta ação não pode ser desfeita.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel className=\"bg-background\">Cancelar</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => handleDelete(plan.id)}\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                >\n                                  Excluir\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n          \n          {plans.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhum plano encontrado</h3>\n              <p className=\"text-muted-foreground\">Crie seu primeiro plano customizado para começar.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/DataValidationMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3260,3263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3260,3263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'runValidation'. Either include it or remove the dependency array.","line":159,"column":6,"nodeType":"ArrayExpression","endLine":159,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [runValidation]","fix":{"range":[4846,4848],"text":"[runValidation]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, AlertTriangle, CheckCircle, XCircle, Eye } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ValidationResult {\n  table: string;\n  total_records: number;\n  valid_records: number;\n  invalid_records: number;\n  missing_required_fields: number;\n  suspicious_data: number;\n  last_check: string;\n}\n\nexport const DataValidationMonitor = () => {\n  const [validationResults, setValidationResults] = useState<ValidationResult[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  const runValidation = async () => {\n    setLoading(true);\n    try {\n      console.log('🔍 [DATA-VALIDATION] Iniciando validação de dados...');\n\n      // Validar planos de tatuagem\n      const { data: tattooPlans } = await supabase\n        .from('planos_tatuador')\n        .select('*');\n\n      // Validar planos de dentista\n      const { data: dentalPlans } = await supabase\n        .from('planos_dentista')\n        .select('*');\n\n      // Validar custom plans\n      const { data: customPlans } = await supabase\n        .from('custom_plans')\n        .select('*');\n\n      // Validar produtos\n      const { data: products } = await supabase\n        .from('products')\n        .select('*');\n\n      // Validar profiles (usuários)\n      const { data: profiles } = await supabase\n        .from('profiles')\n        .select('*');\n\n      // Validar transações\n      const { data: transactions } = await supabase\n        .from('transacoes')\n        .select('*');\n\n      const results: ValidationResult[] = [\n        validateTable('planos_tatuador', tattooPlans || [], ['name', 'price']),\n        validateTable('planos_dentista', dentalPlans || [], ['name', 'price']),\n        validateTable('custom_plans', customPlans || [], ['name', 'price']),\n        validateTable('products', products || [], ['name', 'price']),\n        validateTable('profiles', profiles || [], ['full_name', 'email']),\n        validateTable('transacoes', transactions || [], ['usuario_id', 'valor'])\n      ];\n\n      setValidationResults(results);\n      setLastUpdate(new Date());\n\n      const totalIssues = results.reduce((sum, r) => sum + r.invalid_records + r.suspicious_data, 0);\n      \n      if (totalIssues > 0) {\n        toast({\n          title: \"⚠️ Problemas encontrados\",\n          description: `${totalIssues} registros com problemas detectados`,\n          variant: \"default\",\n        });\n      } else {\n        toast({\n          title: \"✅ Validação completa\",\n          description: \"Todos os dados estão válidos\",\n          variant: \"default\",\n        });\n      }\n\n    } catch (error) {\n      console.error('❌ [DATA-VALIDATION] Erro:', error);\n      toast({\n        title: \"Erro na validação\",\n        description: \"Falha ao validar dados\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const validateTable = (tableName: string, data: any[], requiredFields: string[]): ValidationResult => {\n    const total = data.length;\n    let valid = 0;\n    let invalid = 0;\n    let missingRequired = 0;\n    let suspicious = 0;\n\n    data.forEach(record => {\n      let isValid = true;\n      let hasMissingRequired = false;\n      let isSuspicious = false;\n\n      // Verificar campos obrigatórios\n      requiredFields.forEach(field => {\n        if (!record[field] || (typeof record[field] === 'string' && record[field].trim() === '')) {\n          hasMissingRequired = true;\n          isValid = false;\n        }\n      });\n\n      // Verificar dados suspeitos\n      if (record.name && (\n        record.name.toLowerCase().includes('test') ||\n        record.name.toLowerCase().includes('mock') ||\n        record.name.toLowerCase().includes('fake') ||\n        record.name.toLowerCase().includes('exemplo')\n      )) {\n        isSuspicious = true;\n        isValid = false;\n      }\n\n      // Verificar preços suspeitos\n      if (record.price && (record.price <= 0 || record.price > 100000)) {\n        isSuspicious = true;\n        isValid = false;\n      }\n\n      if (isValid) {\n        valid++;\n      } else {\n        invalid++;\n        if (hasMissingRequired) missingRequired++;\n        if (isSuspicious) suspicious++;\n      }\n    });\n\n    return {\n      table: tableName,\n      total_records: total,\n      valid_records: valid,\n      invalid_records: invalid,\n      missing_required_fields: missingRequired,\n      suspicious_data: suspicious,\n      last_check: new Date().toISOString()\n    };\n  };\n\n  useEffect(() => {\n    runValidation();\n  }, []);\n\n  const getStatusColor = (result: ValidationResult) => {\n    const issueRate = (result.invalid_records + result.suspicious_data) / result.total_records;\n    if (issueRate === 0) return \"bg-green-100 text-green-800\";\n    if (issueRate < 0.1) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-red-100 text-red-800\";\n  };\n\n  const getStatusIcon = (result: ValidationResult) => {\n    const hasIssues = result.invalid_records > 0 || result.suspicious_data > 0;\n    return hasIssues ? \n      <XCircle className=\"h-4 w-4 text-red-600\" /> : \n      <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Monitor de Validação de Dados</h2>\n          <p className=\"text-muted-foreground\">\n            Verificação automática da qualidade e integridade dos dados\n          </p>\n        </div>\n        \n        <Button\n          onClick={runValidation}\n          disabled={loading}\n          variant=\"outline\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n          Validar Agora\n        </Button>\n      </div>\n\n      {lastUpdate && (\n        <div className=\"text-sm text-muted-foreground\">\n          Última verificação: {lastUpdate.toLocaleString()}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {validationResults.map((result) => (\n          <Card key={result.table}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-base\">\n                  {result.table.replace('_', ' ').toUpperCase()}\n                </CardTitle>\n                {getStatusIcon(result)}\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Total de registros:</span>\n                  <span className=\"font-medium\">{result.total_records}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span>Válidos:</span>\n                  <span className=\"font-medium text-green-600\">{result.valid_records}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span>Inválidos:</span>\n                  <span className=\"font-medium text-red-600\">{result.invalid_records}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span>Campos obrigatórios:</span>\n                  <span className=\"font-medium text-orange-600\">{result.missing_required_fields}</span>\n                </div>\n                \n                <div className=\"flex justify-between text-sm\">\n                  <span>Dados suspeitos:</span>\n                  <span className=\"font-medium text-red-600\">{result.suspicious_data}</span>\n                </div>\n                \n                <Badge className={getStatusColor(result)} variant=\"secondary\">\n                  {result.invalid_records === 0 && result.suspicious_data === 0 ? \n                    \"✅ Dados válidos\" : \n                    \"⚠️ Requer atenção\"\n                  }\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Resumo geral */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5\" />\n            Resumo da Validação\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {validationResults.length > 0 && (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {validationResults.reduce((sum, r) => sum + r.total_records, 0)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Total de registros</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {validationResults.reduce((sum, r) => sum + r.valid_records, 0)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Registros válidos</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {validationResults.reduce((sum, r) => sum + r.invalid_records, 0)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Registros inválidos</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {validationResults.reduce((sum, r) => sum + r.suspicious_data, 0)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Dados suspeitos</div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/EmailDiagnosticTool.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1862,1865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1862,1865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nconst EmailDiagnosticTool = () => {\n  const [email, setEmail] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<any>(null);\n  const { toast } = useToast();\n\n  const checkEmailStatus = async () => {\n    if (!email) {\n      toast({\n        title: \"Erro\",\n        description: \"Digite um email para verificar\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('check-email-status', {\n        body: { email }\n      });\n\n      if (error) throw error;\n\n      setResult(data);\n      \n      toast({\n        title: \"Verificação concluída\",\n        description: data.found ? \"Usuário encontrado\" : \"Usuário não encontrado\"\n      });\n    } catch (error: any) {\n      console.error('Erro na verificação:', error);\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro na verificação\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const confirmEmail = async () => {\n    if (!email) return;\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('auto-confirm-email', {\n        body: { email }\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Sucesso\",\n        description: data.message || \"Email confirmado com sucesso\"\n      });\n\n      // Atualizar status\n      await checkEmailStatus();\n    } catch (error: any) {\n      console.error('Erro ao confirmar email:', error);\n      toast({\n        title: \"Erro\",\n        description: error.message || \"Erro ao confirmar email\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>🔍 Diagnóstico de Email</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"diagnostic-email\">Email do usuário</Label>\n          <Input\n            id=\"diagnostic-email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"email@exemplo.com\"\n          />\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button \n            onClick={checkEmailStatus} \n            disabled={loading}\n            variant=\"outline\"\n          >\n            {loading ? \"Verificando...\" : \"Verificar Status\"}\n          </Button>\n          \n          {result?.found && !result?.email_confirmed && (\n            <Button \n              onClick={confirmEmail}\n              disabled={loading}\n            >\n              Confirmar Email\n            </Button>\n          )}\n        </div>\n\n        {result && (\n          <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n            <h4 className=\"font-medium mb-2\">Resultado:</h4>\n            {result.found ? (\n              <div className=\"space-y-1 text-sm\">\n                <p><strong>User ID:</strong> {result.user_id}</p>\n                <p><strong>Email:</strong> {result.email}</p>\n                <p><strong>Email Confirmado:</strong> \n                  <span className={result.email_confirmed ? \"text-green-600\" : \"text-red-600\"}>\n                    {result.email_confirmed ? \" ✅ Sim\" : \" ❌ Não\"}\n                  </span>\n                </p>\n                {result.email_confirmed_at && (\n                  <p><strong>Confirmado em:</strong> {new Date(result.email_confirmed_at).toLocaleString()}</p>\n                )}\n                <p><strong>Criado em:</strong> {new Date(result.created_at).toLocaleString()}</p>\n                {result.last_sign_in_at && (\n                  <p><strong>Último login:</strong> {new Date(result.last_sign_in_at).toLocaleString()}</p>\n                )}\n              </div>\n            ) : (\n              <p className=\"text-red-600\">Usuário não encontrado no sistema</p>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EmailDiagnosticTool;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/EnhancedReportsAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ForceDeleteUsers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/GlobalPlanDeletion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/GroupsOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/MLMAdminPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMLMData'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMLMData]","fix":{"range":[1373,1375],"text":"[loadMLMData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  TrendingUp, \n  Crown, \n  Target,\n  Award,\n  Calendar,\n  DollarSign,\n  Gift\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface MLMStats {\n  totalGroups: number;\n  activeGroups: number;\n  completedGroups: number;\n  totalParticipants: number;\n  totalRevenue: number;\n  conversionRate: number;\n}\n\ninterface Group {\n  id: string;\n  service_name: string;\n  current_participants: number;\n  max_participants: number;\n  status: string;\n  created_at: string;\n  target_amount: number;\n  current_amount: number;\n}\n\nexport function MLMAdminPanel() {\n  const [stats, setStats] = useState<MLMStats>({\n    totalGroups: 0,\n    activeGroups: 0,\n    completedGroups: 0,\n    totalParticipants: 0,\n    totalRevenue: 0,\n    conversionRate: 0\n  });\n  \n  const [groups, setGroups] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadMLMData();\n  }, []);\n\n  const loadMLMData = async () => {\n    try {\n      setLoading(true);\n      \n      // Carregar dados dos grupos\n      const { data: groupsData, error: groupsError } = await supabase\n        .from('plan_groups')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (groupsError) throw groupsError;\n\n      // Carregar participantes\n      const { data: participantsData } = await supabase\n        .from('group_participants')\n        .select('*');\n\n      // Processar dados\n      const mappedGroups: Group[] = (groupsData || []).map(group => ({\n        id: group.id,\n        service_name: `Grupo #${group.group_number || group.id.slice(-4)}`,\n        current_participants: group.current_participants || 0,\n        max_participants: group.max_participants || 10,\n        status: group.status || 'forming',\n        created_at: group.created_at,\n        target_amount: group.target_amount || 0,\n        current_amount: group.current_amount || 0\n      }));\n\n      setGroups(mappedGroups);\n\n      // Calcular estatísticas\n      const totalGroups = mappedGroups.length;\n      const activeGroups = mappedGroups.filter(g => g.status === 'forming').length;\n      const completedGroups = mappedGroups.filter(g => g.status === 'completed').length;\n      const totalParticipants = participantsData?.length || 0;\n      const totalRevenue = mappedGroups.reduce((acc, group) => acc + (group.current_amount || 0), 0);\n      const conversionRate = totalGroups > 0 ? (completedGroups / totalGroups) * 100 : 0;\n\n      setStats({\n        totalGroups,\n        activeGroups,\n        completedGroups,\n        totalParticipants,\n        totalRevenue,\n        conversionRate\n      });\n\n    } catch (error) {\n      console.error('Error loading MLM data:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados do MLM.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'forming':\n        return <Badge variant=\"outline\" className=\"text-blue-600\">Em Formação</Badge>;\n      case 'completed':\n        return <Badge variant=\"default\" className=\"bg-green-600\">Completo</Badge>;\n      case 'contemplated':\n        return <Badge variant=\"default\" className=\"bg-yellow-600\">Contemplado</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Carregando dados do MLM...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\">Painel MLM</h1>\n        <p className=\"text-muted-foreground\">\n          Monitoramento e gestão do sistema de grupos MLM\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total de Grupos</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{stats.totalGroups}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <Target className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Grupos Ativos</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.activeGroups}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-yellow-100 rounded-full\">\n                <Crown className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Grupos Completos</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{stats.completedGroups}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-full\">\n                <Users className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Participantes</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{stats.totalParticipants}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Receita Total</p>\n                <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(stats.totalRevenue)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-full\">\n                <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Taxa de Conversão</p>\n                <p className=\"text-2xl font-bold text-orange-600\">{stats.conversionRate.toFixed(1)}%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Groups Management */}\n      <Tabs defaultValue=\"active\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"active\">Grupos Ativos</TabsTrigger>\n          <TabsTrigger value=\"completed\">Grupos Completos</TabsTrigger>\n          <TabsTrigger value=\"all\">Todos os Grupos</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Grupos em Formação ({groups.filter(g => g.status === 'forming').length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {groups.filter(g => g.status === 'forming').map(group => (\n                  <div key={group.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold\">{group.service_name}</h3>\n                      {getStatusBadge(group.status)}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Participantes</p>\n                        <p className=\"font-medium\">{group.current_participants}/{group.max_participants}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Valor Arrecadado</p>\n                        <p className=\"font-medium\">{formatCurrency(group.current_amount)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Criado em</p>\n                        <p className=\"font-medium\">{formatDate(group.created_at)}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Progresso do Grupo</span>\n                        <span>{Math.round((group.current_participants / group.max_participants) * 100)}%</span>\n                      </div>\n                      <Progress \n                        value={(group.current_participants / group.max_participants) * 100}\n                        className=\"h-2\"\n                      />\n                    </div>\n                  </div>\n                ))}\n                \n                {groups.filter(g => g.status === 'forming').length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Target className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">Nenhum grupo em formação no momento</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"completed\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Crown className=\"h-5 w-5\" />\n                Grupos Completos ({groups.filter(g => g.status === 'completed').length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {groups.filter(g => g.status === 'completed').map(group => (\n                  <div key={group.id} className=\"border rounded-lg p-4 bg-green-50\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold\">{group.service_name}</h3>\n                      {getStatusBadge(group.status)}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Participantes</p>\n                        <p className=\"font-medium\">{group.current_participants}/{group.max_participants}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Valor Total</p>\n                        <p className=\"font-medium\">{formatCurrency(group.current_amount)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Completado em</p>\n                        <p className=\"font-medium\">{formatDate(group.created_at)}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {groups.filter(g => g.status === 'completed').length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Crown className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">Nenhum grupo completo ainda</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"all\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Todos os Grupos ({groups.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {groups.map(group => (\n                  <div key={group.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h3 className=\"font-semibold\">{group.service_name}</h3>\n                      {getStatusBadge(group.status)}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Participantes</p>\n                        <p className=\"font-medium\">{group.current_participants}/{group.max_participants}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Valor Arrecadado</p>\n                        <p className=\"font-medium\">{formatCurrency(group.current_amount)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Meta</p>\n                        <p className=\"font-medium\">{formatCurrency(group.target_amount)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Criado em</p>\n                        <p className=\"font-medium\">{formatDate(group.created_at)}</p>\n                      </div>\n                    </div>\n                    \n                    {group.status === 'forming' && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Progresso</span>\n                          <span>{Math.round((group.current_participants / group.max_participants) * 100)}%</span>\n                        </div>\n                        <Progress \n                          value={(group.current_participants / group.max_participants) * 100}\n                          className=\"h-2\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                ))}\n                \n                {groups.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">Nenhum grupo encontrado</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/MarketplaceReports.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMarketplaceData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMarketplaceData]","fix":{"range":[1519,1521],"text":"[loadMarketplaceData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3692,3695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3692,3695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Package, \n  DollarSign, \n  ExternalLink,\n  CreditCard,\n  Users,\n  Download,\n  Filter,\n  BarChart3\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface MarketplaceSale {\n  id: string;\n  product_title: string;\n  customer_name: string;\n  amount_paid: number;\n  payment_method: 'credits' | 'card' | 'external';\n  buyer_type: 'client' | 'professional';\n  product_type: 'internal' | 'dropshipping';\n  created_at: string;\n  professional_name: string;\n}\n\ninterface MarketplaceStats {\n  totalSales: number;\n  totalRevenue: number;\n  creditSales: number;\n  cardSales: number;\n  externalSales: number;\n  clientPurchases: number;\n  professionalPurchases: number;\n}\n\nexport const MarketplaceReports = () => {\n  const [sales, setSales] = useState<MarketplaceSale[]>([]);\n  const [stats, setStats] = useState<MarketplaceStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [filterBuyerType, setFilterBuyerType] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadMarketplaceData();\n  }, []);\n\n  const loadMarketplaceData = async () => {\n    try {\n      setLoading(true);\n\n      // Carregar vendas do marketplace (simulado por enquanto)\n      const mockSales: MarketplaceSale[] = [\n        {\n          id: \"1\",\n          product_title: \"Agulhas Profissionais Kit\",\n          customer_name: \"Maria Silva\",\n          amount_paid: 150.00,\n          payment_method: 'credits',\n          buyer_type: 'professional',\n          product_type: 'internal',\n          created_at: new Date().toISOString(),\n          professional_name: \"João Santos\"\n        },\n        {\n          id: \"2\",\n          product_title: \"Curso Marketing Digital\",\n          customer_name: \"Carlos Lima\",\n          amount_paid: 299.00,\n          payment_method: 'card',\n          buyer_type: 'client',\n          product_type: 'internal',\n          created_at: new Date().toISOString(),\n          professional_name: \"Ana Costa\"\n        },\n        {\n          id: \"3\",\n          product_title: \"Equipamento Importado\",\n          customer_name: \"Lucia Mendes\",\n          amount_paid: 0, // Dropshipping - sem valor interno\n          payment_method: 'external',\n          buyer_type: 'professional',\n          product_type: 'dropshipping',\n          created_at: new Date().toISOString(),\n          professional_name: \"Pedro Oliveira\"\n        }\n      ];\n\n      setSales(mockSales);\n\n      // Calcular estatísticas\n      const totalSales = mockSales.length;\n      const totalRevenue = mockSales.reduce((sum, sale) => sum + sale.amount_paid, 0);\n      const creditSales = mockSales.filter(s => s.payment_method === 'credits').length;\n      const cardSales = mockSales.filter(s => s.payment_method === 'card').length;\n      const externalSales = mockSales.filter(s => s.payment_method === 'external').length;\n      const clientPurchases = mockSales.filter(s => s.buyer_type === 'client').length;\n      const professionalPurchases = mockSales.filter(s => s.buyer_type === 'professional').length;\n\n      setStats({\n        totalSales,\n        totalRevenue,\n        creditSales,\n        cardSales,\n        externalSales,\n        clientPurchases,\n        professionalPurchases\n      });\n\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao carregar dados\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportToCSV = () => {\n    try {\n      const csvContent = [\n      ['Produto', 'Cliente', 'Valor', 'Método Pagamento', 'Tipo Comprador', 'Tipo Produto', 'Data', 'Profissional'],\n      ...filteredSales.map(sale => [\n        sale.product_title,\n        sale.customer_name,\n        sale.amount_paid.toFixed(2),\n        sale.payment_method,\n        sale.buyer_type,\n        sale.product_type,\n        new Date(sale.created_at).toLocaleDateString('pt-BR'),\n        sale.professional_name\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `marketplace-vendas-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Exportação concluída\",\n        description: \"Arquivo CSV baixado com sucesso.\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Não foi possível exportar os dados.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const filteredSales = sales.filter(sale => {\n    const matchesType = filterType === \"all\" || sale.product_type === filterType;\n    const matchesBuyerType = filterBuyerType === \"all\" || sale.buyer_type === filterBuyerType;\n    return matchesType && matchesBuyerType;\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const getPaymentMethodBadge = (method: string) => {\n    switch (method) {\n      case 'credits':\n        return <Badge variant=\"default\">Créditos</Badge>;\n      case 'card':\n        return <Badge variant=\"secondary\">Cartão</Badge>;\n      case 'external':\n        return <Badge variant=\"outline\">Externo</Badge>;\n      default:\n        return <Badge>{method}</Badge>;\n    }\n  };\n\n  const getBuyerTypeBadge = (type: string) => {\n    switch (type) {\n      case 'client':\n        return <Badge variant=\"default\">Cliente</Badge>;\n      case 'professional':\n        return <Badge variant=\"secondary\">Profissional</Badge>;\n      default:\n        return <Badge>{type}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <div className=\"animate-pulse space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  <div className=\"h-6 bg-muted rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Relatórios do Marketplace</h2>\n          <p className=\"text-muted-foreground\">\n            Análise de vendas e performance dos produtos\n          </p>\n        </div>\n        <Button onClick={exportToCSV} className=\"flex items-center gap-2\">\n          <Download className=\"h-4 w-4\" />\n          Exportar CSV\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total de Vendas</p>\n                  <p className=\"text-2xl font-bold\">{stats.totalSales}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Receita Total</p>\n                  <p className=\"text-2xl font-bold\">{formatCurrency(stats.totalRevenue)}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Compras de Clientes</p>\n                  <p className=\"text-2xl font-bold\">{stats.clientPurchases}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Compras de Profissionais</p>\n                  <p className=\"text-2xl font-bold\">{stats.professionalPurchases}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <div className=\"flex gap-4 items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Filter className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">Filtros:</span>\n        </div>\n        \n        <Select value={filterType} onValueChange={setFilterType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Tipo de produto\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos os tipos</SelectItem>\n            <SelectItem value=\"internal\">Produtos internos</SelectItem>\n            <SelectItem value=\"dropshipping\">Dropshipping</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={filterBuyerType} onValueChange={setFilterBuyerType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Tipo de comprador\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Todos compradores</SelectItem>\n            <SelectItem value=\"client\">Clientes</SelectItem>\n            <SelectItem value=\"professional\">Profissionais</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Sales Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Histórico de Vendas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-2\">Produto</th>\n                  <th className=\"text-left p-2\">Cliente</th>\n                  <th className=\"text-left p-2\">Valor</th>\n                  <th className=\"text-left p-2\">Pagamento</th>\n                  <th className=\"text-left p-2\">Comprador</th>\n                  <th className=\"text-left p-2\">Tipo</th>\n                  <th className=\"text-left p-2\">Data</th>\n                  <th className=\"text-left p-2\">Profissional</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredSales.map((sale) => (\n                  <tr key={sale.id} className=\"border-b hover:bg-muted/50\">\n                    <td className=\"p-2 font-medium\">{sale.product_title}</td>\n                    <td className=\"p-2\">{sale.customer_name}</td>\n                    <td className=\"p-2\">\n                      {sale.payment_method === 'external' \n                        ? 'N/A' \n                        : formatCurrency(sale.amount_paid)\n                      }\n                    </td>\n                    <td className=\"p-2\">{getPaymentMethodBadge(sale.payment_method)}</td>\n                    <td className=\"p-2\">{getBuyerTypeBadge(sale.buyer_type)}</td>\n                    <td className=\"p-2\">\n                      <Badge variant={sale.product_type === 'internal' ? 'default' : 'outline'}>\n                        {sale.product_type === 'internal' ? 'Interno' : 'Dropshipping'}\n                      </Badge>\n                    </td>\n                    <td className=\"p-2\">\n                      {new Date(sale.created_at).toLocaleDateString('pt-BR')}\n                    </td>\n                    <td className=\"p-2\">{sale.professional_name}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {filteredSales.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhuma venda encontrada</h3>\n              <p className=\"text-muted-foreground\">\n                Ajuste os filtros ou aguarde as primeiras vendas\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Payment Method Breakdown */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-medium\">Pagamentos com Crédito</span>\n                </div>\n                <span className=\"text-xl font-bold\">{stats.creditSales}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-medium\">Pagamentos com Cartão</span>\n                </div>\n                <span className=\"text-xl font-bold\">{stats.cardSales}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <ExternalLink className=\"h-4 w-4\" />\n                  <span className=\"text-sm font-medium\">Redirecionamentos Externos</span>\n                </div>\n                <span className=\"text-xl font-bold\">{stats.externalSales}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/MaterialUploadPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8940,8943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8940,8943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Upload, \n  FileImage, \n  FileText, \n  Download, \n  Trash2,\n  Eye,\n  Plus,\n  RefreshCw,\n  Image as ImageIcon,\n  File\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UploadedMaterial {\n  id: string;\n  name: string;\n  type: 'image' | 'video' | 'pdf' | 'document';\n  category: 'promotional' | 'educational' | 'template';\n  size: number;\n  uploadedAt: string;\n  uploadedBy: string;\n  downloadCount: number;\n  url: string;\n}\n\nexport function MaterialUploadPanel() {\n  const { toast } = useToast();\n  const [materials, setMaterials] = useState<UploadedMaterial[]>([\n    {\n      id: '1',\n      name: 'Banner Promocional - Plano Premium.jpg',\n      type: 'image',\n      category: 'promotional',\n      size: 2048576, // 2MB in bytes\n      uploadedAt: '2024-01-20T10:30:00Z',\n      uploadedBy: 'Admin',\n      downloadCount: 45,\n      url: '#'\n    },\n    {\n      id: '2',\n      name: 'Manual do Influenciador.pdf',\n      type: 'pdf',\n      category: 'educational',\n      size: 5242880, // 5MB\n      uploadedAt: '2024-01-19T15:20:00Z',\n      uploadedBy: 'Admin',\n      downloadCount: 123,\n      url: '#'\n    },\n    {\n      id: '3',\n      name: 'Template Instagram Stories.psd',\n      type: 'document',\n      category: 'template',\n      size: 15728640, // 15MB\n      uploadedAt: '2024-01-18T09:15:00Z',\n      uploadedBy: 'Design Team',\n      downloadCount: 78,\n      url: '#'\n    }\n  ]);\n\n  const [uploading, setUploading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    category: 'promotional' as const,\n    description: ''\n  });\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string) => {\n    switch (type) {\n      case 'image':\n        return <ImageIcon className=\"w-4 h-4 text-blue-600\" />;\n      case 'pdf':\n        return <FileText className=\"w-4 h-4 text-red-600\" />;\n      case 'video':\n        return <File className=\"w-4 h-4 text-purple-600\" />;\n      default:\n        return <File className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getCategoryBadge = (category: string) => {\n    switch (category) {\n      case 'promotional':\n        return <Badge className=\"bg-green-100 text-green-800\">Promocional</Badge>;\n      case 'educational':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Educacional</Badge>;\n      case 'template':\n        return <Badge className=\"bg-purple-100 text-purple-800\">Template</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{category}</Badge>;\n    }\n  };\n\n  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Nome obrigatório\",\n        description: \"Por favor, insira um nome para o material.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    \n    try {\n      // Simulate upload process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const newMaterial: UploadedMaterial = {\n        id: Date.now().toString(),\n        name: formData.name + '.' + file.name.split('.').pop(),\n        type: file.type.startsWith('image/') ? 'image' : \n              file.type === 'application/pdf' ? 'pdf' : 'document',\n        category: formData.category,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        uploadedBy: 'Admin Atual',\n        downloadCount: 0,\n        url: URL.createObjectURL(file)\n      };\n\n      setMaterials(prev => [newMaterial, ...prev]);\n      setFormData({ name: '', category: 'promotional', description: '' });\n      \n      // Reset file input\n      event.target.value = '';\n\n      toast({\n        title: \"Upload concluído!\",\n        description: `Material \"${newMaterial.name}\" foi carregado com sucesso.`,\n      });\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Erro no upload\",\n        description: \"Não foi possível fazer o upload do arquivo.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  }, [formData, toast]);\n\n  const handleDelete = (id: string) => {\n    setMaterials(prev => prev.filter(m => m.id !== id));\n    toast({\n      title: \"Material removido\",\n      description: \"O material foi removido com sucesso.\",\n    });\n  };\n\n  const handleDownload = (material: UploadedMaterial) => {\n    // Simulate download and increment counter\n    setMaterials(prev => \n      prev.map(m => \n        m.id === material.id \n          ? { ...m, downloadCount: m.downloadCount + 1 }\n          : m\n      )\n    );\n    \n    toast({\n      title: \"Download iniciado\",\n      description: `Download de \"${material.name}\" iniciado.`,\n    });\n  };\n\n  const totalMaterials = materials.length;\n  const totalDownloads = materials.reduce((sum, m) => sum + m.downloadCount, 0);\n  const totalSize = materials.reduce((sum, m) => sum + m.size, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Gerenciamento de Materiais</h2>\n        <Button onClick={() => window.location.reload()} variant=\"outline\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Atualizar\n        </Button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Materiais</CardTitle>\n            <FileImage className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalMaterials}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Arquivos disponíveis\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Downloads Totais</CardTitle>\n            <Download className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalDownloads}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Downloads realizados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Espaço Utilizado</CardTitle>\n            <Upload className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatFileSize(totalSize)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Espaço em disco\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upload Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Novo Upload\n          </CardTitle>\n          <CardDescription>\n            Faça upload de novos materiais promocionais, educacionais ou templates\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"material-name\">Nome do Material</Label>\n              <Input\n                id=\"material-name\"\n                placeholder=\"Ex: Banner Promocional Janeiro\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"material-category\">Categoria</Label>\n              <Select \n                value={formData.category} \n                onValueChange={(value: any) => setFormData(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"promotional\">Promocional</SelectItem>\n                  <SelectItem value=\"educational\">Educacional</SelectItem>\n                  <SelectItem value=\"template\">Template</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"file-upload\">Arquivo</Label>\n              <Input\n                id=\"file-upload\"\n                type=\"file\"\n                onChange={handleFileUpload}\n                disabled={uploading}\n                accept=\".jpg,.jpeg,.png,.gif,.pdf,.psd,.ai,.mp4,.mov\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Descrição (Opcional)</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Descreva o material e como deve ser utilizado...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              rows={3}\n            />\n          </div>\n\n          {uploading && (\n            <div className=\"flex items-center justify-center py-4\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mr-2\"></div>\n              <span className=\"text-sm text-muted-foreground\">Fazendo upload...</span>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Materials List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Materiais Disponíveis</CardTitle>\n          <CardDescription>\n            Lista de todos os materiais carregados e disponíveis para download\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Arquivo</TableHead>\n                <TableHead>Categoria</TableHead>\n                <TableHead>Tamanho</TableHead>\n                <TableHead>Downloads</TableHead>\n                <TableHead>Carregado por</TableHead>\n                <TableHead>Data</TableHead>\n                <TableHead>Ações</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {materials.map((material) => (\n                <TableRow key={material.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getFileIcon(material.type)}\n                      <div>\n                        <div className=\"font-medium\">{material.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {material.type.toUpperCase()}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {getCategoryBadge(material.category)}\n                  </TableCell>\n                  <TableCell>{formatFileSize(material.size)}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center\">\n                      <Download className=\"w-3 h-3 mr-1 text-muted-foreground\" />\n                      {material.downloadCount}\n                    </div>\n                  </TableCell>\n                  <TableCell>{material.uploadedBy}</TableCell>\n                  <TableCell>\n                    {new Date(material.uploadedAt).toLocaleDateString('pt-BR')}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDownload(material)}\n                      >\n                        <Download className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(material.id)}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/NotificationTriggersManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/NotificationTriggersPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/PaymentManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPaymentData'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPaymentData]","fix":{"range":[1704,1706],"text":"[loadPaymentData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  DollarSign, \n  TrendingUp, \n  AlertCircle, \n  CheckCircle,\n  Clock,\n  Search,\n  Filter,\n  Download,\n  CreditCard,\n  Banknote,\n  RefreshCw\n} from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PaymentTransaction {\n  id: string;\n  user_id: string;\n  amount: number;\n  status: string;\n  payment_method: string;\n  created_at: string;\n  user_email?: string;\n  user_name?: string;\n}\n\ninterface PaymentStats {\n  totalRevenue: number;\n  pendingPayments: number;\n  completedPayments: number;\n  refundedPayments: number;\n}\n\nexport function PaymentManagement() {\n  const { toast } = useToast();\n  const [transactions, setTransactions] = useState<PaymentTransaction[]>([]);\n  const [stats, setStats] = useState<PaymentStats>({\n    totalRevenue: 0,\n    pendingPayments: 0,\n    completedPayments: 0,\n    refundedPayments: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n\n  useEffect(() => {\n    loadPaymentData();\n  }, []);\n\n  const loadPaymentData = async () => {\n    setLoading(true);\n    try {\n      // Load marketplace sales (payment transactions)\n      const { data: salesData, error: salesError } = await supabase\n        .from('marketplace_sales')\n        .select(`\n          *,\n          buyer:profiles!marketplace_sales_buyer_id_fkey(email, full_name),\n          seller:profiles!marketplace_sales_seller_id_fkey(email, full_name)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (salesError) throw salesError;\n\n      // Load payment splits for additional revenue tracking\n      const { data: splitsData, error: splitsError } = await supabase\n        .from('payment_splits')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (splitsError) throw splitsError;\n\n      // Transform sales data to payment transactions\n      const transformedTransactions: PaymentTransaction[] = (salesData || []).map(sale => ({\n        id: sale.id,\n        user_id: sale.buyer_id || '',\n        amount: Number(sale.total_amount),\n        status: sale.status,\n        payment_method: sale.payment_method,\n        created_at: sale.created_at,\n        user_email: sale.buyer?.email || 'N/A',\n        user_name: sale.buyer?.full_name || 'N/A'\n      }));\n\n      setTransactions(transformedTransactions);\n\n      // Calculate stats\n      const totalRevenue = transformedTransactions\n        .filter(t => t.status === 'paid')\n        .reduce((sum, t) => sum + t.amount, 0);\n\n      const pendingPayments = transformedTransactions\n        .filter(t => t.status === 'pending').length;\n\n      const completedPayments = transformedTransactions\n        .filter(t => t.status === 'paid').length;\n\n      const refundedPayments = transformedTransactions\n        .filter(t => t.status === 'refunded').length;\n\n      setStats({\n        totalRevenue,\n        pendingPayments,\n        completedPayments,\n        refundedPayments\n      });\n\n    } catch (error) {\n      console.error('Error loading payment data:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados de pagamentos.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Pago</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />Pendente</Badge>;\n      case 'refunded':\n        return <Badge className=\"bg-red-100 text-red-800\"><AlertCircle className=\"w-3 h-3 mr-1\" />Reembolsado</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const matchesSearch = \n      transaction.user_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      transaction.user_email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      transaction.id.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const exportTransactions = () => {\n    const headers = ['ID', 'Usuário', 'Email', 'Valor', 'Status', 'Método', 'Data'].join(',');\n    const rows = filteredTransactions.map(transaction => [\n      transaction.id,\n      `\"${transaction.user_name}\"`,\n      transaction.user_email,\n      transaction.amount,\n      transaction.status,\n      transaction.payment_method,\n      new Date(transaction.created_at).toLocaleDateString('pt-BR')\n    ].join(','));\n\n    const csv = [headers, ...rows].join('\\n');\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `transacoes-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n\n    toast({\n      title: \"Exportação concluída!\",\n      description: \"Transações exportadas com sucesso.\",\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Gerenciamento de Pagamentos</h2>\n        <Button onClick={loadPaymentData} variant=\"outline\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Atualizar\n        </Button>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Receita Total</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(stats.totalRevenue)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pagamentos confirmados\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pagamentos Pendentes</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.pendingPayments}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Aguardando confirmação\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pagamentos Concluídos</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.completedPayments}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Transações finalizadas\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Reembolsos</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.refundedPayments}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Pagamentos reembolsados\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Transactions Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Transações de Pagamento</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center space-x-2\">\n                <Search className=\"w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Buscar transações...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-64\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"pending\">Pendente</SelectItem>\n                  <SelectItem value=\"paid\">Pago</SelectItem>\n                  <SelectItem value=\"refunded\">Reembolsado</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button onClick={exportTransactions} variant=\"outline\" size=\"sm\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>ID</TableHead>\n                <TableHead>Usuário</TableHead>\n                <TableHead>Valor</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Método</TableHead>\n                <TableHead>Data</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredTransactions.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    Nenhuma transação encontrada\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredTransactions.map((transaction) => (\n                  <TableRow key={transaction.id}>\n                    <TableCell className=\"font-mono text-xs\">\n                      {transaction.id.slice(0, 8)}...\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{transaction.user_name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{transaction.user_email}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      {formatCurrency(transaction.amount)}\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(transaction.status)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        {transaction.payment_method === 'pix' ? (\n                          <Banknote className=\"w-4 h-4 mr-1\" />\n                        ) : (\n                          <CreditCard className=\"w-4 h-4 mr-1\" />\n                        )}\n                        {transaction.payment_method.toUpperCase()}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(transaction.created_at).toLocaleString('pt-BR')}\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/PlansMonitor.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlansData'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlansData]","fix":{"range":[2661,2663],"text":"[loadPlansData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UnifiedPlan {\n  id: string;\n  name: string;\n  price: number;\n  active: boolean;\n  tipo_transacao: string;\n  category: string;\n  table_source: string;\n  created_at: string;\n}\n\ninterface PlanStats {\n  total_found: number;\n  total_valid: number;\n  total_filtered: number;\n  by_category: Record<string, number>;\n  by_transaction_type: Record<string, number>;\n  by_table_source: Record<string, number>;\n  errors: string[];\n}\n\nexport const PlansMonitor = () => {\n  const [plans, setPlans] = useState<UnifiedPlan[]>([]);\n  const [stats, setStats] = useState<PlanStats | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  const loadPlansData = async (includeInactive = false) => {\n    setLoading(true);\n    try {\n      console.log('🔍 [MONITOR] Carregando dados completos dos planos...');\n      \n      const { data: response, error } = await supabase.functions.invoke('unified-plans-loader', {\n        body: { \n          include_inactive: includeInactive, \n          admin_view: true \n        }\n      });\n\n      if (error) {\n        console.error('❌ [MONITOR] Erro na edge function:', error);\n        throw error;\n      }\n\n      if (!response?.success) {\n        console.error('❌ [MONITOR] Resposta inválida:', response);\n        throw new Error('Falha ao carregar dados dos planos');\n      }\n\n      setPlans(response.plans || []);\n      setStats(response.stats || null);\n      setLastRefresh(new Date());\n\n      console.log('✅ [MONITOR] Dados carregados:', {\n        total: response.plans?.length || 0,\n        errors: response.errors?.length || 0\n      });\n\n      if (response.errors && response.errors.length > 0) {\n        toast({\n          title: \"Avisos encontrados\",\n          description: `${response.errors.length} problemas detectados nos dados.`,\n          variant: \"default\",\n        });\n      }\n\n    } catch (error) {\n      console.error('❌ [MONITOR] Erro crítico:', error);\n      toast({\n        title: \"Erro no Monitor\",\n        description: \"Falha ao carregar dados dos planos.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPlansData();\n  }, []);\n\n  const getStatusColor = (active: boolean) => {\n    return active ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\";\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      'tattoo': 'bg-purple-100 text-purple-800',\n      'dental': 'bg-blue-100 text-blue-800',\n      'service': 'bg-green-100 text-green-800',\n      'product': 'bg-orange-100 text-orange-800',\n    };\n    return colors[category] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getTableSourceColor = (source: string) => {\n    const colors: Record<string, string> = {\n      'planos_tatuador': 'bg-purple-50 text-purple-700',\n      'planos_dentista': 'bg-blue-50 text-blue-700',\n      'custom_plans': 'bg-green-50 text-green-700',\n      'products': 'bg-orange-50 text-orange-700',\n    };\n    return colors[source] || 'bg-gray-50 text-gray-700';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header com controles */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Monitor de Planos</h2>\n          <p className=\"text-muted-foreground\">\n            Monitoramento em tempo real de todos os planos e produtos\n          </p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button\n            onClick={() => loadPlansData(false)}\n            disabled={loading}\n            variant=\"outline\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Apenas Ativos\n          </Button>\n          \n          <Button\n            onClick={() => loadPlansData(true)}\n            disabled={loading}\n            variant=\"outline\"\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n            Todos (Incluindo Inativos)\n          </Button>\n        </div>\n      </div>\n\n      {/* Estatísticas */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Encontrado</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.total_found}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.total_valid} válidos, {stats.total_found - stats.total_valid} inválidos\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Por Tipo</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Serviços:</span>\n                  <span className=\"font-medium\">{stats.by_transaction_type.servico || 0}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Produtos:</span>\n                  <span className=\"font-medium\">{stats.by_transaction_type.produto || 0}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Por Categoria</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Tatuagem:</span>\n                  <span className=\"font-medium\">{stats.by_category.tattoo || 0}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Dental:</span>\n                  <span className=\"font-medium\">{stats.by_category.dental || 0}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Produtos:</span>\n                  <span className=\"font-medium\">{stats.by_category.product || 0}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {stats.errors.length > 0 ? (\n                  <div className=\"flex items-center text-red-600\">\n                    <AlertTriangle className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">{stats.errors.length} problemas</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center text-green-600\">\n                    <CheckCircle className=\"h-4 w-4 mr-1\" />\n                    <span className=\"text-sm\">Tudo funcionando</span>\n                  </div>\n                )}\n                {lastRefresh && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Última atualização: {lastRefresh.toLocaleTimeString()}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Lista de erros se houver */}\n      {stats?.errors && stats.errors.length > 0 && (\n        <Card className=\"border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"text-red-800 flex items-center\">\n              <AlertTriangle className=\"h-5 w-5 mr-2\" />\n              Problemas Detectados\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {stats.errors.map((error, index) => (\n                <div key={index} className=\"text-sm text-red-700 bg-red-50 p-2 rounded\">\n                  {error}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Lista de planos */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Todos os Planos ({plans.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {plans.map((plan) => (\n              <div key={plan.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <h4 className=\"font-medium\">{plan.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">ID: {plan.id}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold\">R$ {plan.price}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {new Date(plan.created_at).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge className={getStatusColor(plan.active)}>\n                    {plan.active ? 'Ativo' : 'Inativo'}\n                  </Badge>\n                  \n                  <Badge className={getCategoryColor(plan.category)}>\n                    {plan.category}\n                  </Badge>\n                  \n                  <Badge variant=\"outline\">\n                    {plan.tipo_transacao}\n                  </Badge>\n                  \n                  <Badge className={getTableSourceColor(plan.table_source)}>\n                    {plan.table_source}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {plans.length === 0 && !loading && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              Nenhum plano encontrado\n            </div>\n          )}\n          \n          {loading && (\n            <div className=\"text-center py-8\">\n              <RefreshCw className=\"h-6 w-6 animate-spin mx-auto mb-2\" />\n              <div className=\"text-muted-foreground\">Carregando dados...</div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ProfessionalMarketplaceManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadData]","fix":{"range":[1394,1396],"text":"[loadData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Building, Users, DollarSign, Package, UserCheck, UserX, Search, Eye } from 'lucide-react';\n\ninterface Professional {\n  id: string;\n  full_name: string;\n  email: string;\n  role: string;\n  approved: boolean;\n  created_at: string;\n}\n\ninterface ProfessionalService {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  active: boolean;\n  professional_id: string;\n  professional_name: string;\n}\n\nexport function ProfessionalMarketplaceManager() {\n  const [professionals, setProfessionals] = useState<Professional[]>([]);\n  const [products, setProducts] = useState<ProfessionalService[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // Load professionals\n      const { data: professionalsData, error: profError } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('role', 'professional')\n        .order('created_at', { ascending: false });\n\n      if (profError) throw profError;\n\n      // Load products with professional info\n      const { data: productsData, error: productsError } = await supabase\n        .from('products')\n        .select(`\n          *,\n          professional:profiles!products_professional_id_fkey(full_name)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (productsError) throw productsError;\n\n      setProfessionals(professionalsData || []);\n      \n      const formattedProducts = (productsData || []).map(product => ({\n        ...product,\n        professional_name: product.professional?.full_name || 'N/A'\n      }));\n      \n      setProducts(formattedProducts);\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados dos profissionais.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApproveProfessional = async (id: string, approved: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({ approved })\n        .eq('id', id);\n\n      if (error) throw error;\n\n      setProfessionals(prev => \n        prev.map(prof => \n          prof.id === id ? { ...prof, approved } : prof\n        )\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: `Profissional ${approved ? 'aprovado' : 'rejeitado'} com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar profissional:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status do profissional.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleToggleProduct = async (productId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('products')\n        .update({ active: !currentStatus })\n        .eq('id', productId);\n\n      if (error) throw error;\n\n      setProducts(prev => \n        prev.map(product => \n          product.id === productId \n            ? { ...product, active: !currentStatus }\n            : product\n        )\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: `Produto ${!currentStatus ? 'ativado' : 'desativado'} com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar serviço:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar serviço.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filteredProfessionals = professionals.filter(prof =>\n    prof.full_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    prof.email?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredProducts = products.filter(product =>\n    product.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.professional_name?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const pendingProfessionals = professionals.filter(p => !p.approved).length;\n  const totalProducts = products.length;\n  const activeProducts = products.filter(p => p.active).length;\n  const totalRevenue = products.reduce((sum, p) => sum + (p.price || 0), 0);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Marketplace Profissional</h2>\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Buscar profissionais ou serviços...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 w-80\"\n          />\n        </div>\n      </div>\n\n      {/* Métricas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{professionals.length}</div>\n                <p className=\"text-sm text-muted-foreground\">Total Profissionais</p>\n              </div>\n              <Building className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold text-orange-600\">{pendingProfessionals}</div>\n                <p className=\"text-sm text-muted-foreground\">Pendentes</p>\n              </div>\n              <UserCheck className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">{activeProducts}/{totalProducts}</div>\n                <p className=\"text-sm text-muted-foreground\">Serviços Ativos</p>\n              </div>\n              <Package className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-bold\">R$ {totalRevenue.toFixed(2)}</div>\n                <p className=\"text-sm text-muted-foreground\">Valor Total</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"professionals\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"professionals\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Profissionais ({professionals.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"products\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            Produtos ({products.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"professionals\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Lista de Profissionais</CardTitle>\n              <CardDescription>\n                Gerencie aprovações e monitore atividade dos profissionais\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Data Cadastro</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredProfessionals.map((professional) => (\n                    <TableRow key={professional.id}>\n                      <TableCell className=\"font-medium\">\n                        {professional.full_name || 'Nome não informado'}\n                      </TableCell>\n                      <TableCell>{professional.email}</TableCell>\n                      <TableCell>\n                        {professional.approved ? (\n                          <Badge className=\"bg-green-500\">Aprovado</Badge>\n                        ) : (\n                          <Badge variant=\"destructive\">Pendente</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(professional.created_at).toLocaleDateString('pt-BR')}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          {!professional.approved ? (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleApproveProfessional(professional.id, true)}\n                            >\n                              <UserCheck className=\"h-4 w-4\" />\n                            </Button>\n                          ) : (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleApproveProfessional(professional.id, false)}\n                            >\n                              <UserX className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"products\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Serviços dos Profissionais</CardTitle>\n              <CardDescription>\n                Monitore e gerencie todos os serviços oferecidos\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Serviço</TableHead>\n                    <TableHead>Profissional</TableHead>\n                    <TableHead>Categoria</TableHead>\n                    <TableHead>Preço</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredProducts.map((product) => (\n                    <TableRow key={product.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{product.name}</div>\n                          {product.description && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              {product.description.substring(0, 50)}...\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{product.professional_name}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{product.category || 'N/A'}</Badge>\n                      </TableCell>\n                      <TableCell>R$ {product.price?.toFixed(2) || '0.00'}</TableCell>\n                      <TableCell>\n                        {product.active ? (\n                          <Badge className=\"bg-green-500\">Ativo</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Inativo</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleToggleProduct(product.id, product.active)}\n                          >\n                            {product.active ? 'Desativar' : 'Ativar'}\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/RelatoriosContabeis.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'carregarDados'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [filtroTipo, filtroMes, carregarDados]","fix":{"range":[1761,1784],"text":"[filtroTipo, filtroMes, carregarDados]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2650,2653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2650,2653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9347,9350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9347,9350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Download, \n  Calculator, \n  TrendingUp, \n  TrendingDown, \n  FileText,\n  Package,\n  Briefcase,\n  DollarSign,\n  Receipt\n} from \"lucide-react\";\n\ninterface TransacaoContabil {\n  id: string;\n  valor: number;\n  tipo_transacao: string; // Mudado para string genérica\n  status: string;\n  iss_percentual: number;\n  icms_percentual: number;\n  pis_cofins_percentual: number;\n  valor_impostos: number;\n  valor_liquido: number;\n  municipio_iss: string;\n  regime_tributario: string;\n  created_at: string;\n  observacoes: string;\n}\n\ninterface ResumoImpostos {\n  total_servicos: number;\n  total_produtos: number;\n  total_iss: number;\n  total_icms: number;\n  total_pis_cofins: number;\n  total_impostos: number;\n  total_liquido: number;\n  total_bruto: number;\n}\n\nexport const RelatoriosContabeis = () => {\n  const [transacoes, setTransacoes] = useState<TransacaoContabil[]>([]);\n  const [resumo, setResumo] = useState<ResumoImpostos | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [filtroTipo, setFiltroTipo] = useState<'todos' | 'servico' | 'produto'>('todos');\n  const [filtroMes, setFiltroMes] = useState<string>(new Date().toISOString().slice(0, 7));\n  const { toast } = useToast();\n\n  useEffect(() => {\n    carregarDados();\n  }, [filtroTipo, filtroMes]);\n\n  const carregarDados = async () => {\n    try {\n      setLoading(true);\n\n      // Buscar transações\n      let query = supabase\n        .from('transacoes')\n        .select('*')\n        .gte('created_at', `${filtroMes}-01`)\n        .lt('created_at', `${new Date(filtroMes + '-01').getFullYear()}-${String(new Date(filtroMes + '-01').getMonth() + 2).padStart(2, '0')}-01`)\n        .order('created_at', { ascending: false });\n\n      if (filtroTipo !== 'todos') {\n        query = query.eq('tipo_transacao', filtroTipo);\n      }\n\n      const { data: transacoesData, error: transacoesError } = await query;\n\n      if (transacoesError) {\n        throw transacoesError;\n      }\n\n      setTransacoes(transacoesData || []);\n\n      // Calcular resumo\n      const resumoCalculado = calcularResumo(transacoesData || []);\n      setResumo(resumoCalculado);\n\n    } catch (error: any) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados contábeis.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calcularResumo = (transacoes: TransacaoContabil[]): ResumoImpostos => {\n    const servicos = transacoes.filter(t => t.tipo_transacao === 'servico');\n    const produtos = transacoes.filter(t => t.tipo_transacao === 'produto');\n\n    const total_servicos = servicos.reduce((sum, t) => sum + t.valor, 0);\n    const total_produtos = produtos.reduce((sum, t) => sum + t.valor, 0);\n    const total_bruto = total_servicos + total_produtos;\n\n    const total_iss = servicos.reduce((sum, t) => sum + (t.valor * (t.iss_percentual || 0) / 100), 0);\n    const total_icms = produtos.reduce((sum, t) => sum + (t.valor * (t.icms_percentual || 0) / 100), 0);\n    const total_pis_cofins = produtos.reduce((sum, t) => sum + (t.valor * (t.pis_cofins_percentual || 0) / 100), 0);\n\n    const total_impostos = total_iss + total_icms + total_pis_cofins;\n    const total_liquido = total_bruto - total_impostos;\n\n    return {\n      total_servicos,\n      total_produtos,\n      total_iss,\n      total_icms,\n      total_pis_cofins,\n      total_impostos,\n      total_liquido,\n      total_bruto\n    };\n  };\n\n  const exportarRelatorio = () => {\n    if (!resumo || transacoes.length === 0) {\n      toast({\n        title: \"Aviso\",\n        description: \"Não há dados para exportar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Preparar dados para CSV\n    const csvHeader = [\n      'Data',\n      'Tipo',\n      'Valor Bruto',\n      'ISS %',\n      'ICMS %',\n      'PIS/COFINS %',\n      'Total Impostos',\n      'Valor Líquido',\n      'Status',\n      'Município',\n      'Observações'\n    ].join(',');\n\n    const csvRows = transacoes.map(t => [\n      new Date(t.created_at).toLocaleDateString('pt-BR'),\n      t.tipo_transacao,\n      t.valor.toFixed(2),\n      (t.iss_percentual || 0).toFixed(2),\n      (t.icms_percentual || 0).toFixed(2),\n      (t.pis_cofins_percentual || 0).toFixed(2),\n      t.valor_impostos.toFixed(2),\n      t.valor_liquido.toFixed(2),\n      t.status,\n      t.municipio_iss || '',\n      t.observacoes || ''\n    ].join(','));\n\n    const csvContent = [csvHeader, ...csvRows].join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `relatorio-contabil-${filtroMes}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Sucesso\",\n      description: \"Relatório exportado com sucesso!\",\n    });\n  };\n\n  const formatarMoeda = (valor: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(valor);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-3xl font-bold\">Relatórios Contábeis</h2>\n          <p className=\"text-muted-foreground\">\n            Controle tributário e fiscal separado por tipo de transação\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"month\"\n            value={filtroMes}\n            onChange={(e) => setFiltroMes(e.target.value)}\n            className=\"px-3 py-2 border rounded-md\"\n          />\n          <Button onClick={exportarRelatorio} className=\"flex items-center gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Exportar CSV\n          </Button>\n        </div>\n      </div>\n\n      {/* Resumo Geral */}\n      {resumo && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Bruto</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatarMoeda(resumo.total_bruto)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Receita total antes dos impostos\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Impostos</CardTitle>\n              <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{formatarMoeda(resumo.total_impostos)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                ISS + ICMS + PIS/COFINS\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Líquido</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{formatarMoeda(resumo.total_liquido)}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Receita após impostos\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Carga Tributária</CardTitle>\n              <Calculator className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {resumo.total_bruto > 0 ? ((resumo.total_impostos / resumo.total_bruto) * 100).toFixed(1) : 0}%\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Percentual de impostos\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Detalhamento por Tipo */}\n      <Tabs value={filtroTipo} onValueChange={(value) => setFiltroTipo(value as any)}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"todos\">Todos</TabsTrigger>\n          <TabsTrigger value=\"servico\">Serviços</TabsTrigger>\n          <TabsTrigger value=\"produto\">Produtos</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"todos\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Briefcase className=\"h-5 w-5\" />\n                  Serviços\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Bruto:</span>\n                    <span className=\"font-bold\">{formatarMoeda(resumo?.total_servicos || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>ISS a Recolher:</span>\n                    <span className=\"font-bold text-red-600\">{formatarMoeda(resumo?.total_iss || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tributação:</span>\n                    <Badge variant=\"secondary\">ISS Municipal</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Produtos\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Bruto:</span>\n                    <span className=\"font-bold\">{formatarMoeda(resumo?.total_produtos || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>ICMS:</span>\n                    <span className=\"font-bold text-red-600\">{formatarMoeda(resumo?.total_icms || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>PIS/COFINS:</span>\n                    <span className=\"font-bold text-red-600\">{formatarMoeda(resumo?.total_pis_cofins || 0)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tributação:</span>\n                    <Badge variant=\"secondary\">ICMS + Federal</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"servico\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Detalhamento - Serviços (ISS)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Data</TableHead>\n                    <TableHead>Valor Bruto</TableHead>\n                    <TableHead>ISS %</TableHead>\n                    <TableHead>ISS Valor</TableHead>\n                    <TableHead>Valor Líquido</TableHead>\n                    <TableHead>Município</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {transacoes\n                    .filter(t => t.tipo_transacao === 'servico')\n                    .map((transacao) => (\n                    <TableRow key={transacao.id}>\n                      <TableCell>\n                        {new Date(transacao.created_at).toLocaleDateString('pt-BR')}\n                      </TableCell>\n                      <TableCell>{formatarMoeda(transacao.valor)}</TableCell>\n                      <TableCell>{(transacao.iss_percentual || 0).toFixed(1)}%</TableCell>\n                      <TableCell className=\"text-red-600\">\n                        {formatarMoeda(transacao.valor * (transacao.iss_percentual || 0) / 100)}\n                      </TableCell>\n                      <TableCell className=\"text-green-600\">\n                        {formatarMoeda(transacao.valor_liquido)}\n                      </TableCell>\n                      <TableCell>{transacao.municipio_iss || 'N/A'}</TableCell>\n                      <TableCell>\n                        <Badge variant={transacao.status === 'pago' ? 'default' : 'secondary'}>\n                          {transacao.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"produto\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Detalhamento - Produtos (ICMS + PIS/COFINS)</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Data</TableHead>\n                    <TableHead>Valor Bruto</TableHead>\n                    <TableHead>ICMS %</TableHead>\n                    <TableHead>PIS/COFINS %</TableHead>\n                    <TableHead>Total Impostos</TableHead>\n                    <TableHead>Valor Líquido</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {transacoes\n                    .filter(t => t.tipo_transacao === 'produto')\n                    .map((transacao) => (\n                    <TableRow key={transacao.id}>\n                      <TableCell>\n                        {new Date(transacao.created_at).toLocaleDateString('pt-BR')}\n                      </TableCell>\n                      <TableCell>{formatarMoeda(transacao.valor)}</TableCell>\n                      <TableCell>{(transacao.icms_percentual || 0).toFixed(1)}%</TableCell>\n                      <TableCell>{(transacao.pis_cofins_percentual || 0).toFixed(1)}%</TableCell>\n                      <TableCell className=\"text-red-600\">\n                        {formatarMoeda(transacao.valor_impostos)}\n                      </TableCell>\n                      <TableCell className=\"text-green-600\">\n                        {formatarMoeda(transacao.valor_liquido)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={transacao.status === 'pago' ? 'default' : 'secondary'}>\n                          {transacao.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/ReportsAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/SalesManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/SecurityDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSecurityData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSecurityData]","fix":{"range":[1543,1545],"text":"[loadSecurityData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  Shield, \n  AlertTriangle, \n  CheckCircle, \n  XCircle,\n  Eye,\n  Lock,\n  Unlock,\n  User,\n  Clock,\n  RefreshCw,\n  TrendingUp,\n  Activity\n} from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SecurityEvent {\n  id: string;\n  event_type: string;\n  user_id?: string;\n  user_email?: string;\n  ip_address?: string;\n  user_agent?: string;\n  created_at: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n}\n\ninterface SecurityStats {\n  totalEvents: number;\n  criticalEvents: number;\n  suspiciousLogins: number;\n  blockedAttempts: number;\n}\n\nexport function SecurityDashboard() {\n  const { toast } = useToast();\n  const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([]);\n  const [stats, setStats] = useState<SecurityStats>({\n    totalEvents: 0,\n    criticalEvents: 0,\n    suspiciousLogins: 0,\n    blockedAttempts: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  useEffect(() => {\n    loadSecurityData();\n  }, []);\n\n  const loadSecurityData = async () => {\n    setLoading(true);\n    try {\n      // Simulate security events (in a real app, these would come from logs/monitoring)\n      const mockEvents: SecurityEvent[] = [\n        {\n          id: '1',\n          event_type: 'login_attempt',\n          user_email: 'admin@amigodopeito.com',\n          ip_address: '192.168.1.100',\n          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n          created_at: new Date().toISOString(),\n          severity: 'low',\n          description: 'Login administrativo bem-sucedido'\n        },\n        {\n          id: '2',\n          event_type: 'failed_login',\n          user_email: 'unknown@email.com',\n          ip_address: '10.0.0.1',\n          user_agent: 'Bot/1.0',\n          created_at: new Date(Date.now() - 3600000).toISOString(),\n          severity: 'medium',\n          description: 'Tentativa de login falhada - usuário não encontrado'\n        },\n        {\n          id: '3',\n          event_type: 'multiple_failed_attempts',\n          user_email: 'test@test.com',\n          ip_address: '192.168.1.50',\n          user_agent: 'Automated Tool',\n          created_at: new Date(Date.now() - 7200000).toISOString(),\n          severity: 'high',\n          description: 'Múltiplas tentativas de login falhadas - possível ataque de força bruta'\n        },\n        {\n          id: '4',\n          event_type: 'permission_escalation',\n          user_email: 'user@email.com',\n          ip_address: '203.0.113.1',\n          user_agent: 'Mozilla/5.0',\n          created_at: new Date(Date.now() - 10800000).toISOString(),\n          severity: 'critical',\n          description: 'Tentativa de acesso a recursos administrativos sem permissão'\n        }\n      ];\n\n      setSecurityEvents(mockEvents);\n\n      // Calculate security stats\n      const stats = {\n        totalEvents: mockEvents.length,\n        criticalEvents: mockEvents.filter(e => e.severity === 'critical').length,\n        suspiciousLogins: mockEvents.filter(e => e.event_type === 'failed_login' || e.event_type === 'multiple_failed_attempts').length,\n        blockedAttempts: mockEvents.filter(e => e.event_type === 'multiple_failed_attempts').length\n      };\n\n      setStats(stats);\n\n    } catch (error) {\n      console.error('Error loading security data:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados de segurança.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getSeverityBadge = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"w-3 h-3 mr-1\" />Crítico</Badge>;\n      case 'high':\n        return <Badge className=\"bg-orange-100 text-orange-800\"><AlertTriangle className=\"w-3 h-3 mr-1\" />Alto</Badge>;\n      case 'medium':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Eye className=\"w-3 h-3 mr-1\" />Médio</Badge>;\n      case 'low':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Baixo</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{severity}</Badge>;\n    }\n  };\n\n  const getEventIcon = (eventType: string) => {\n    switch (eventType) {\n      case 'login_attempt':\n        return <User className=\"w-4 h-4 text-green-600\" />;\n      case 'failed_login':\n        return <Lock className=\"w-4 h-4 text-red-600\" />;\n      case 'multiple_failed_attempts':\n        return <AlertTriangle className=\"w-4 h-4 text-orange-600\" />;\n      case 'permission_escalation':\n        return <Shield className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Activity className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold tracking-tight\">Dashboard de Segurança</h2>\n        <Button onClick={loadSecurityData} variant=\"outline\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Atualizar\n        </Button>\n      </div>\n\n      {/* Security Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Eventos</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalEvents}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Últimas 24 horas\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Eventos Críticos</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{stats.criticalEvents}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Requer atenção imediata\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Logins Suspeitos</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.suspiciousLogins}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Tentativas falhadas\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tentativas Bloqueadas</CardTitle>\n            <Shield className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.blockedAttempts}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Ataques prevenidos\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"events\">Eventos de Segurança</TabsTrigger>\n          <TabsTrigger value=\"policies\">Políticas</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2 text-green-600\" />\n                  Status de Segurança\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Autenticação 2FA</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Criptografia SSL</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Firewall</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Backup Automático</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Ativo\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2\" />\n                  Tendências de Segurança\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm\">Tentativas de Login</span>\n                      <span className=\"text-sm font-medium\">+12%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '75%' }}></div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm\">Eventos Suspeitos</span>\n                      <span className=\"text-sm font-medium text-red-600\">+3%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div className=\"bg-red-600 h-2 rounded-full\" style={{ width: '25%' }}></div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"events\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Eventos de Segurança Recentes</CardTitle>\n              <CardDescription>Monitoramento em tempo real de atividades suspeitas</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Usuário</TableHead>\n                    <TableHead>IP</TableHead>\n                    <TableHead>Severidade</TableHead>\n                    <TableHead>Descrição</TableHead>\n                    <TableHead>Data</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {securityEvents.map((event) => (\n                    <TableRow key={event.id}>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          {getEventIcon(event.event_type)}\n                          <span className=\"ml-2 capitalize\">\n                            {event.event_type.replace('_', ' ')}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          {event.user_email || 'N/A'}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <code className=\"text-xs bg-gray-100 px-1 py-0.5 rounded\">\n                          {event.ip_address}\n                        </code>\n                      </TableCell>\n                      <TableCell>\n                        {getSeverityBadge(event.severity)}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {event.description}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {new Date(event.created_at).toLocaleString('pt-BR')}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"policies\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Políticas de Segurança</CardTitle>\n              <CardDescription>Configurações e regras de segurança ativas</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium\">Política de Senhas</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Mínimo 8 caracteres, incluindo maiúsculas, minúsculas e números\n                      </p>\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>\n                  </div>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium\">Bloqueio por Tentativas</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Bloquear conta após 5 tentativas de login falhadas\n                      </p>\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>\n                  </div>\n                </div>\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium\">Sessão Automática</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Logout automático após 30 minutos de inatividade\n                      </p>\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Ativo</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/SpecificServicePlansManager.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlans'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlans, serviceType.table]","fix":{"range":[2124,2143],"text":"[loadPlans, serviceType.table]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5793,5796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5793,5796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7401,7404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7401,7404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":288,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":288,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8714,8717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8714,8717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Plus, Edit, Trash2, ArrowLeft } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport SimpleImageUpload from \"@/components/SimpleImageUpload\";\n\ninterface ServiceType {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  table: string;\n  color: string;\n}\n\ninterface ServicePlan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  image_url?: string;\n  active: boolean;\n  professional_id?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface SpecificServicePlansManagerProps {\n  serviceType: ServiceType;\n  onBack: () => void;\n}\n\nexport function SpecificServicePlansManager({ serviceType, onBack }: SpecificServicePlansManagerProps) {\n  const [plans, setPlans] = useState<ServicePlan[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingPlan, setEditingPlan] = useState<ServicePlan | null>(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [deleting, setDeleting] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    max_participants: \"10\",\n    image_url: \"\",\n    active: true,\n  });\n\n  useEffect(() => {\n    loadPlans();\n  }, [serviceType.table]);\n\n  const loadPlans = async () => {\n    try {\n      setLoading(true);\n      console.log(\"🔄 Carregando planos da tabela:\", serviceType.table);\n      \n      let query;\n      if (serviceType.table === 'planos_tatuador') {\n        query = supabase.from('planos_tatuador').select('*');\n      } else if (serviceType.table === 'planos_dentista') {\n        query = supabase.from('planos_dentista').select('*');\n      } else {\n        throw new Error(`Tabela não suportada: ${serviceType.table}`);\n      }\n      \n      const { data, error } = await query.order('created_at', { ascending: false });\n\n      if (error) {\n        console.error(\"❌ Erro ao carregar planos:\", error);\n        throw error;\n      }\n\n      console.log(\"✅ Planos carregados:\", data?.length || 0);\n      setPlans(data || []);\n    } catch (error) {\n      console.error(\"❌ Erro ao carregar planos:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar planos. Tente novamente.\",\n        variant: \"destructive\",\n      });\n      setPlans([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.price) {\n      toast({\n        title: \"Erro\",\n        description: \"Nome e preço são obrigatórios\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      console.log(\"💾 Salvando plano...\", { editingPlan, formData });\n\n      const planData = {\n        name: formData.name,\n        description: formData.description || null,\n        price: parseFloat(formData.price),\n        max_participants: parseInt(formData.max_participants),\n        image_url: formData.image_url || null,\n        active: formData.active,\n      };\n\n      if (editingPlan) {\n        console.log(\"✏️ Editando plano ID:\", editingPlan.id);\n        \n        let updateQuery;\n        if (serviceType.table === 'planos_tatuador') {\n          updateQuery = supabase.from('planos_tatuador');\n        } else if (serviceType.table === 'planos_dentista') {\n          updateQuery = supabase.from('planos_dentista');\n        } else {\n          throw new Error(`Tabela não suportada: ${serviceType.table}`);\n        }\n\n        const { data, error } = await updateQuery\n          .update({\n            ...planData,\n            updated_at: new Date().toISOString()\n          })\n          .eq('id', editingPlan.id)\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"❌ Erro ao atualizar:\", error);\n          throw error;\n        }\n\n        console.log(\"✅ Plano atualizado:\", data);\n        toast({\n          title: \"Sucesso\",\n          description: \"Plano atualizado com sucesso!\",\n        });\n      } else {\n        console.log(\"➕ Criando novo plano\");\n        \n        let insertQuery;\n        if (serviceType.table === 'planos_tatuador') {\n          insertQuery = supabase.from('planos_tatuador');\n        } else if (serviceType.table === 'planos_dentista') {\n          insertQuery = supabase.from('planos_dentista');\n        } else {\n          throw new Error(`Tabela não suportada: ${serviceType.table}`);\n        }\n\n        const { data, error } = await insertQuery\n          .insert(planData)\n          .select()\n          .single();\n\n        if (error) {\n          console.error(\"❌ Erro ao criar:\", error);\n          throw error;\n        }\n\n        console.log(\"✅ Plano criado:\", data);\n        toast({\n          title: \"Sucesso\",\n          description: \"Plano criado com sucesso!\",\n        });\n      }\n\n      resetForm();\n      setDialogOpen(false);\n      await loadPlans();\n    } catch (error: any) {\n      console.error(\"❌ Erro ao salvar plano:\", error);\n      const errorMessage = error?.message || \"Erro desconhecido\";\n      toast({\n        title: \"Erro\",\n        description: `Erro ao salvar plano: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleEdit = (plan: ServicePlan) => {\n    console.log(\"✏️ Editando plano:\", plan);\n    setEditingPlan(plan);\n    setFormData({\n      name: plan.name,\n      description: plan.description || \"\",\n      price: plan.price.toString(),\n      max_participants: plan.max_participants.toString(),\n      image_url: plan.image_url || \"\",\n      active: plan.active,\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = async (planId: string) => {\n    try {\n      setDeleting(planId);\n      console.log(\"🗑️ Excluindo plano:\", planId);\n      \n      let deleteQuery;\n      if (serviceType.table === 'planos_tatuador') {\n        deleteQuery = supabase.from('planos_tatuador');\n      } else if (serviceType.table === 'planos_dentista') {\n        deleteQuery = supabase.from('planos_dentista');\n      } else {\n        throw new Error(`Tabela não suportada: ${serviceType.table}`);\n      }\n\n      const { error } = await deleteQuery\n        .delete()\n        .eq('id', planId);\n\n      if (error) {\n        console.error(\"❌ Erro ao excluir:\", error);\n        throw error;\n      }\n\n      console.log(\"✅ Plano excluído com sucesso\");\n      toast({\n        title: \"Sucesso\",\n        description: \"Plano excluído com sucesso!\",\n      });\n      \n      await loadPlans();\n    } catch (error: any) {\n      console.error(\"❌ Erro ao excluir plano:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir plano. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDeleting(null);\n    }\n  };\n\n  const togglePlanStatus = async (planId: string, currentStatus: boolean) => {\n    try {\n      console.log(\"🔄 Alterando status do plano:\", planId, \"para:\", !currentStatus);\n      \n      let updateQuery;\n      if (serviceType.table === 'planos_tatuador') {\n        updateQuery = supabase.from('planos_tatuador');\n      } else if (serviceType.table === 'planos_dentista') {\n        updateQuery = supabase.from('planos_dentista');\n      } else {\n        throw new Error(`Tabela não suportada: ${serviceType.table}`);\n      }\n\n      const { error } = await updateQuery\n        .update({\n          active: !currentStatus,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', planId);\n\n      if (error) {\n        console.error(\"❌ Erro ao alterar status:\", error);\n        throw error;\n      }\n\n      console.log(\"✅ Status alterado com sucesso\");\n      toast({\n        title: \"Sucesso\",\n        description: `Plano ${!currentStatus ? \"ativado\" : \"desativado\"} com sucesso!`,\n      });\n      \n      await loadPlans();\n    } catch (error: any) {\n      console.error(\"❌ Erro ao alterar status:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao alterar status do plano\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      max_participants: \"10\",\n      image_url: \"\",\n      active: true,\n    });\n    setEditingPlan(null);\n  };\n\n  const handleNewPlan = () => {\n    resetForm();\n    setDialogOpen(true);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"outline\" onClick={onBack}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar\n        </Button>\n        <div>\n          <h2 className=\"text-3xl font-bold\">{serviceType.name}</h2>\n          <p className=\"text-muted-foreground\">{serviceType.description}</p>\n        </div>\n      </div>\n\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-xl font-semibold\">\n          {plans.length} plano(s) cadastrado(s)\n        </h3>\n        \n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={handleNewPlan}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo Plano\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[95vh] overflow-hidden flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle>\n                {editingPlan ? \"Editar Plano\" : \"Novo Plano\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingPlan ? \"Edite as informações do plano\" : \"Preencha os dados para criar um novo plano\"}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"flex-1 overflow-y-auto px-2 max-h-[calc(90vh-120px)]\">\n              <form onSubmit={handleSubmit} className=\"space-y-6 pb-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Nome do Plano *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                      placeholder=\"Ex: Tatuagem Pequena\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"price\">Preço (R$) *</Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      value={formData.price}\n                      onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                      placeholder=\"0.00\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Descrição</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder=\"Descreva os detalhes do plano...\"\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"max_participants\">Máximo de Participantes</Label>\n                  <Input\n                    id=\"max_participants\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.max_participants}\n                    onChange={(e) => setFormData({ ...formData, max_participants: e.target.value })}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Imagem do Plano</Label>\n                  <SimpleImageUpload\n                    onUpload={(url) => setFormData({ ...formData, image_url: url })}\n                    label=\"Escolher imagem do plano\"\n                    currentImageUrl={formData.image_url}\n                    showPreview={true}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"active\"\n                    checked={formData.active}\n                    onCheckedChange={(checked) => setFormData({ ...formData, active: checked })}\n                  />\n                  <Label htmlFor=\"active\">Plano ativo</Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-6 border-t sticky bottom-0 bg-background\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setDialogOpen(false)}\n                    disabled={submitting}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={submitting}>\n                    {submitting ? \"Salvando...\" : editingPlan ? \"Atualizar Plano\" : \"Criar Plano\"}\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Planos Cadastrados</span>\n            <span className=\"text-sm font-normal text-muted-foreground\">\n              {plans.length} {plans.length === 1 ? 'plano' : 'planos'}\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"max-h-[80vh] overflow-y-auto\">\n          {plans.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"mx-auto w-24 h-24 bg-muted rounded-full flex items-center justify-center mb-4\">\n                <Plus className=\"h-12 w-12 text-muted-foreground\" />\n              </div>\n              <p className=\"text-lg font-medium mb-2\">Nenhum plano cadastrado</p>\n              <p className=\"text-muted-foreground mb-6\">\n                Comece criando seu primeiro plano de {serviceType.name.toLowerCase()}\n              </p>\n              <Button onClick={handleNewPlan} size=\"lg\">\n                <Plus className=\"h-5 w-5 mr-2\" />\n                Criar Primeiro Plano\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {plans.map((plan) => (\n                <Card key={plan.id} className=\"border-2 hover:shadow-lg transition-shadow overflow-hidden\">\n                  <CardHeader className=\"pb-3\">\n                    {plan.image_url && (\n                      <div className=\"relative mb-2\">\n                        <img\n                          src={plan.image_url}\n                          alt={plan.name}\n                          className=\"w-full h-56 object-cover rounded-md\"\n                        />\n                        <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent rounded-md\" />\n                      </div>\n                    )}\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h4 className=\"font-semibold\">{plan.name}</h4>\n                        <p className=\"text-2xl font-bold text-primary\">\n                          R$ {plan.price.toFixed(2)}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch\n                          checked={plan.active}\n                          onCheckedChange={() => togglePlanStatus(plan.id, plan.active)}\n                        />\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {plan.description && (\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {plan.description}\n                      </p>\n                    )}\n                    <p className=\"text-xs text-muted-foreground mb-3\">\n                      Máx. {plan.max_participants} participantes\n                    </p>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(plan)}\n                        className=\"flex-1\"\n                      >\n                        <Edit className=\"h-4 w-4 mr-1\" />\n                        Editar\n                      </Button>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            disabled={deleting === plan.id}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Confirmar Exclusão</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Tem certeza que deseja excluir o plano \"{plan.name}\"? \n                              Esta ação não pode ser desfeita.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(plan.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Excluir\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/admin/UserMarketplaceManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/auth/AccountTypeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/auth/AuthForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5314,5317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5314,5317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, ArrowLeft, Eye, EyeOff } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { formatCpf, validateCpf } from '@/utils/cpfValidator';\n\ninterface AuthFormProps {\n  mode: 'login' | 'register';\n  accountType: 'user' | 'professional' | 'influencer';\n  onBack: () => void;\n  onSuccess: () => void;\n}\n\nexport const AuthForm: React.FC<AuthFormProps> = ({ \n  mode, \n  accountType, \n  onBack, \n  onSuccess \n}) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [cpf, setCpf] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  const { toast } = useToast();\n\n  const accountTypeLabels = {\n    user: 'Usuário',\n    professional: 'Profissional', \n    influencer: 'Influenciador'\n  };\n\n  const validateEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n\n  const checkExistingAccountTypes = async (email: string) => {\n    try {\n      const { data, error } = await supabase.rpc('get_existing_account_types', {\n        check_email: email\n      });\n      \n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Erro ao verificar contas existentes:', error);\n      return [];\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      // Validações básicas\n      if (!validateEmail(email)) {\n        throw new Error('Email inválido');\n      }\n\n      if (password.length < 6) {\n        throw new Error('A senha deve ter pelo menos 6 caracteres');\n      }\n\n      if (mode === 'register') {\n        // Validação adicional do CPF para usuários e profissionais\n        if ((accountType === 'user' || accountType === 'professional') && !cpf) {\n          throw new Error('CPF é obrigatório para este tipo de conta');\n        }\n\n        if (cpf && !validateCpf(cpf)) {\n          throw new Error('CPF inválido. Verifique os números digitados');\n        }\n\n        // Verificar se já existe conta com esse email e tipo\n        const { data: existsData, error: existsError } = await supabase.rpc(\n          'validate_unique_email_by_role', \n          {\n            check_email: email,\n            check_role: accountType\n          }\n        );\n\n        if (existsError) throw existsError;\n\n        if (!existsData) {\n          // Verificar que tipos de conta já existem para mostrar erro mais específico\n          const existingAccounts = await checkExistingAccountTypes(email);\n          const accountTypeNames = existingAccounts.map(acc => \n            accountTypeLabels[acc.account_type as keyof typeof accountTypeLabels]\n          ).join(', ');\n          \n          throw new Error(\n            `E-mail já cadastrado como: ${accountTypeNames}. Use outro e-mail ou faça login.`\n          );\n        }\n\n        // Registrar usuário\n        const { data: authData, error: authError } = await supabase.auth.signUp({\n          email,\n          password,\n          options: {\n            emailRedirectTo: `${window.location.origin}/`,\n            data: {\n              full_name: fullName,\n              role: accountType,\n              phone: phone || null,\n              cpf: cpf || null\n            }\n          }\n        });\n\n        if (authError) throw authError;\n\n        if (authData.user && !authData.session) {\n          toast({\n            title: \"Cadastro realizado!\",\n            description: \"Verifique seu email para confirmar a conta.\",\n          });\n        } else {\n          toast({\n            title: \"Cadastro realizado com sucesso!\",\n            description: `Bem-vindo ao painel ${accountTypeLabels[accountType]}.`,\n          });\n        }\n\n        onSuccess();\n      } else {\n        // Login\n        const { data: loginData, error: loginError } = await supabase.rpc(\n          'login_with_account_type',\n          {\n            login_email: email,\n            requested_role: accountType\n          }\n        );\n\n        if (loginError) throw loginError;\n\n        if (!loginData || loginData.length === 0 || !loginData[0].valid_login) {\n          const errorMsg = loginData?.[0]?.error_message || 'Email ou senha incorretos';\n          throw new Error(errorMsg);\n        }\n\n        // Fazer login real\n        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\n          email,\n          password\n        });\n\n        if (authError) throw authError;\n\n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: `Bem-vindo de volta ao painel ${accountTypeLabels[accountType]}.`,\n        });\n\n        onSuccess();\n      }\n    } catch (error: any) {\n      console.error('Erro na autenticação:', error);\n      setError(error.message || 'Erro na autenticação');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <Button \n          variant=\"ghost\" \n          size=\"sm\" \n          onClick={onBack}\n          className=\"w-fit p-0 h-auto\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar\n        </Button>\n        <CardTitle className=\"text-2xl\">\n          {mode === 'login' ? 'Entrar' : 'Criar Conta'}\n        </CardTitle>\n        <CardDescription>\n          {mode === 'login' ? 'Entre' : 'Cadastre-se'} como {accountTypeLabels[accountType]}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {mode === 'register' && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"fullName\">Nome Completo</Label>\n                <Input\n                  id=\"fullName\"\n                  type=\"text\"\n                  value={fullName}\n                  onChange={(e) => setFullName(e.target.value)}\n                  placeholder=\"Seu nome completo\"\n                  required\n                  disabled={loading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Telefone (opcional)</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  placeholder=\"(11) 99999-9999\"\n                  disabled={loading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cpf\">\n                  CPF {accountType === 'user' ? '(obrigatório para pagamentos)' : '(obrigatório)'}\n                  <span className=\"text-red-500 ml-1\">*</span>\n                </Label>\n                <Input\n                  id=\"cpf\"\n                  type=\"text\"\n                  value={cpf}\n                  onChange={(e) => setCpf(formatCpf(e.target.value))}\n                  placeholder=\"000.000.000-00\"\n                  required={accountType === 'user' || accountType === 'professional'}\n                  disabled={loading}\n                  maxLength={14}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  {accountType === 'user' && 'Necessário para criar pagamentos e comprar planos'}\n                </p>\n              </div>\n            </>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"seu@email.com\"\n              required\n              disabled={loading}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Senha</Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Digite sua senha\"\n                required\n                disabled={loading}\n                className=\"pr-10\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3\"\n                onClick={() => setShowPassword(!showPassword)}\n                disabled={loading}\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            {mode === 'register' && (\n              <p className=\"text-xs text-muted-foreground\">\n                Mínimo de 6 caracteres\n              </p>\n            )}\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n            {loading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                {mode === 'login' ? 'Entrando...' : 'Cadastrando...'}\n              </>\n            ) : (\n              mode === 'login' ? 'Entrar' : 'Criar Conta'\n            )}\n          </Button>\n        </form>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            {mode === 'login' ? 'Não tem conta?' : 'Já tem conta?'}\n            <Button\n              variant=\"link\"\n              className=\"p-0 ml-1 h-auto\"\n              onClick={() => window.location.href = mode === 'login' ? '/cadastro' : '/login'}\n            >\n              {mode === 'login' ? 'Cadastre-se' : 'Faça login'}\n            </Button>\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/CommissionHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/Gamification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/InfluencerDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInfluencerData'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadInfluencerData, user]","fix":{"range":[1782,1788],"text":"[loadInfluencerData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2389,2392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2389,2392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3815,3818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3815,3818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4223,4226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4223,4226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4342,4345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4342,4345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5062,5065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5062,5065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  DollarSign, \n  Link as LinkIcon, \n  Users, \n  TrendingUp,\n  Copy,\n  Share,\n  Download,\n  Eye\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface ReferralLink {\n  id: string;\n  referral_code: string;\n  link_url: string;\n  clicks_count: number;\n  conversions_count: number;\n  total_commission: number;\n  active: boolean;\n  created_at: string;\n}\n\ninterface Commission {\n  id: string;\n  client_name: string;\n  participation_amount: number;\n  commission_amount: number;\n  status: string;\n  created_at: string;\n  plan_name: string;\n}\n\ninterface InfluencerStats {\n  total_referrals: number;\n  total_conversions: number;\n  pending_commission: number;\n  paid_commission: number;\n  total_clicks: number;\n}\n\nexport function InfluencerDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [referralLinks, setReferralLinks] = useState<ReferralLink[]>([]);\n  const [commissions, setCommissions] = useState<Commission[]>([]);\n  const [stats, setStats] = useState<InfluencerStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [generatingLink, setGeneratingLink] = useState(false);\n\n  useEffect(() => {\n    loadInfluencerData();\n  }, [user]);\n\n  const loadInfluencerData = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      // Buscar perfil do influenciador\n      const { data: influencerData } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('role', 'influencer')\n        .single();\n\n      if (!influencerData) {\n        toast({\n          title: \"Erro\",\n          description: \"Dados do influenciador não encontrados.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Carregar links de referência reais\n      const links: any[] = [];\n      const { data: myProfile } = await supabase\n        .from('profiles')\n        .select('user_id, referral_code, created_at')\n        .eq('user_id', user.id)\n        .single();\n\n      if (myProfile?.referral_code) {\n        links.push({\n          id: myProfile.referral_code,\n          referral_code: myProfile.referral_code,\n          link_url: `/inscrever?ref=${myProfile.referral_code}`,\n          clicks_count: 0,\n          conversions_count: 0,\n          total_commission: 0,\n          active: true,\n          created_at: myProfile.created_at || new Date().toISOString()\n        });\n      }\n\n      const { data: planLinks } = await supabase\n        .from('plan_referral_links')\n        .select('id, referral_code, link_url, clicks_count, conversions_count, total_commission, active, created_at')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (planLinks && planLinks.length > 0) {\n        for (const l of planLinks) {\n          links.push({\n            id: l.id,\n            referral_code: l.referral_code,\n            link_url: l.link_url,\n            clicks_count: l.clicks_count || 0,\n            conversions_count: l.conversions_count || 0,\n            total_commission: Number(l.total_commission || 0),\n            active: l.active,\n            created_at: l.created_at\n          });\n        }\n      }\n\n      setReferralLinks(links as any);\n\n      // Carregar comissões usando credit_transactions e influencer_commissions\n      const { data: commissionsData } = await supabase\n        .from('credit_transactions')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('type', 'earned')\n        .order('created_at', { ascending: false });\n\n      const formattedFromCredits: Commission[] = (commissionsData || [])\n        .filter((t: any) => t.source_type === 'referral_bonus' || (t.description || '').toLowerCase().includes('comiss'))\n        .map((t: any) => ({\n          id: t.id,\n          client_name: 'Indicação',\n          participation_amount: Number(t.amount) * 10, // aproximação do total\n          commission_amount: Number(t.amount),\n          status: t.status || 'completed',\n          created_at: t.created_at || new Date().toISOString(),\n          plan_name: t.description || 'Comissão de Indicação'\n        }));\n\n      const { data: influencerComms } = await supabase\n        .from('influencer_commissions')\n        .select('id, entry_value, commission_amount, status, created_at')\n        .eq('influencer_id', user.id)\n        .order('created_at', { ascending: false });\n\n      const formattedFromInfluencer: Commission[] = (influencerComms || []).map((c: any) => ({\n        id: c.id,\n        client_name: 'Indicação',\n        participation_amount: Number(c.entry_value || 0),\n        commission_amount: Number(c.commission_amount || 0),\n        status: c.status || 'pending',\n        created_at: c.created_at,\n        plan_name: 'Comissão de Indicação'\n      }));\n\n      const allComms: Commission[] = [...formattedFromInfluencer, ...formattedFromCredits];\n      setCommissions(allComms);\n\n      const totalReferrals = links.length;\n      const totalConversions = links.reduce((sum, link) => sum + (link.conversions_count || 0), 0);\n      const totalClicks = links.reduce((sum, link) => sum + (link.clicks_count || 0), 0);\n      const pendingCommission = allComms.filter(c => c.status === 'pending').reduce((sum, c) => sum + c.commission_amount, 0);\n      const paidCommission = allComms.filter(c => c.status === 'paid').reduce((sum, c) => sum + c.commission_amount, 0);\n\n      setStats({\n        total_referrals: totalReferrals,\n        total_conversions: totalConversions,\n        pending_commission: pendingCommission,\n        paid_commission: paidCommission,\n        total_clicks: totalClicks\n      });\n\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar seus dados.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateReferralLink = async (planId?: string) => {\n    if (!user) return;\n\n    setGeneratingLink(true);\n    try {\n      // Simulate generating a referral link (no RPC function exists)\n      const newLink = {\n        id: `ref-${Date.now()}`,\n        referral_code: `REF-${Date.now().toString().slice(-8)}`,\n        link_url: `/ref/${user.id}`,\n        clicks_count: 0,\n        conversions_count: 0,\n        total_commission: 0,\n        active: true,\n        created_at: new Date().toISOString()\n      };\n      \n      setReferralLinks(prev => [newLink, ...prev]);\n\n      toast({\n        title: \"Link gerado!\",\n        description: \"Seu link de indicação foi criado com sucesso.\",\n      });\n\n    } catch (error) {\n      console.error('Erro ao gerar link:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao gerar link de indicação.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setGeneratingLink(false);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copiado!\",\n      description: \"Link copiado para a área de transferência.\",\n    });\n  };\n\n  const shareLink = (link: string) => {\n    if (navigator.share) {\n      navigator.share({\n        title: 'Participe do Amigo do Peito',\n        text: 'Venha fazer parte do nosso sistema de grupos!',\n        url: link\n      });\n    } else {\n      copyToClipboard(link);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('pt-BR');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pendente</Badge>;\n      case 'paid':\n        return <Badge variant=\"default\">Pago</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Dashboard do Influenciador</h2>\n        <p className=\"text-muted-foreground\">\n          Gerencie suas indicações e acompanhe suas comissões\n        </p>\n      </div>\n\n      {/* Estatísticas */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total de Links</CardTitle>\n              <LinkIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.total_referrals}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total de Cliques</CardTitle>\n              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{stats.total_clicks}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Conversões</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{stats.total_conversions}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Comissão Pendente</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">{formatCurrency(stats.pending_commission)}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Recebido</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600\">{formatCurrency(stats.paid_commission)}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Meus Links de Indicação */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Meus Links de Indicação</span>\n            <Button onClick={() => generateReferralLink()} disabled={generatingLink}>\n              {generatingLink ? 'Gerando...' : 'Gerar Novo Link'}\n            </Button>\n          </CardTitle>\n          <CardDescription>\n            Links para compartilhar e ganhar comissões\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {referralLinks.length === 0 ? (\n            <Alert>\n              <AlertDescription>\n                Você ainda não possui links de indicação. Clique em \"Gerar Novo Link\" para começar.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"space-y-4\">\n              {referralLinks.map((link) => (\n                <div key={link.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-semibold\">Link #{link.referral_code}</h4>\n                    <Badge variant={link.active ? 'default' : 'secondary'}>\n                      {link.active ? 'Ativo' : 'Inativo'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"bg-muted p-2 rounded mb-3\">\n                    <Input\n                      value={`${window.location.origin}${link.link_url}`}\n                      readOnly\n                      className=\"bg-transparent border-none\"\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 mb-3\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-blue-600\">{link.clicks_count}</div>\n                      <div className=\"text-xs text-muted-foreground\">Cliques</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-green-600\">{link.conversions_count}</div>\n                      <div className=\"text-xs text-muted-foreground\">Conversões</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-bold text-purple-600\">{formatCurrency(link.total_commission)}</div>\n                      <div className=\"text-xs text-muted-foreground\">Comissão</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyToClipboard(`${window.location.origin}${link.link_url}`)}\n                    >\n                      <Copy className=\"h-4 w-4 mr-1\" />\n                      Copiar\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => shareLink(`${window.location.origin}${link.link_url}`)}\n                    >\n                      <Share className=\"h-4 w-4 mr-1\" />\n                      Compartilhar\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Histórico de Comissões */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Histórico de Comissões</CardTitle>\n          <CardDescription>\n            Todas as suas comissões e seus status\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {commissions.length === 0 ? (\n            <Alert>\n              <AlertDescription>\n                Nenhuma comissão registrada ainda. Compartilhe seus links para começar a ganhar!\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Cliente</TableHead>\n                  <TableHead>Plano</TableHead>\n                  <TableHead>Valor da Entrada</TableHead>\n                  <TableHead>Comissão</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Data</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {commissions.map((commission) => (\n                  <TableRow key={commission.id}>\n                    <TableCell className=\"font-medium\">{commission.client_name}</TableCell>\n                    <TableCell>{commission.plan_name}</TableCell>\n                    <TableCell>{formatCurrency(commission.participation_amount)}</TableCell>\n                    <TableCell className=\"font-bold text-green-600\">\n                      {formatCurrency(commission.commission_amount)}\n                    </TableCell>\n                    <TableCell>{getStatusBadge(commission.status)}</TableCell>\n                    <TableCell>{formatDate(commission.created_at)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/InfluencerProducts.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadAffiliateStats' and 'loadProducts'. Either include them or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadAffiliateStats, loadProducts, user]","fix":{"range":[1722,1728],"text":"[loadAffiliateStats, loadProducts, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2786,2789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2786,2789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2812,2815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2812,2815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3435,3438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3435,3438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3549,3552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3549,3552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3667,3670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3667,3670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4062,4065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4062,4065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'affiliateUrl' is never reassigned. Use 'const' instead.","line":150,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":150,"endColumn":23,"fix":{"range":[4554,4641],"text":"const affiliateUrl = `${window.location.origin}/inscrever?ref=${profile?.referral_code}`;"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5036,5039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5036,5039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Package, \n  DollarSign, \n  Share2, \n  Search,\n  ExternalLink,\n  Copy,\n  TrendingUp,\n  Target,\n  Eye,\n  BarChart3,\n  Link2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface Product {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  full_price: number;\n  down_payment: number;\n  image_url: string;\n  professional_id: string;\n  professional_name?: string;\n  created_at: string;\n  my_affiliate_link?: string;\n  my_clicks?: number;\n  my_conversions?: number;\n  my_commission_earned?: number;\n}\n\ninterface AffiliateStats {\n  total_links: number;\n  total_clicks: number;\n  total_conversions: number;\n  total_commission: number;\n  conversion_rate: number;\n}\n\nexport const InfluencerProducts = () => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [affiliateStats, setAffiliateStats] = useState<AffiliateStats>({\n    total_links: 0,\n    total_clicks: 0,\n    total_conversions: 0,\n    total_commission: 0,\n    conversion_rate: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadProducts();\n      loadAffiliateStats();\n    }\n  }, [user]);\n\n  const loadProducts = async () => {\n    try {\n      // Use products table\n      const { data: servicesData, error } = await supabase\n        .from('products')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform services into product format\n      const mockProducts = (servicesData || []).map(service => ({\n        id: service.id,\n        title: service.name,\n        description: service.description,\n        category: service.category,\n        full_price: service.price,\n        down_payment: service.price * 0.3, // 30% down payment\n        image_url: '',\n        professional_id: service.professional_id,\n        professional_name: 'Profissional',\n        created_at: service.created_at,\n        my_affiliate_link: `${window.location.origin}/ref/${service.id}`,\n        my_clicks: Math.floor(Math.random() * 100),\n        my_conversions: Math.floor(Math.random() * 10),\n        my_commission_earned: Math.floor(Math.random() * 500)\n      }));\n\n      setProducts(mockProducts as any);\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao carregar produtos\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadAffiliateStats = async () => {\n    try {\n      if (!user) return;\n\n      // Contar links reais do usuário\n      const { data: planLinks } = await supabase\n        .from('plan_referral_links')\n        .select('id, clicks_count, conversions_count, total_commission')\n        .eq('user_id', user.id);\n\n      const totalLinks = planLinks?.length || 0;\n      const totalClicks = (planLinks || []).reduce((sum: number, l: any) => sum + (l.clicks_count || 0), 0);\n      const totalConversions = (planLinks || []).reduce((sum: number, l: any) => sum + (l.conversions_count || 0), 0);\n      const totalCommission = (planLinks || []).reduce((sum: number, l: any) => sum + Number(l.total_commission || 0), 0);\n      const conversionRate = totalClicks > 0 ? (totalConversions / totalClicks) * 100 : 0;\n\n      setAffiliateStats({\n        total_links: totalLinks,\n        total_clicks: totalClicks,\n        total_conversions: totalConversions,\n        total_commission: totalCommission,\n        conversion_rate: conversionRate\n      });\n    } catch (error: any) {\n      console.error('Error loading affiliate stats:', error);\n    }\n  };\n\n  const createAffiliateLink = async (productId: string) => {\n    try {\n      if (!user) throw new Error('Não autenticado');\n\n      // Gerar/obter link por plano customizado, se existir\n      // Caso não haja plano, usar referral global do profile\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('referral_code')\n        .eq('user_id', user.id)\n        .single();\n\n      let affiliateUrl = `${window.location.origin}/inscrever?ref=${profile?.referral_code}`;\n      \n      // Update the product in state\n      setProducts(prev => prev.map(product => \n        product.id === productId \n          ? { ...product, my_affiliate_link: affiliateUrl }\n          : product\n      ));\n\n      toast({\n        title: \"Link de afiliado criado!\",\n        description: \"Seu link único foi gerado com sucesso.\",\n      });\n\n      return affiliateUrl;\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao criar link\",\n        description: \"Erro ao gerar link de afiliação.\",\n        variant: \"destructive\"\n      });\n      return null;\n    }\n  };\n\n  const copyAffiliateLink = async (link: string) => {\n    try {\n      await navigator.clipboard.writeText(link);\n      toast({\n        title: \"Link copiado!\",\n        description: \"O link de afiliado foi copiado para a área de transferência.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar link\",\n        description: \"Não foi possível copiar o link.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const shareProduct = async (product: Product) => {\n    let shareLink = product.my_affiliate_link;\n    \n    if (!shareLink) {\n      shareLink = await createAffiliateLink(product.id);\n      if (!shareLink) return;\n    }\n\n    const shareData = {\n      title: product.title,\n      text: `${product.description}\\n\\nConfira este produto incrível!`,\n      url: shareLink\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        copyAffiliateLink(shareLink);\n      }\n    } else {\n      copyAffiliateLink(shareLink);\n    }\n  };\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const calculateCommission = (price: number) => {\n    return price * 0.25; // 25% sobre a entrada\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Produtos para Afiliação</h2>\n          <p className=\"text-muted-foreground\">\n            Encontre produtos para promover e ganhe 25% de comissão\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <Link2 className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Links Ativos</p>\n                <p className=\"text-2xl font-bold\">{affiliateStats.total_links}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <Eye className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Cliques</p>\n                <p className=\"text-2xl font-bold\">{affiliateStats.total_clicks}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-full\">\n                <Target className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Conversões</p>\n                <p className=\"text-2xl font-bold\">{affiliateStats.total_conversions}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-full\">\n                <BarChart3 className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Taxa Conversão</p>\n                <p className=\"text-2xl font-bold\">{affiliateStats.conversion_rate.toFixed(1)}%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Comissões</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(affiliateStats.total_commission)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Buscar produtos...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <select\n          value={selectedCategory}\n          onChange={(e) => setSelectedCategory(e.target.value)}\n          className=\"px-3 py-2 border rounded-md text-sm min-w-[200px]\"\n        >\n          <option value=\"all\">Todas as categorias</option>\n          <option value=\"servicos-profissionais\">Serviços Profissionais</option>\n          <option value=\"produtos-digitais\">Produtos Digitais</option>\n          <option value=\"cursos-online\">Cursos Online</option>\n          <option value=\"consultoria\">Consultoria</option>\n          <option value=\"eventos\">Eventos</option>\n          <option value=\"outros\">Outros</option>\n        </select>\n      </div>\n\n      {/* Products List */}\n      {filteredProducts.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nenhum produto encontrado</h3>\n            <p className=\"text-muted-foreground\">\n              {searchQuery ? \"Tente ajustar sua busca\" : \"Ainda não há produtos disponíveis para afiliação\"}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredProducts.map((product) => (\n            <Card key={product.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  {/* Product Image */}\n                  <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center overflow-hidden\">\n                    {product.image_url ? (\n                      <img\n                        src={product.image_url}\n                        alt={product.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <Package className=\"h-8 w-8 text-muted-foreground\" />\n                    )}\n                  </div>\n\n                  {/* Product Info */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">{product.title}</h3>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          {product.description}\n                        </p>\n                        <div className=\"flex items-center gap-4 text-sm mb-2\">\n                          <span>Preço: {formatCurrency(product.full_price)}</span>\n                          <span>Entrada: {formatCurrency(product.down_payment)}</span>\n                          <Badge variant=\"outline\">{product.category}</Badge>\n                          <span className=\"text-muted-foreground\">por {product.professional_name}</span>\n                        </div>\n                        <div className=\"text-sm font-medium text-green-600\">\n                          Sua comissão: {formatCurrency(calculateCommission(product.down_payment))} por venda\n                        </div>\n                      </div>\n\n                      {/* Affiliate Stats */}\n                      {product.my_affiliate_link && (\n                        <div className=\"text-right text-sm\">\n                          <div className=\"font-semibold\">{product.my_clicks || 0} cliques</div>\n                          <div className=\"text-green-600\">{product.my_conversions || 0} vendas</div>\n                          <div className=\"text-muted-foreground\">\n                            {formatCurrency(product.my_commission_earned || 0)} ganho\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center gap-2 mt-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"default\"\n                        onClick={() => shareProduct(product)}\n                      >\n                        <Share2 className=\"h-4 w-4 mr-1\" />\n                        {product.my_affiliate_link ? 'Compartilhar' : 'Criar Link & Compartilhar'}\n                      </Button>\n\n                      {product.my_affiliate_link && (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => copyAffiliateLink(product.my_affiliate_link!)}\n                          >\n                            <Copy className=\"h-4 w-4 mr-1\" />\n                            Copiar Link\n                          </Button>\n\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => window.open(product.my_affiliate_link, '_blank')}\n                          >\n                            <ExternalLink className=\"h-4 w-4 mr-1\" />\n                            Ver Página\n                          </Button>\n                        </>\n                      )}\n\n                      {!product.my_affiliate_link && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => createAffiliateLink(product.id)}\n                        >\n                          <Link2 className=\"h-4 w-4 mr-1\" />\n                          Criar Link de Afiliado\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/InfluencerWallet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/PromoMaterials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/ReferralLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/influencer/StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/marketplace/Marketplace.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useUserCredits\" is called in function \"handleCreditPayment\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":132,"column":27,"nodeType":"Identifier","endLine":132,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7520,7523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7520,7523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Package, \n  DollarSign, \n  Search,\n  ShoppingCart,\n  Star,\n  Grid3X3,\n  List,\n  Eye,\n  User,\n  CreditCard,\n  ExternalLink\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useCredits } from \"@/hooks/useCredits\";\nimport { useMarketplaceProducts } from \"@/hooks/useOptimizedData\";\n\ninterface Product {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  full_price: number;\n  down_payment: number;\n  image_url: string;\n  external_link?: string;\n  visibility: 'client' | 'professional' | 'both';\n  professional_id: string;\n  professional_name?: string;\n  professional_avatar?: string;\n  is_active: boolean;\n  created_at: string;\n  total_sales?: number;\n  rating?: number;\n}\n\nconst CATEGORIES = [\n  { value: \"all\", label: \"Todos\" },\n  { value: \"produtos-gerais\", label: \"Produtos Gerais\" },\n  { value: \"insumos-tecnicos\", label: \"Insumos Técnicos\" },\n  { value: \"servicos-profissionais\", label: \"Serviços Profissionais\" },\n  { value: \"produtos-digitais\", label: \"Produtos Digitais\" },\n  { value: \"cursos-online\", label: \"Cursos Online\" },\n  { value: \"consultoria\", label: \"Consultoria\" },\n  { value: \"eventos\", label: \"Eventos\" },\n  { value: \"outros\", label: \"Outros\" }\n];\n\nexport const Marketplace = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState<\"newest\" | \"popular\" | \"price_low\" | \"price_high\">(\"newest\");\n  const [showCreditPayment, setShowCreditPayment] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const { balance, useCredits: useUserCredits } = useCredits();\n\n  // Usar hook otimizado com cache para produtos\n  const { data: products = [], loading } = useMarketplaceProducts();\n\n  // Determinar tipo de usuário baseado no contexto\n  const getUserType = (): 'client' | 'professional' => {\n    if (user?.role === 'professional') {\n      return 'professional';\n    }\n    return 'client'; // Por padrão, assumir cliente\n  };\n\n  const userType = getUserType();\n\n  // Filtrar e ordenar produtos com useMemo para otimização\n  const filteredAndSortedProducts = useMemo(() => {\n    // Verificação de segurança para garantir que products é um array\n    if (!products || !Array.isArray(products)) {\n      return [];\n    }\n    \n    return products\n      .filter(product => {\n        const matchesSearch = product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                             product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                             (product.professional_name || '').toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory = selectedCategory === \"all\" || product.category === selectedCategory;\n        \n        // Filtro de visibilidade baseado no tipo de usuário\n        const matchesVisibility = product.visibility === 'both' || \n                                 product.visibility === userType ||\n                                 (userType === 'professional'); // Profissionais veem tudo\n        \n        // Esconder insumos técnicos para clientes\n        const hideForClients = userType === 'client' && product.category === 'insumos-tecnicos';\n        \n        return matchesSearch && matchesCategory && matchesVisibility && !hideForClients;\n      })\n      .sort((a, b) => {\n        switch (sortBy) {\n          case \"popular\":\n            return (b.total_sales || 0) - (a.total_sales || 0);\n          case \"price_low\":\n            return a.down_payment - b.down_payment;\n          case \"price_high\":\n            return b.down_payment - a.down_payment;\n          default: // newest\n            return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n        }\n      });\n  }, [products, searchQuery, selectedCategory, sortBy, userType]);\n\n  const handlePurchase = (product: Product) => {\n    // Se é produto dropshipping, redireciona para link externo\n    if (product.external_link) {\n      window.open(product.external_link, '_blank');\n      return;\n    }\n\n    // Abre modal para escolher forma de pagamento\n    setSelectedProduct(product);\n    setShowCreditPayment(true);\n  };\n\n  const handleCreditPayment = async () => {\n    if (!selectedProduct || !user) return;\n\n    const success = await useUserCredits(\n      selectedProduct.down_payment,\n      'marketplace_purchase',\n      `Compra: ${selectedProduct.title}`,\n      selectedProduct.id\n    );\n\n    if (success) {\n      toast({\n        title: \"Compra realizada!\",\n        description: `Produto \"${selectedProduct.title}\" adquirido com créditos.`,\n      });\n      setShowCreditPayment(false);\n      setSelectedProduct(null);\n    }\n  };\n\n  const handleCardPayment = () => {\n    toast({\n      title: \"Funcionalidade em desenvolvimento\",\n      description: \"Pagamento com cartão será implementado em breve.\",\n    });\n  };\n\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-4\">\n                  <div className=\"h-32 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  <div className=\"h-8 bg-muted rounded\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">Marketplace</h1>\n        <p className=\"text-muted-foreground\">\n          Descubra produtos e serviços incríveis de profissionais qualificados\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Buscar produtos, serviços ou profissionais...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        <select\n          value={selectedCategory}\n          onChange={(e) => setSelectedCategory(e.target.value)}\n          className=\"px-3 py-2 border rounded-md text-sm min-w-[180px]\"\n        >\n          {CATEGORIES.map((category) => (\n            <option key={category.value} value={category.value}>\n              {category.label}\n            </option>\n          ))}\n        </select>\n\n        <select\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value as any)}\n          className=\"px-3 py-2 border rounded-md text-sm min-w-[140px]\"\n        >\n          <option value=\"newest\">Mais recentes</option>\n          <option value=\"popular\">Mais populares</option>\n          <option value=\"price_low\">Menor preço</option>\n          <option value=\"price_high\">Maior preço</option>\n        </select>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"grid\")}\n          >\n            <Grid3X3 className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"list\")}\n          >\n            <List className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Results Count */}\n      <div className=\"text-sm text-muted-foreground\">\n        {filteredAndSortedProducts.length} produto{filteredAndSortedProducts.length !== 1 ? 's' : ''} encontrado{filteredAndSortedProducts.length !== 1 ? 's' : ''}\n      </div>\n\n      {/* Products Grid/List */}\n      {filteredAndSortedProducts.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhum produto encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                {searchQuery || selectedCategory !== \"all\" \n                  ? \"Tente ajustar seus filtros de busca\" \n                  : \"Nenhum produto foi cadastrado pelos administradores ainda. Apenas produtos reais e aprovados são exibidos no marketplace.\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n      ) : (\n        <div className={viewMode === \"grid\" \n          ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" \n          : \"space-y-4\"\n        }>\n          {filteredAndSortedProducts.map((product) => (\n            <Card key={product.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n              <div className={viewMode === \"list\" ? \"flex\" : \"\"}>\n                {/* Product Image */}\n                <div className={`bg-muted flex items-center justify-center overflow-hidden ${\n                  viewMode === \"list\" ? \"w-48 h-32\" : \"h-48\"\n                }`}>\n                  {product.image_url ? (\n                    <img\n                      src={product.image_url}\n                      alt={product.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  ) : (\n                    <Package className=\"h-12 w-12 text-muted-foreground\" />\n                  )}\n                </div>\n\n                {/* Product Content */}\n                <div className=\"flex-1\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg line-clamp-2\">{product.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground mt-1 line-clamp-2\">\n                          {product.description}\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\" className=\"ml-2\">\n                        {CATEGORIES.find(c => c.value === product.category)?.label || product.category}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"pt-0\">\n                    {/* Professional Info */}\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <div className=\"w-6 h-6 bg-muted rounded-full flex items-center justify-center overflow-hidden\">\n                        {product.professional_avatar ? (\n                          <img\n                            src={product.professional_avatar}\n                            alt={product.professional_name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <User className=\"h-3 w-3 text-muted-foreground\" />\n                        )}\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">{product.professional_name}</span>\n                    </div>\n\n                    {/* Rating and Sales */}\n                    <div className=\"flex items-center gap-4 mb-3 text-sm\">\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        <span>{product.rating}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{product.total_sales || 0} vendas</span>\n                      </div>\n                    </div>\n\n                    {/* Pricing */}\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Preço total:</span>\n                        <span className=\"text-lg font-bold\">{formatCurrency(product.full_price)}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">Para começar:</span>\n                        <span className=\"text-xl font-bold text-green-600\">\n                          {formatCurrency(product.down_payment)}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Action Button */}\n                    <Button \n                      onClick={() => handlePurchase(product)}\n                      className=\"w-full\"\n                      variant={product.external_link ? \"outline\" : \"default\"}\n                    >\n                      {product.external_link ? (\n                        <>\n                          <ExternalLink className=\"h-4 w-4 mr-2\" />\n                          Ver Produto\n                        </>\n                      ) : (\n                        <>\n                          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                          Começar Agora\n                        </>\n                      )}\n                    </Button>\n\n                    <p className=\"text-xs text-muted-foreground text-center mt-2\">\n                      {product.external_link \n                        ? \"Link externo - Redirecionamento\" \n                        : `Adquira apenas com ${formatCurrency(product.down_payment)} de entrada`\n                      }\n                    </p>\n                  </CardContent>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Modal de Pagamento com Créditos */}\n      {showCreditPayment && selectedProduct && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardHeader>\n              <CardTitle>Finalizar Compra</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedProduct.title}\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-lg font-semibold\">\n                  Valor: {formatCurrency(selectedProduct.down_payment)}\n                </p>\n                {balance && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Seus créditos: {formatCurrency(balance.availableCredits)}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex flex-col gap-2\">\n                <Button \n                  onClick={handleCreditPayment}\n                  disabled={!balance || balance.availableCredits < selectedProduct.down_payment}\n                  className=\"w-full\"\n                >\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Pagar com Créditos\n                </Button>\n                \n                <Button \n                  onClick={handleCardPayment}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <CreditCard className=\"h-4 w-4 mr-2\" />\n                  Pagar com Cartão\n                </Button>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => {\n                    setShowCreditPayment(false);\n                    setSelectedProduct(null);\n                  }}\n                  variant=\"ghost\"\n                  className=\"w-full\"\n                >\n                  Cancelar\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/marketplace/ProductForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3311,3314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3311,3314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { SimpleFileUpload } from \"@/components/ui/simple-file-upload\";\nimport { Upload, Package, DollarSign, Tag, Image, Save, ExternalLink, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface ServiceFormData {\n  name: string;\n  description: string;\n  category: string;\n  price: number;\n  duration: string;\n}\n\nconst CATEGORIES = [\n  { value: \"produtos-gerais\", label: \"Produtos Gerais\" },\n  { value: \"insumos-tecnicos\", label: \"Insumos Técnicos\" },\n  { value: \"servicos-profissionais\", label: \"Serviços Profissionais\" },\n  { value: \"produtos-digitais\", label: \"Produtos Digitais\" },\n  { value: \"cursos-online\", label: \"Cursos Online\" },\n  { value: \"consultoria\", label: \"Consultoria\" },\n  { value: \"eventos\", label: \"Eventos\" },\n  { value: \"outros\", label: \"Outros\" }\n];\n\nexport const ProductForm = () => {\n  const [formData, setFormData] = useState<ServiceFormData>({\n    name: '',\n    description: '',\n    category: 'produtos-gerais',\n    price: 0,\n    duration: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const handleInputChange = (field: keyof ServiceFormData, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) {\n      toast({\n        title: \"Erro de autenticação\",\n        description: \"Você precisa estar logado para criar serviços.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Get professional ID from profiles table\n      const { data: professional } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('role', 'professional')\n        .single();\n\n      if (!professional) {\n        toast({\n          title: \"Erro\",\n          description: \"Você precisa ser um profissional cadastrado para criar serviços.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('products')\n        .insert({\n          professional_id: professional.id,\n          name: formData.name,\n          description: formData.description,\n          category: formData.category,\n          price: formData.price,\n          stock_quantity: -1\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      toast({\n        title: \"Serviço criado!\",\n        description: \"Seu serviço foi cadastrado com sucesso e já está disponível no marketplace.\",\n      });\n\n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        category: 'produtos-gerais',\n        price: 0,\n        duration: ''\n      });\n\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao criar serviço\",\n        description: error.message || \"Erro inesperado ao cadastrar o serviço.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isFormValid = formData.name && formData.description && formData.category && formData.price > 0;\n\n  return (\n    <div className=\"w-full min-h-screen overflow-y-auto\">\n      <Card className=\"max-w-4xl mx-auto my-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Cadastrar Novo Serviço\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"max-h-none overflow-y-auto\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Nome */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"flex items-center gap-2\">\n              <Tag className=\"h-4 w-4\" />\n              Nome do Serviço\n            </Label>\n            <Input\n              id=\"name\"\n              placeholder=\"Ex: Consultoria em Marketing Digital\"\n              value={formData.name}\n              onChange={(e) => handleInputChange(\"name\", e.target.value)}\n              required\n            />\n          </div>\n\n          {/* Descrição */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Descrição</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Descreva detalhadamente seu serviço...\"\n              value={formData.description}\n              onChange={(e) => handleInputChange(\"description\", e.target.value)}\n              rows={4}\n              required\n            />\n          </div>\n\n          {/* Categoria */}\n          <div className=\"space-y-2\">\n            <Label>Categoria</Label>\n            <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione a categoria\" />\n              </SelectTrigger>\n              <SelectContent>\n                {CATEGORIES.map((category) => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Preço */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Preço (R$)\n            </Label>\n            <Input\n              type=\"number\"\n              min=\"0\"\n              step=\"0.01\"\n              value={formData.price || ''}\n              onChange={(e) => handleInputChange('price', parseFloat(e.target.value) || 0)}\n              placeholder=\"Ex: 500.00\"\n              required\n            />\n          </div>\n\n          {/* Duração */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"duration\">Duração</Label>\n            <Input\n              id=\"duration\"\n              placeholder=\"Ex: 2 horas, 1 dia, 1 semana\"\n              value={formData.duration}\n              onChange={(e) => handleInputChange(\"duration\", e.target.value)}\n              required\n            />\n          </div>\n\n          {/* Botão de Submit */}\n          <Button\n            type=\"submit\"\n            disabled={!isFormValid || loading}\n            className=\"w-full\"\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {loading ? \"Cadastrando...\" : \"Cadastrar Serviço\"}\n          </Button>\n\n          {/* Informações sobre comissões */}\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <h4 className=\"font-medium mb-2\">Informações sobre comissões:</h4>\n            <div className=\"text-sm text-muted-foreground space-y-1\">\n              <p>• Você receberá o valor integral do serviço quando contratado</p>\n              <p>• Influenciadores ganham comissão quando indicam seu serviço</p>\n              <p>• Um link único será gerado automaticamente para compartilhamento</p>\n            </div>\n          </div>\n        </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/marketplace/ProductFormEnhanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3399,3402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3399,3402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5516,5519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5516,5519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { SimpleFileUpload } from \"@/components/ui/simple-file-upload\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Upload, Package, DollarSign, Tag, Image, Save, ExternalLink, Eye, Users, ShoppingCart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface ProductFormData {\n  name: string;\n  description: string;\n  category: string;\n  price: number;\n  target_audience: 'professional' | 'consumer' | 'both';\n  image_url?: string;\n  external_link?: string;\n  featured: boolean;\n  stock_quantity: number;\n}\n\ninterface Category {\n  name: string;\n  description: string;\n}\n\nconst TARGET_AUDIENCES = [\n  { value: \"professional\", label: \"Profissionais\", icon: Users, description: \"Insumos e materiais para profissionais\" },\n  { value: \"consumer\", label: \"Consumidor Final\", icon: ShoppingCart, description: \"Produtos/serviços para clientes finais\" },\n  { value: \"both\", label: \"Ambos\", icon: Package, description: \"Disponível para ambos os públicos\" }\n];\n\nexport const ProductFormEnhanced = ({ onProductCreated }: { onProductCreated?: () => void }) => {\n  const [formData, setFormData] = useState<ProductFormData>({\n    name: '',\n    description: '',\n    category: '',\n    price: 0,\n    target_audience: 'consumer',\n    image_url: '',\n    external_link: '',\n    featured: false,\n    stock_quantity: -1\n  });\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    loadCategories();\n  }, []);\n\n  const loadCategories = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('product_categories')\n        .select('name, description')\n        .order('name');\n\n      if (error) throw error;\n      setCategories(data || []);\n    } catch (error) {\n      console.error('Erro ao carregar categorias:', error);\n    }\n  };\n\n  const handleInputChange = (field: keyof ProductFormData, value: string | number | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleImageUpload = async (file: File) => {\n    setUploading(true);\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}.${fileExt}`;\n      const filePath = `products/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('product-images')\n        .upload(filePath, file);\n\n      if (uploadError) throw uploadError;\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('product-images')\n        .getPublicUrl(filePath);\n\n      setFormData(prev => ({ ...prev, image_url: publicUrl }));\n      \n      toast({\n        title: \"Imagem enviada!\",\n        description: \"A imagem foi carregada com sucesso.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Erro no upload\",\n        description: error.message || \"Erro ao fazer upload da imagem.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!user) {\n      toast({\n        title: \"Erro de autenticação\",\n        description: \"Você precisa estar logado para criar produtos.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // Get professional ID from profiles table\n      const { data: professional } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('role', 'professional')\n        .single();\n\n      if (!professional) {\n        toast({\n          title: \"Erro\",\n          description: \"Você precisa ser um profissional cadastrado para criar produtos.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from('products')\n        .insert({\n          professional_id: professional.id,\n          name: formData.name,\n          description: formData.description,\n          category: formData.category,\n          price: formData.price,\n          target_audience: formData.target_audience,\n          image_url: formData.image_url || null,\n          external_link: formData.external_link || null,\n          featured: formData.featured,\n          stock_quantity: formData.stock_quantity,\n          active: true\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      toast({\n        title: \"Produto criado!\",\n        description: \"Seu produto foi cadastrado com sucesso e já está disponível no marketplace.\",\n      });\n\n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        category: '',\n        price: 0,\n        target_audience: 'consumer',\n        image_url: '',\n        external_link: '',\n        featured: false,\n        stock_quantity: -1\n      });\n\n      onProductCreated?.();\n\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao criar produto\",\n        description: error.message || \"Erro inesperado ao cadastrar o produto.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isFormValid = formData.name && formData.description && formData.category && formData.price > 0;\n\n  return (\n    <div className=\"w-full\">\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Cadastrar Novo Produto/Serviço\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Público Alvo */}\n            <div className=\"space-y-4\">\n              <Label className=\"text-base font-medium\">Público Alvo</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {TARGET_AUDIENCES.map((audience) => {\n                  const Icon = audience.icon;\n                  return (\n                    <Card \n                      key={audience.value} \n                      className={`cursor-pointer transition-all hover:scale-105 ${\n                        formData.target_audience === audience.value \n                          ? 'ring-2 ring-primary bg-primary/5' \n                          : 'hover:bg-muted/50'\n                      }`}\n                      onClick={() => handleInputChange('target_audience', audience.value as 'professional' | 'consumer' | 'both')}\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <Icon className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n                        <h3 className=\"font-medium\">{audience.label}</h3>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{audience.description}</p>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Nome */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\" className=\"flex items-center gap-2\">\n                <Tag className=\"h-4 w-4\" />\n                Nome do Produto/Serviço\n              </Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Ex: Kit Agulhas Profissionais ou Harmonização Facial\"\n                value={formData.name}\n                onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                required\n              />\n            </div>\n\n            {/* Descrição */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Descrição Detalhada</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Descreva detalhadamente seu produto/serviço, benefícios, diferencieis...\"\n                value={formData.description}\n                onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                rows={4}\n                required\n              />\n            </div>\n\n            {/* Categoria */}\n            <div className=\"space-y-2\">\n              <Label>Categoria</Label>\n              <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione a categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.name} value={category.name}>\n                      {category.description || category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Preço */}\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4\" />\n                Preço (R$)\n              </Label>\n              <Input\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                value={formData.price || ''}\n                onChange={(e) => handleInputChange('price', parseFloat(e.target.value) || 0)}\n                placeholder=\"Ex: 500.00\"\n                required\n              />\n            </div>\n\n            {/* Upload de Imagem */}\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center gap-2\">\n                <Image className=\"h-4 w-4\" />\n                Imagem do Produto\n              </Label>\n              <SimpleFileUpload\n                onFileSelect={handleImageUpload}\n                accept=\"image/*\"\n              />\n              {formData.image_url && (\n                <div className=\"mt-2\">\n                  <img \n                    src={formData.image_url} \n                    alt=\"Preview\" \n                    className=\"max-w-xs h-32 object-cover rounded border\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Link Externo (Dropshipping) */}\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center gap-2\">\n                <ExternalLink className=\"h-4 w-4\" />\n                Link Externo (Opcional)\n              </Label>\n              <Input\n                placeholder=\"https://exemplo.com/produto (para dropshipping ou links externos)\"\n                value={formData.external_link}\n                onChange={(e) => handleInputChange(\"external_link\", e.target.value)}\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                Use este campo para produtos de dropshipping ou links para agendamento externo\n              </p>\n            </div>\n\n            {/* Controle de Estoque */}\n            <div className=\"space-y-2\">\n              <Label>Controle de Estoque</Label>\n              <Input\n                type=\"number\"\n                min=\"-1\"\n                value={formData.stock_quantity}\n                onChange={(e) => handleInputChange('stock_quantity', parseInt(e.target.value) || -1)}\n                placeholder=\"-1 para ilimitado\"\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                -1 = Estoque ilimitado | 0 = Fora de estoque | Número positivo = Quantidade disponível\n              </p>\n            </div>\n\n            {/* Produto em Destaque */}\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"featured\"\n                checked={formData.featured}\n                onCheckedChange={(checked) => handleInputChange('featured', checked)}\n              />\n              <Label htmlFor=\"featured\" className=\"flex items-center gap-2\">\n                <Eye className=\"h-4 w-4\" />\n                Produto em Destaque\n              </Label>\n            </div>\n\n            {/* Botão de Submit */}\n            <Button\n              type=\"submit\"\n              disabled={!isFormValid || loading}\n              className=\"w-full\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {loading ? \"Cadastrando...\" : \"Cadastrar Produto/Serviço\"}\n            </Button>\n\n            {/* Informações sobre comissões */}\n            <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Sistema de Comissões:</h4>\n              <div className=\"text-sm text-muted-foreground space-y-1\">\n                <p>• <strong>Venda Direta:</strong> Você recebe 50% do valor, plataforma 50%</p>\n                <p>• <strong>Venda com Influenciador:</strong> Você 50%, Influenciador 20%, Plataforma 30%</p>\n                <p>• Links únicos são gerados automaticamente para compartilhamento</p>\n              </div>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/marketplace/ProductListEnhanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1233,1236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1233,1236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, refreshTrigger]","fix":{"range":[2046,2062],"text":"[loadData, refreshTrigger]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { ShoppingBag, Edit, Trash2, Search, Filter, Users, ShoppingCart, Package, ExternalLink, Star } from 'lucide-react';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string | null;\n  price: number;\n  category: string | null;\n  target_audience: string;\n  image_url: string | null;\n  external_link: string | null;\n  featured: boolean;\n  stock_quantity: number;\n  active: boolean;\n  created_at: string;\n  professional_id: string;\n  profiles?: {\n    full_name: string;\n  };\n}\n\ninterface Category {\n  name: string;\n  description: string;\n}\n\nconst TARGET_AUDIENCE_LABELS: Record<string, { label: string; icon: any; color: string }> = {\n  professional: { label: \"Profissionais\", icon: Users, color: \"bg-blue-100 text-blue-700\" },\n  consumer: { label: \"Consumidor\", icon: ShoppingCart, color: \"bg-green-100 text-green-700\" },\n  both: { label: \"Ambos\", icon: Package, color: \"bg-purple-100 text-purple-700\" }\n};\n\nexport const ProductListEnhanced = ({ refreshTrigger }: { refreshTrigger?: number }) => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [audienceFilter, setAudienceFilter] = useState('all');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadData();\n  }, [refreshTrigger]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // Load products with professional info\n      const { data: productsData, error: productsError } = await supabase\n        .from('products')\n        .select(`\n          *,\n          profiles!products_professional_id_fkey(full_name)\n        `)\n        .order('created_at', { ascending: false });\n\n      if (productsError) throw productsError;\n\n      // Load categories\n      const { data: categoriesData, error: categoriesError } = await supabase\n        .from('product_categories')\n        .select('name, description')\n        .order('name');\n\n      if (categoriesError) throw categoriesError;\n\n      setProducts((productsData || []).map(product => ({\n        ...product,\n        target_audience: product.target_audience as 'professional' | 'consumer' | 'both'\n      })));\n      setCategories(categoriesData || []);\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar produtos/categorias.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleProductStatus = async (productId: string, currentStatus: boolean) => {\n    try {\n      const { error } = await supabase\n        .from('products')\n        .update({ active: !currentStatus })\n        .eq('id', productId);\n\n      if (error) throw error;\n\n      setProducts(prev => \n        prev.map(product => \n          product.id === productId \n            ? { ...product, active: !currentStatus }\n            : product\n        )\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: `Produto ${!currentStatus ? 'ativado' : 'desativado'} com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao atualizar status do produto.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const deleteProduct = async (productId: string) => {\n    if (!confirm('Tem certeza que deseja excluir este produto?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('products')\n        .delete()\n        .eq('id', productId);\n\n      if (error) throw error;\n\n      setProducts(prev => prev.filter(product => product.id !== productId));\n\n      toast({\n        title: \"Sucesso\",\n        description: \"Produto excluído com sucesso.\",\n      });\n    } catch (error) {\n      console.error('Erro ao excluir produto:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir produto.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filteredProducts = products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (product.description?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n    const matchesCategory = categoryFilter === 'all' || product.category === categoryFilter;\n    const matchesAudience = audienceFilter === 'all' || product.target_audience === audienceFilter;\n    \n    return matchesSearch && matchesCategory && matchesAudience;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filtros */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filtros\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Busca */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Buscar</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Nome ou descrição...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            {/* Filtro por Categoria */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Categoria</label>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas as categorias\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas as categorias</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.name} value={category.name}>\n                      {category.description || category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Filtro por Público */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Público Alvo</label>\n              <Select value={audienceFilter} onValueChange={setAudienceFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos os públicos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos os públicos</SelectItem>\n                  <SelectItem value=\"professional\">Profissionais</SelectItem>\n                  <SelectItem value=\"consumer\">Consumidor Final</SelectItem>\n                  <SelectItem value=\"both\">Ambos</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de Produtos */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <ShoppingBag className=\"h-5 w-5\" />\n              Produtos/Serviços ({filteredProducts.length})\n            </div>\n          </CardTitle>\n          <CardDescription>\n            Gerencie todos os produtos e serviços do marketplace\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Imagem</TableHead>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Profissional</TableHead>\n                  <TableHead>Preço</TableHead>\n                  <TableHead>Público</TableHead>\n                  <TableHead>Categoria</TableHead>\n                  <TableHead>Estoque</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredProducts.map((product) => {\n                  const audienceInfo = TARGET_AUDIENCE_LABELS[product.target_audience] || TARGET_AUDIENCE_LABELS.consumer;\n                  const AudienceIcon = audienceInfo.icon;\n                  \n                  return (\n                    <TableRow key={product.id}>\n                      <TableCell>\n                        {product.image_url ? (\n                          <img \n                            src={product.image_url} \n                            alt={product.name}\n                            className=\"w-12 h-12 object-cover rounded\"\n                          />\n                        ) : (\n                          <div className=\"w-12 h-12 bg-muted rounded flex items-center justify-center\">\n                            <Package className=\"h-6 w-6 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"font-medium flex items-center gap-2\">\n                            {product.name}\n                            {product.featured && <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />}\n                            {product.external_link && <ExternalLink className=\"h-4 w-4 text-muted-foreground\" />}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {product.description}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {product.profiles?.full_name || 'N/A'}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        R$ {product.price.toFixed(2)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={audienceInfo.color}>\n                          <AudienceIcon className=\"h-3 w-3 mr-1\" />\n                          {audienceInfo.label}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {product.category || 'N/A'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {product.stock_quantity === -1 ? (\n                          <Badge variant=\"secondary\">Ilimitado</Badge>\n                        ) : product.stock_quantity === 0 ? (\n                          <Badge variant=\"destructive\">Esgotado</Badge>\n                        ) : (\n                          <Badge variant=\"default\">{product.stock_quantity}</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {product.active ? (\n                          <Badge className=\"bg-green-100 text-green-700\">Ativo</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Inativo</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => toggleProductStatus(product.id, product.active)}\n                          >\n                            {product.active ? 'Desativar' : 'Ativar'}\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => deleteProduct(product.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {filteredProducts.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium\">Nenhum produto encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm || categoryFilter !== 'all' || audienceFilter !== 'all' \n                  ? 'Tente ajustar os filtros de busca.' \n                  : 'Cadastre o primeiro produto do marketplace.'}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/materials/MaterialLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/optimized/LazyRoutes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/optimized/OptimizedDataCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/GroupProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/PlanCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/PlanDetails.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlanDetails'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlanDetails, planId, user]","fix":{"range":[2156,2170],"text":"[loadPlanDetails, planId, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5409,5412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5409,5412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { \n  ArrowLeft, \n  Users, \n  DollarSign, \n  Calendar, \n  Clock, \n  CheckCircle, \n  Phone, \n  Mail,\n  MapPin\n} from \"lucide-react\";\n\ninterface PlanDetailsProps {\n  planId?: string;\n}\n\ninterface PlanData {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  category: string;\n  professional_id?: string;\n}\n\ninterface GroupData {\n  id: string;\n  group_number: number;\n  status: string;\n  current_participants: number;\n  max_participants: number;\n  current_amount: number;\n  target_amount: number;\n  contemplated_at: string | null;\n  winner_id: string | null;\n  created_at: string;\n}\n\ninterface ParticipationData {\n  id: string;\n  amount_paid: number;\n  joined_at: string;\n  status: string;\n}\n\ninterface ProfessionalData {\n  id: string;\n  full_name: string;\n  phone: string;\n  email: string;\n  // Add more fields as needed\n}\n\nconst PlanDetails: React.FC<PlanDetailsProps> = ({ planId: propPlanId }) => {\n  const { planId: paramPlanId } = useParams();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  const planId = propPlanId || paramPlanId;\n  \n  const [planData, setPlanData] = useState<PlanData | null>(null);\n  const [groupData, setGroupData] = useState<GroupData | null>(null);\n  const [participationData, setParticipationData] = useState<ParticipationData | null>(null);\n  const [professionalData, setProfessionalData] = useState<ProfessionalData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (planId && user) {\n      loadPlanDetails();\n    }\n  }, [planId, user]);\n\n  const loadPlanDetails = async () => {\n    try {\n      setLoading(true);\n      console.log('🔍 Carregando detalhes do plano:', planId, 'para usuário:', user?.id);\n\n      // 1. Buscar dados do plano nas mesmas tabelas que PlansSelection\n      let plan = null;\n      let planCategory = '';\n\n      // Tentar buscar em planos_tatuador primeiro\n      const { data: tattooPlan, error: tattooError } = await supabase\n        .from('planos_tatuador')\n        .select('*')\n        .eq('id', planId)\n        .eq('active', true)\n        .single();\n\n      if (tattooPlan) {\n        plan = { ...tattooPlan, category: 'tattoo' };\n        planCategory = 'tattoo';\n      } else {\n        // Se não encontrou, buscar em planos_dentista\n        const { data: dentalPlan, error: dentalError } = await supabase\n          .from('planos_dentista')\n          .select('*')\n          .eq('id', planId)\n          .eq('active', true)\n          .single();\n\n        if (dentalPlan) {\n          plan = { ...dentalPlan, category: 'dental' };\n          planCategory = 'dental';\n        } else {\n          // Por último, tentar custom_plans\n          const { data: customPlan, error: customError } = await supabase\n            .from('custom_plans')\n            .select('*')\n            .eq('id', planId)\n            .eq('active', true)\n            .single();\n\n          if (customPlan) {\n            plan = { ...customPlan, category: 'service' };\n            planCategory = 'service';\n          }\n        }\n      }\n\n      if (!plan) {\n        console.error('❌ Plano não encontrado em nenhuma tabela:', planId);\n        throw new Error('Plano não encontrado');\n      }\n\n      console.log('✅ Plano encontrado:', plan.name, 'Categoria:', planCategory);\n      setPlanData({\n        ...plan,\n        category: planCategory\n      });\n\n      // 2. Buscar participação do usuário\n      const { data: participation, error: participationError } = await supabase\n        .from('group_participants')\n        .select(`\n          *,\n          plan_groups (*)\n        `)\n        .eq('user_id', user?.id);\n\n      if (participationError) {\n        console.error('❌ Erro ao buscar participação:', participationError);\n      } else if (participation && participation.length > 0) {\n        // Encontrar participação relacionada a este plano\n        const relevantParticipation = participation.find(p => \n          p.plan_groups && p.plan_groups.service_id === planId\n        );\n        \n        if (relevantParticipation) {\n          setParticipationData(relevantParticipation);\n          setGroupData(relevantParticipation.plan_groups);\n          console.log('✅ Participação encontrada no grupo:', relevantParticipation.plan_groups.group_number);\n        }\n      }\n\n      // 3. Buscar dados do profissional se disponível\n      if (plan.professional_id) {\n        const { data: professional, error: professionalError } = await supabase\n          .from('profiles')\n          .select('id, full_name, phone, email')\n          .eq('id', plan.professional_id)\n          .single();\n\n        if (!professionalError && professional) {\n          setProfessionalData(professional);\n          console.log('✅ Profissional carregado:', professional.full_name);\n        }\n      }\n\n    } catch (error: any) {\n      console.error('💥 Erro ao carregar detalhes:', error);\n      setError(error.message);\n      toast({\n        title: \"Erro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'contemplated':\n        return <Badge className=\"bg-green-500 text-white\">Contemplado</Badge>;\n      case 'active':\n        return <Badge className=\"bg-blue-500 text-white\">Ativo</Badge>;\n      case 'forming':\n        return <Badge className=\"bg-yellow-500 text-white\">Formando</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getProgressPercentage = () => {\n    if (!groupData) return 0;\n    return Math.round((groupData.current_participants / groupData.max_participants) * 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center justify-center min-h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !planData) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <h3 className=\"text-xl font-semibold mb-2\">Erro ao carregar plano</h3>\n              <p className=\"text-muted-foreground mb-4\">{error || 'Plano não encontrado'}</p>\n              <Button onClick={() => navigate('/usuario/planos')}>\n                Voltar aos Planos\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Button \n            variant=\"outline\" \n            size=\"icon\"\n            onClick={() => navigate(-1)}\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">{planData.name}</h1>\n            <p className=\"text-muted-foreground\">Detalhes do seu plano</p>\n          </div>\n        </div>\n\n        {/* Plan Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Informações do Plano</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"font-medium\">Nome do Plano</p>\n                <p className=\"text-muted-foreground\">{planData.name}</p>\n              </div>\n              <div>\n                <p className=\"font-medium\">Categoria</p>\n                <p className=\"text-muted-foreground capitalize\">{planData.category}</p>\n              </div>\n              <div>\n                <p className=\"font-medium\">Valor Total</p>\n                <p className=\"text-muted-foreground\">R$ {planData.price.toLocaleString()}</p>\n              </div>\n              <div>\n                <p className=\"font-medium\">Máximo de Participantes</p>\n                <p className=\"text-muted-foreground\">{planData.max_participants} pessoas</p>\n              </div>\n            </div>\n            {planData.description && (\n              <div>\n                <p className=\"font-medium\">Descrição</p>\n                <p className=\"text-muted-foreground\">{planData.description}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Group Progress */}\n        {groupData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Progresso do Grupo {groupData.group_number}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span>Participantes</span>\n                <span>{groupData.current_participants}/{groupData.max_participants}</span>\n              </div>\n              <Progress value={getProgressPercentage()} className=\"w-full\" />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"font-medium\">Status do Grupo</p>\n                  {getStatusBadge(groupData.status)}\n                </div>\n                <div>\n                  <p className=\"font-medium\">Data de Criação</p>\n                  <p className=\"text-muted-foreground\">\n                    {new Date(groupData.created_at).toLocaleDateString('pt-BR')}\n                  </p>\n                </div>\n              </div>\n\n              {groupData.contemplated_at && (\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center gap-2 text-green-800\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <p className=\"font-medium\">Grupo Contemplado!</p>\n                  </div>\n                  <p className=\"text-green-700 mt-1\">\n                    Contemplado em: {new Date(groupData.contemplated_at).toLocaleDateString('pt-BR')}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* User Participation */}\n        {participationData && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Sua Participação</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"font-medium\">Valor Pago</p>\n                  <p className=\"text-muted-foreground\">R$ {participationData.amount_paid.toLocaleString()}</p>\n                </div>\n                <div>\n                  <p className=\"font-medium\">Data de Entrada</p>\n                  <p className=\"text-muted-foreground\">\n                    {new Date(participationData.joined_at).toLocaleDateString('pt-BR')}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"font-medium\">Status</p>\n                  {getStatusBadge(participationData.status)}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Professional Information */}\n        {professionalData && groupData?.status === 'contemplated' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-green-600\">\n                <CheckCircle className=\"h-5 w-5\" />\n                Você foi contemplado! Entre em contato com o profissional para agendar seu serviço.\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"font-medium\">{professionalData.full_name}</p>\n                  <p className=\"text-muted-foreground\">Profissional responsável</p>\n                </div>\n                \n                <div className=\"flex flex-col gap-3\">\n                  {professionalData.phone && (\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{professionalData.phone}</span>\n                    </div>\n                  )}\n                  \n                  {professionalData.email && (\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{professionalData.email}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2 mt-4\">\n                  {professionalData.phone && (\n                    <Button \n                      onClick={() => window.open(`tel:${professionalData.phone}`)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Phone className=\"h-4 w-4\" />\n                      Ligar\n                    </Button>\n                  )}\n                  \n                  {professionalData.email && (\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => window.open(`mailto:${professionalData.email}`)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Mail className=\"h-4 w-4\" />\n                      Email\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Actions */}\n        {!participationData && (\n          <Card>\n            <CardContent className=\"pt-6 text-center\">\n              <p className=\"text-muted-foreground mb-4\">\n                Você ainda não está participando deste plano.\n              </p>\n              <Button onClick={() => navigate('/usuario/planos')}>\n                Ver Planos Disponíveis\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PlanDetails;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/PlansGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/PlansInfo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/plans/PlansSelection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1407,1410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1407,1410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlans'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlans]","fix":{"range":[1555,1557],"text":"[loadPlans]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2425,2428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2425,2428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2819,2822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2819,2822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11324,11327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11324,11327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Package, Star, Users, Clock } from \"lucide-react\";\nimport { PaymentMethodSelector } from \"@/components/ui/payment-method-selector\";\nimport { PaymentModal } from \"@/components/ui/payment-modal\";\nimport { PlansGrid } from \"./PlansGrid\";\nimport { PlansInfo } from \"./PlansInfo\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string | null;\n  price: number;\n  entryPrice: number; // 10% do preço\n  category: string;\n  features: string[];\n  popular?: boolean;\n  icon: React.ReactNode;\n  max_participants: number;\n  duration_months: number;\n  image_url?: string | null;\n}\n\n// Planos agora vêm do banco de dados\n\ninterface PlansSelectionProps {\n  onSelectPlan?: (plan: Plan) => void;\n  selectedPlanId?: string;\n}\n\nexport const PlansSelection = ({ onSelectPlan, selectedPlanId }: PlansSelectionProps) => {\n  const [plans, setPlans] = useState<Plan[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [processingPayment, setProcessingPayment] = useState(false);\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [paymentMethodModalOpen, setPaymentMethodModalOpen] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n  const [paymentData, setPaymentData] = useState<any>(null);\n  const [paymentMethod, setPaymentMethod] = useState('pix');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadPlans();\n  }, []);\n\n  const loadPlans = async () => {\n    try {\n      console.log('🔍 [PLANS] Carregando planos unificados...');\n      \n      const { data: response, error } = await supabase.functions.invoke('unified-plans-loader', {\n        body: { include_inactive: false, admin_view: false }\n      });\n\n      if (error) {\n        console.error('❌ [PLANS] Erro na edge function:', error);\n        throw error;\n      }\n\n      if (!response?.success) {\n        console.error('❌ [PLANS] Resposta inválida:', response);\n        throw new Error(response?.errors?.join(', ') || 'Resposta inválida do servidor');\n      }\n\n      const allPlans = response.plans || [];\n      console.log('📊 [PLANS] Estatísticas:', response.stats);\n      console.log('📝 [PLANS] Total carregados:', allPlans.length);\n\n      // **VALIDAÇÃO ROBUSTA DOS PLANOS**\n      const validPlans = allPlans.filter((plan: any) => {\n        const isValid = plan.id && plan.name && plan.price > 0 && plan.active;\n        if (!isValid) {\n          console.warn('⚠️ [PLANS] Plano inválido ignorado:', plan);\n        }\n        return isValid;\n      });\n\n      console.log('✅ [PLANS] Planos válidos:', validPlans.length);\n\n      // **FORMATAÇÃO PARA O FRONTEND**\n      const formattedPlans: Plan[] = validPlans.map((plan: any, index: number) => ({\n        id: plan.id,\n        name: plan.name,\n        description: plan.description || `${getCategoryLabel(plan.category)} - ${plan.name}`,\n        price: plan.price,\n        entryPrice: Math.round(plan.price * 0.1), // 10% entrada\n        category: plan.category,\n        features: plan.description \n          ? [plan.description, `Tipo: ${plan.tipo_transacao}`, `Fonte: ${plan.table_source}`] \n          : [`${getCategoryLabel(plan.category)} completo`, `Tipo: ${plan.tipo_transacao}`],\n        popular: plan.categoria === 'tattoo' && index === 0, // Primeiro tattoo é popular\n        icon: getCategoryIcon(plan.category),\n        max_participants: plan.max_participants || 10,\n        duration_months: plan.duration_months || 1,\n        image_url: plan.image_url\n      }));\n\n      setPlans(formattedPlans);\n      console.log('✅ [PLANS] Planos formatados:', formattedPlans.length);\n      \n      if (formattedPlans.length === 0) {\n        console.warn('⚠️ [PLANS] Nenhum plano válido encontrado');\n        toast({\n          title: \"Nenhum plano disponível\",\n          description: \"Não há planos ativos no momento. Contate o administrador.\",\n          variant: \"default\",\n        });\n      }\n      \n      // **LOG DE ERROS SE HOUVER**\n      if (response.errors && response.errors.length > 0) {\n        console.warn('⚠️ [PLANS] Erros durante carregamento:', response.errors);\n        toast({\n          title: \"Aviso\",\n          description: `${formattedPlans.length} planos carregados com alguns problemas.`,\n          variant: \"default\",\n        });\n      }\n      \n    } catch (error) {\n      console.error('❌ [PLANS] Erro crítico ao carregar:', error);\n      toast({\n        title: \"Erro no Sistema\",\n        description: \"Falha ao carregar planos. Recarregue a página ou contate o suporte.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCategoryIcon = (category: string | null) => {\n    if (!category) return <Package className=\"h-6 w-6\" />;\n    \n    switch (category.toLowerCase()) {\n      case 'tattoo': return <Star className=\"h-6 w-6\" />;\n      case 'dental': return <Users className=\"h-6 w-6\" />;\n      case 'service': return <Package className=\"h-6 w-6\" />;\n      default: return <Clock className=\"h-6 w-6\" />;\n    }\n  };\n\n  const handleSelectPlan = (plan: Plan) => {\n    console.log('🎯 Plano selecionado:', plan.name);\n    \n    // Limpar dados antigos do modal antes de selecionar novo plano\n    setPaymentData(null);\n    setSelectedPlan(plan);\n    setPaymentMethodModalOpen(true);\n  };\n\n  const handlePaymentMethodSelect = async (method: 'pix' | 'boleto') => {\n    if (!selectedPlan) return;\n    \n    try {\n      console.log('🚀 Iniciando processo de compra do plano:', selectedPlan.name, 'Método:', method);\n      \n      // 1. Verificar autenticação com validação robusta\n      console.log('🔐 Verificando sessão do usuário...');\n      const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n      \n      if (sessionError) {\n        console.error('❌ Erro ao obter sessão:', sessionError);\n        toast({\n          title: \"Erro de autenticação\",\n          description: \"Erro ao verificar login. Tente fazer login novamente.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (!session || !session.user) {\n        console.log('❌ Usuário não autenticado - sessão inválida');\n        toast({\n          title: \"Login necessário\",\n          description: \"Faça login para comprar um plano.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // 2. Verificar se o token é válido\n      const tokenExpiry = session.expires_at;\n      const now = Math.floor(Date.now() / 1000);\n      \n      if (tokenExpiry && tokenExpiry < now) {\n        console.log('⚠️ Token expirado, tentando renovar sessão...');\n        const { data: { session: refreshedSession }, error: refreshError } = await supabase.auth.refreshSession();\n        \n        if (refreshError || !refreshedSession) {\n          console.error('❌ Falha ao renovar sessão:', refreshError);\n          toast({\n            title: \"Sessão expirada\",\n            description: \"Sua sessão expirou. Faça login novamente.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        console.log('✅ Sessão renovada com sucesso');\n      }\n\n      // 3. Buscar dados completos do usuário na tabela profiles\n      console.log('👤 Buscando dados do perfil do usuário...');\n      const { data: profileData, error: profileError } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', session.user.id)\n        .single();\n\n      if (profileError || !profileData) {\n        console.error('❌ Erro ao buscar perfil do usuário:', profileError);\n        toast({\n          title: \"Erro no perfil\",\n          description: \"Não foi possível carregar dados do perfil. Tente novamente.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      console.log('✅ Usuário autenticado:', session.user.id);\n      console.log('📧 Email do usuário:', session.user.email);\n      console.log('👤 Nome do usuário:', profileData.full_name);\n      console.log('📱 Telefone do usuário:', profileData.phone);\n      console.log('🆔 CPF do usuário:', profileData.cpf ? 'Cadastrado' : 'NÃO CADASTRADO');\n      console.log('🕒 Token expira em:', new Date((tokenExpiry || 0) * 1000).toLocaleString());\n\n      // 4. Validar CPF obrigatório\n      if (!profileData.cpf) {\n        console.error('❌ CPF não cadastrado para o usuário');\n        toast({\n          title: \"CPF necessário\",\n          description: \"É necessário cadastrar seu CPF no perfil para criar pagamentos. Redirecionando para o perfil...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = '/usuario/perfil';\n        }, 3000);\n        return;\n      }\n      \n      setProcessingPayment(true);\n      setPaymentMethod(method);\n\n      // 5. Chamar a função de criar pagamento com dados do usuário logado\n      console.log('📞 Chamando edge function create-asaas-payment com dados do usuário logado...');\n      console.log('📤 Dados enviados:', {\n        plan_id: selectedPlan.id,\n        plan_category: selectedPlan.category,\n        user_id: session.user.id,\n        payment_method: method,\n        user_cpf: profileData.cpf,\n        user_email: session.user.email,\n        user_name: profileData.full_name\n      });\n      \n      const { data, error } = await supabase.functions.invoke('create-asaas-payment', {\n        body: {\n          plan_id: selectedPlan.id,\n          plan_category: selectedPlan.category,\n          user_id: session.user.id,\n          payment_method: method\n        }\n      });\n\n      console.log('📡 Resposta da edge function:', { data, error });\n\n      if (error) {\n        console.error('❌ Erro na edge function:', error);\n        throw error;\n      }\n\n      if (data?.success && data?.redirect_url) {\n        console.log('✅ Pagamento criado - redirecionando para:', data.redirect_url);\n        \n        // Fechar modal de seleção de método\n        setPaymentMethodModalOpen(false);\n        \n        // **FLUXO iFood: Redirecionamento automático para a tela do Asaas**\n        toast({\n          title: \"Redirecionando para pagamento...\",\n          description: `Você será redirecionado para completar o pagamento de R$ ${data.amount}`,\n        });\n\n        // Aguardar um pouco para o usuário ver a mensagem e depois redirecionar\n        setTimeout(() => {\n          console.log('🔗 Redirecionando para URL de pagamento:', data.redirect_url);\n          window.location.href = data.redirect_url;\n        }, 2000);\n\n      } else {\n        // Tratar erro específico de CPF\n        if (data?.error?.includes('CPF') || data?.error?.includes('CNPJ')) {\n          console.error('❌ CPF/CNPJ não informado');\n          toast({\n            title: \"CPF necessário\",\n            description: \"É necessário cadastrar seu CPF no perfil para criar pagamentos. Redirecionando para o perfil...\",\n            variant: \"destructive\",\n          });\n          // Redirecionar para página de perfil após 2 segundos\n          setTimeout(() => {\n            window.location.href = '/usuario/perfil';\n          }, 2000);\n          return;\n        }\n        \n        console.error('❌ Erro no processamento:', data?.error);\n        throw new Error(data?.error || 'Erro desconhecido');\n      }\n    } catch (error: any) {\n      console.error('💥 Erro ao processar pagamento:', error);\n      \n      // Tratamento específico para erro de CPF\n      if (error.message?.includes('CPF') || error.message?.includes('CNPJ')) {\n        toast({\n          title: \"CPF necessário\",\n          description: \"Complete seu perfil com CPF para realizar pagamentos.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Erro no pagamento\",\n          description: error.message || \"Erro ao processar pagamento. Tente novamente.\",\n          variant: \"destructive\",\n        });\n      }\n    } finally {\n      setProcessingPayment(false);\n    }\n\n    // Callback opcional para componente pai\n    if (onSelectPlan && selectedPlan) {\n      onSelectPlan(selectedPlan);\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"tattoo\": return \"bg-purple-100 text-purple-800\";\n      case \"dental\": return \"bg-blue-100 text-blue-800\";\n      case \"service\": return \"bg-green-100 text-green-800\";\n      case \"course\": return \"bg-orange-100 text-orange-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getCategoryLabel = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"tattoo\": return \"Tatuagem\";\n      case \"dental\": return \"Dental\";\n      case \"service\": return \"Serviço\";\n      case \"course\": return \"Curso\";\n      default: return category;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (plans.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Package className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Nenhum plano disponível</h3>\n        <p className=\"text-muted-foreground\">\n          Os planos estão sendo configurados. Volte em breve!\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 min-h-screen overflow-y-auto px-4 py-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n          Escolha seu Plano\n        </h2>\n        <p className=\"text-muted-foreground mb-8\">\n          Forme um grupo de 10 pessoas e pague apenas 10% de entrada\n        </p>\n      </div>\n\n      <PlansGrid\n        plans={plans}\n        selectedPlanId={selectedPlanId}\n        processing={processingPayment}\n        onSelectPlan={handleSelectPlan}\n        getCategoryColor={getCategoryColor}\n        getCategoryLabel={getCategoryLabel}\n      />\n\n      <PlansInfo />\n\n      {/* Payment Method Selector Modal */}\n      <PaymentMethodSelector\n        isOpen={paymentMethodModalOpen}\n        onClose={() => setPaymentMethodModalOpen(false)}\n        onSelectMethod={handlePaymentMethodSelect}\n        planName={selectedPlan?.name || ''}\n        amount={Math.round((selectedPlan?.price || 0) * 0.1)}\n      />\n\n      {/* Payment Modal */}\n      <PaymentModal\n        isOpen={paymentModalOpen}\n        onClose={() => setPaymentModalOpen(false)}\n        paymentData={paymentData}\n        paymentMethod={paymentMethod}\n      />\n    </div>\n  );\n};\n\nexport { type Plan };","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/pro/AppointmentScheduler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/pro/FinancialReports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/pro/ProProducts.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProducts'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadProducts, user]","fix":{"range":[1189,1195],"text":"[loadProducts, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2277,2280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2277,2280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Package, \n  DollarSign, \n  Eye, \n  Share2, \n  Edit, \n  Trash2,\n  Search,\n  Plus,\n  ExternalLink,\n  Copy,\n  TrendingUp\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  price: number;\n  duration: string;\n  created_at: string;\n  total_sales?: number;\n  total_revenue?: number;\n  affiliate_link?: string;\n}\n\nexport const ProProducts = () => {\n  const [products, setProducts] = useState<Service[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadProducts();\n    }\n  }, [user]);\n\n  const loadProducts = async () => {\n    try {\n      // Get professional ID first\n      const { data: professional } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('user_id', user?.id)\n        .eq('role', 'professional')\n        .single();\n\n      if (!professional) {\n        setLoading(false);\n        return;\n      }\n\n      // Load products\n      const { data: productsData, error } = await supabase\n        .from('products')\n        .select('*')\n        .eq('professional_id', professional.id)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Add mock stats and affiliate links\n      const productsWithStats = (productsData || []).map(product => ({\n        ...product,\n        duration: '1 hora', // Default duration since not in DB\n        total_sales: Math.floor(Math.random() * 20),\n        total_revenue: product.price * Math.floor(Math.random() * 20),\n        affiliate_link: `${window.location.origin}/service/${product.id}`\n      }));\n\n      setProducts(productsWithStats);\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao carregar serviços\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const copyAffiliateLink = async (link: string) => {\n    try {\n      await navigator.clipboard.writeText(link);\n      toast({\n        title: \"Link copiado!\",\n        description: \"O link do serviço foi copiado para a área de transferência.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar link\",\n        description: \"Não foi possível copiar o link.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const shareProduct = async (product: Service) => {\n    const shareData = {\n      title: product.name,\n      text: product.description,\n      url: product.affiliate_link\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        copyAffiliateLink(product.affiliate_link || '');\n      }\n    } else {\n      copyAffiliateLink(product.affiliate_link || '');\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Meus Serviços</h2>\n          <p className=\"text-muted-foreground\">\n            Gerencie seus serviços e acompanhe os resultados\n          </p>\n        </div>\n        <Button onClick={() => setShowForm(!showForm)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Novo Serviço\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Buscar serviços...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <Package className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Serviços</p>\n                <p className=\"text-2xl font-bold\">{products.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Serviços Ativos</p>\n                <p className=\"text-2xl font-bold\">{products.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Vendas</p>\n                <p className=\"text-2xl font-bold\">\n                  {products.reduce((sum, p) => sum + (p.total_sales || 0), 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Receita Total</p>\n                <p className=\"text-lg font-bold\">\n                  {formatCurrency(products.reduce((sum, p) => sum + (p.total_revenue || 0), 0))}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Products List */}\n      {filteredProducts.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nenhum serviço encontrado</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery ? \"Tente ajustar sua busca\" : \"Comece criando seu primeiro serviço\"}\n            </p>\n            {!searchQuery && (\n              <Button onClick={() => setShowForm(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Criar Serviço\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredProducts.map((product) => (\n            <Card key={product.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-4\">\n                  {/* Product Icon */}\n                  <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center\">\n                    <Package className=\"h-8 w-8 text-muted-foreground\" />\n                  </div>\n\n                  {/* Product Info */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">{product.name}</h3>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          {product.description}\n                        </p>\n                        <div className=\"flex items-center gap-4 text-sm\">\n                          <span>Preço: {formatCurrency(product.price)}</span>\n                          <span>Duração: {product.duration}</span>\n                          <Badge variant=\"outline\">{product.category}</Badge>\n                        </div>\n                      </div>\n\n                      {/* Stats */}\n                      <div className=\"text-right text-sm\">\n                        <div className=\"font-semibold\">{product.total_sales || 0} vendas</div>\n                        <div className=\"text-muted-foreground\">\n                          {formatCurrency(product.total_revenue || 0)}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          Criado em {formatDate(product.created_at)}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center gap-2 mt-4\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => shareProduct(product)}\n                      >\n                        <Share2 className=\"h-4 w-4 mr-1\" />\n                        Compartilhar\n                      </Button>\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => copyAffiliateLink(product.affiliate_link || '')}\n                      >\n                        <Copy className=\"h-4 w-4 mr-1\" />\n                        Copiar Link\n                      </Button>\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => window.open(product.affiliate_link, '_blank')}\n                      >\n                        <ExternalLink className=\"h-4 w-4 mr-1\" />\n                        Ver Página\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/pro/ProSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/pro/ProWallet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/professional/ProfessionalDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, user]","fix":{"range":[1183,1189],"text":"[loadDashboardData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  DollarSign, \n  Package, \n  Users, \n  TrendingUp,\n  Calendar,\n  Bell,\n  Settings\n} from 'lucide-react';\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Transaction {\n  id: string;\n  client_name: string;\n  description: string;\n  amount: number;\n  commission: number;\n  status: string;\n  payment_status: string;\n  created_at: string;\n}\n\nexport function ProfessionalDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [stats, setStats] = useState({\n    totalProducts: 0,\n    totalEarnings: 0,\n    pendingPayments: 0,\n    completedJobs: 0\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [user]);\n\n  const loadDashboardData = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      // Get professional profile\n      const { data: professional } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('role', 'professional')\n        .single();\n\n      if (!professional) {\n        setLoading(false);\n        return;\n      }\n\n      // Load products count\n      const { data: products } = await supabase\n        .from('products')\n        .select('*')\n        .eq('professional_id', professional.id);\n\n      // Load transactions (using credit_transactions as mock)\n      const { data: transactionData } = await supabase\n        .from('credit_transactions')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(10);\n\n      const formattedTransactions: Transaction[] = (transactionData || []).map(transaction => ({\n        id: transaction.id,\n        client_name: 'Cliente',\n        description: transaction.description || 'Serviço prestado',\n        amount: Number(transaction.amount),\n        commission: Number(transaction.amount) * 0.7, // 70% para o profissional\n        status: transaction.status || 'completed',\n        payment_status: transaction.status || 'completed',\n        created_at: transaction.created_at || new Date().toISOString()\n      }));\n\n      setTransactions(formattedTransactions);\n\n      // Calculate stats\n      const totalProducts = products?.length || 0;\n      const totalEarnings = formattedTransactions\n        .filter(t => t.status === 'completed')\n        .reduce((sum, t) => sum + t.commission, 0);\n      const pendingPayments = formattedTransactions\n        .filter(t => t.status === 'pending')\n        .reduce((sum, t) => sum + t.commission, 0);\n\n      setStats({\n        totalProducts,\n        totalEarnings,\n        pendingPayments,\n        completedJobs: formattedTransactions.filter(t => t.status === 'completed').length\n      });\n\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar dados do dashboard.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('pt-BR');\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pendente</Badge>;\n      case 'completed':\n        return <Badge variant=\"default\">Concluído</Badge>;\n      case 'paid':\n        return <Badge>Pago</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Dashboard Profissional</h2>\n        <p className=\"text-muted-foreground\">\n          Acompanhe seus serviços e ganhos\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Serviços</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalProducts}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Ganhos</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(stats.totalEarnings)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pagamentos Pendentes</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{formatCurrency(stats.pendingPayments)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Trabalhos Concluídos</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.completedJobs}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Transactions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Transações Recentes</CardTitle>\n          <CardDescription>\n            Últimas movimentações financeiras\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {transactions.length === 0 ? (\n            <Alert>\n              <AlertDescription>\n                Nenhuma transação encontrada ainda.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"space-y-4\">\n              {transactions.map((transaction) => (\n                <div key={transaction.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium\">{transaction.client_name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{transaction.description}</p>\n                    <p className=\"text-xs text-muted-foreground\">{formatDate(transaction.created_at)}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-bold text-green-600\">{formatCurrency(transaction.commission)}</div>\n                    {getStatusBadge(transaction.status)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6 text-center\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n            <h3 className=\"font-semibold mb-2\">Gerenciar Serviços</h3>\n            <p className=\"text-sm text-muted-foreground\">Adicione e edite seus serviços</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6 text-center\">\n            <Calendar className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n            <h3 className=\"font-semibold mb-2\">Agenda</h3>\n            <p className=\"text-sm text-muted-foreground\">Gerencie seus compromissos</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6 text-center\">\n            <Settings className=\"h-12 w-12 mx-auto mb-4 text-primary\" />\n            <h3 className=\"font-semibold mb-2\">Configurações</h3>\n            <p className=\"text-sm text-muted-foreground\">Ajuste suas preferências</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/shared/NotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1278,1281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1278,1281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { useNotifications, NotificationType } from '@/hooks/useNotifications';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Bell, \n  CreditCard, \n  Users, \n  DollarSign, \n  Settings,\n  Check, \n  X, \n  Eye, \n  EyeOff,\n  RefreshCw,\n  ChevronLeft,\n  ChevronRight,\n  CheckCheck\n} from 'lucide-react';\n\nconst NotificationTypeIcons = {\n  pagamento: CreditCard,\n  grupo_mlm: Users,\n  comissao: DollarSign,\n  sistema: Settings\n};\n\nconst NotificationTypeColors = {\n  pagamento: 'bg-green-100 text-green-700',\n  grupo_mlm: 'bg-blue-100 text-blue-700',\n  comissao: 'bg-yellow-100 text-yellow-700',\n  sistema: 'bg-purple-100 text-purple-700'\n};\n\nconst NotificationTypeLabels = {\n  pagamento: 'Pagamento',\n  grupo_mlm: 'Grupo MLM',\n  comissao: 'Comissão',\n  sistema: 'Sistema'\n};\n\ninterface NotificationItemProps {\n  notification: any;\n  onMarkAsRead: (id: string) => void;\n  onMarkAsUnread: (id: string) => void;\n  onPerformAction: (id: string, action: string) => void;\n}\n\nconst NotificationItem = ({ notification, onMarkAsRead, onMarkAsUnread, onPerformAction }: NotificationItemProps) => {\n  const IconComponent = NotificationTypeIcons[notification.type];\n  const timeAgo = formatDistanceToNow(new Date(notification.created_at), { \n    addSuffix: true, \n    locale: ptBR \n  });\n\n  return (\n    <div className={`p-4 border-l-4 ${notification.read ? 'border-gray-200 bg-gray-50' : 'border-primary bg-primary/5'} rounded-lg`}>\n      <div className=\"flex items-start gap-4\">\n        <div className={`p-2 rounded-full ${NotificationTypeColors[notification.type]}`}>\n          <IconComponent className=\"h-4 w-4\" />\n        </div>\n        \n        <div className=\"flex-1 space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <h4 className={`font-medium ${!notification.read ? 'font-semibold' : ''}`}>\n                {notification.title}\n              </h4>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {NotificationTypeLabels[notification.type]}\n              </Badge>\n              {!notification.read && (\n                <div className=\"w-2 h-2 bg-primary rounded-full\" />\n              )}\n            </div>\n            <span className=\"text-xs text-muted-foreground\">{timeAgo}</span>\n          </div>\n          \n          <p className=\"text-sm text-muted-foreground\">{notification.message}</p>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex gap-2\">\n              {notification.actions?.map((action: string) => (\n                <Button\n                  key={action}\n                  size=\"sm\"\n                  variant={action === 'aceitar' ? 'default' : 'outline'}\n                  onClick={() => onPerformAction(notification.id, action)}\n                  className=\"h-7 text-xs\"\n                >\n                  {action === 'aceitar' && <Check className=\"h-3 w-3 mr-1\" />}\n                  {action === 'recusar' && <X className=\"h-3 w-3 mr-1\" />}\n                  {action.charAt(0).toUpperCase() + action.slice(1).replace('_', ' ')}\n                </Button>\n              ))}\n            </div>\n            \n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => notification.read ? onMarkAsUnread(notification.id) : onMarkAsRead(notification.id)}\n              className=\"h-7 w-7 p-0\"\n            >\n              {notification.read ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const NotificationCenter = () => {\n  const {\n    notifications,\n    unreadCount,\n    loading,\n    currentPage,\n    totalPages,\n    hasNextPage,\n    selectedType,\n    markAsRead,\n    markAsUnread,\n    markAllAsRead,\n    setSelectedType,\n    nextPage,\n    prevPage,\n    refresh,\n    performAction\n  } = useNotifications();\n\n  const [refreshing, setRefreshing] = useState(false);\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await refresh();\n    setRefreshing(false);\n  };\n\n  const filterTypes: Array<{ value: NotificationType | 'all'; label: string; count?: number }> = [\n    { value: 'all', label: 'Todas' },\n    { value: 'pagamento', label: 'Pagamentos' },\n    { value: 'grupo_mlm', label: 'Grupos MLM' },\n    { value: 'comissao', label: 'Comissões' },\n    { value: 'sistema', label: 'Sistema' }\n  ];\n\n  if (loading && notifications.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Central de Notificações\n            </CardTitle>\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"px-2 py-1\">\n                {unreadCount}\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={refreshing}\n            >\n              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n            </Button>\n            {unreadCount > 0 && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={markAllAsRead}\n              >\n                <CheckCheck className=\"h-4 w-4 mr-2\" />\n                Marcar todas como lidas\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Filter Tabs */}\n        <Tabs value={selectedType} onValueChange={(value) => setSelectedType(value as NotificationType | 'all')}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            {filterTypes.map((type) => (\n              <TabsTrigger key={type.value} value={type.value} className=\"text-sm\">\n                {type.label}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n        </Tabs>\n\n        {/* Notifications List */}\n        <ScrollArea className=\"h-[500px] pr-4\">\n          <div className=\"space-y-4\">\n            {notifications.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Bell className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-muted-foreground\">\n                  Nenhuma notificação encontrada\n                </h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {selectedType === 'all' ? \n                    'Você não tem notificações no momento.' : \n                    `Não há notificações do tipo ${NotificationTypeLabels[selectedType as NotificationType]}.`\n                  }\n                </p>\n              </div>\n            ) : (\n              notifications.map((notification) => (\n                <NotificationItem\n                  key={notification.id}\n                  notification={notification}\n                  onMarkAsRead={markAsRead}\n                  onMarkAsUnread={markAsUnread}\n                  onPerformAction={performAction}\n                />\n              ))\n            )}\n          </div>\n        </ScrollArea>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Página {currentPage} de {totalPages}\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={prevPage}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={nextPage}\n                disabled={!hasNextPage}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/shared/ReferralHandler.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":6,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":6,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":39,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":39,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":44,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":44,"endColumn":39},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":49,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":49,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useToast } from '@/hooks/use-toast';\n\n// Hook para capturar e processar códigos de referência\nexport const useReferralHandler = () => {\n  const [searchParams] = useSearchParams();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const referralCode = searchParams.get('ref');\n    \n    if (referralCode) {\n      // Salva o código de referência no localStorage para usar no cadastro\n      localStorage.setItem('referralCode', referralCode);\n      \n      toast({\n        title: \"Indicação detectada!\",\n        description: `Você foi indicado pelo código: ${referralCode}`,\n      });\n    }\n  }, [searchParams, toast]);\n\n  const getReferralCode = () => {\n    return localStorage.getItem('referralCode');\n  };\n\n  const clearReferralCode = () => {\n    localStorage.removeItem('referralCode');\n  };\n\n  return {\n    getReferralCode,\n    clearReferralCode\n  };\n};\n\n// Componente para gerar links de referência\nexport const generateReferralLink = (referralCode: string, baseUrl: string = window.location.origin) => {\n  return `${baseUrl}/register?ref=${referralCode}`;\n};\n\n// Função para gerar link de grupo específico\nexport const generateGroupReferralLink = (planId: string, referralCode: string, baseUrl: string = window.location.origin) => {\n  return `${baseUrl}/plano/${planId}?ref=${referralCode}`;\n};\n\n// Função para gerar código de referência único\nexport const generateReferralCode = (userName: string) => {\n  const cleanName = userName.replace(/\\s+/g, '').toUpperCase();\n  const randomSuffix = Math.random().toString(36).substring(2, 5).toUpperCase();\n  return `${cleanName.substring(0, 6)}${randomSuffix}`;\n};\n\n// Componente wrapper para páginas que precisam lidar com referências\nexport const ReferralHandler = ({ children }: { children: React.ReactNode }) => {\n  useReferralHandler();\n  return <>{children}</>;\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/stripe/StripeOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/avatar-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4549,4552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4549,4552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5586,5589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5586,5589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Progress } from '@/components/ui/progress';\nimport { Camera, Upload, X, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AvatarUploadProps {\n  currentAvatar?: string | null;\n  userName?: string;\n  size?: 'sm' | 'md' | 'lg';\n  onAvatarUpdate?: (avatarUrl: string | null) => void;\n}\n\nconst AVATAR_SIZES = {\n  sm: 'h-12 w-12',\n  md: 'h-24 w-24', \n  lg: 'h-32 w-32'\n};\n\nconst MAX_FILE_SIZE = 2 * 1024 * 1024; // 2MB\nconst ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\nconst TARGET_SIZE = 300; // 300x300px\n\nexport function AvatarUpload({\n  currentAvatar,\n  userName = \"User\",\n  size = 'md',\n  onAvatarUpdate\n}: AvatarUploadProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [previewImage, setPreviewImage] = useState<string | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Get user initials for fallback\n  const initials = userName\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n\n  const compressImage = (file: File): Promise<File> => {\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate dimensions to maintain aspect ratio\n        const { width, height } = img;\n        const size = Math.min(width, height);\n        const startX = (width - size) / 2;\n        const startY = (height - size) / 2;\n\n        // Set canvas size to target dimensions\n        canvas.width = TARGET_SIZE;\n        canvas.height = TARGET_SIZE;\n\n        // Draw and resize image\n        ctx.drawImage(\n          img,\n          startX, startY, size, size,\n          0, 0, TARGET_SIZE, TARGET_SIZE\n        );\n\n        canvas.toBlob((blob) => {\n          if (blob) {\n            const compressedFile = new File([blob], file.name, {\n              type: 'image/jpeg',\n              lastModified: Date.now()\n            });\n            resolve(compressedFile);\n          }\n        }, 'image/jpeg', 0.85);\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  const validateFile = (file: File): string | null => {\n    if (!ALLOWED_TYPES.includes(file.type)) {\n      return 'Apenas arquivos JPG, PNG e WebP são permitidos.';\n    }\n    if (file.size > MAX_FILE_SIZE) {\n      return 'O arquivo deve ter no máximo 2MB.';\n    }\n    return null;\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const error = validateFile(file);\n    if (error) {\n      toast({\n        title: \"Arquivo inválido\",\n        description: error,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n    \n    // Create preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result;\n      if (typeof result === 'string') {\n        setPreviewImage(result);\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const uploadAvatar = async () => {\n    if (!selectedFile || !user) return;\n\n    try {\n      setUploading(true);\n      setProgress(0);\n\n      // Compress image\n      const compressedFile = await compressImage(selectedFile);\n      \n      setProgress(30);\n\n      // Generate unique filename\n      const fileName = `${user.id}-${Date.now()}.jpg`;\n\n      setProgress(60);\n\n      // Upload to Supabase Storage\n      const { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(fileName, compressedFile, {\n          cacheControl: '3600',\n          upsert: true\n        });\n\n      if (uploadError) throw uploadError;\n\n      setProgress(80);\n\n      // Get public URL\n      const { data } = supabase.storage\n        .from('avatars')\n        .getPublicUrl(fileName);\n\n      setProgress(90);\n\n      // Update user profile\n      const updateResult = await (supabase as any)\n        .from('profiles')\n        .update({ avatar_url: data.publicUrl })\n        .eq('user_id', user.id);\n\n      if (updateResult.error) throw updateResult.error;\n\n      setProgress(100);\n\n      // Call update callback\n      if (onAvatarUpdate) {\n        onAvatarUpdate(data.publicUrl);\n      }\n\n      toast({\n        title: \"Foto atualizada!\",\n        description: \"Sua foto de perfil foi atualizada com sucesso.\",\n      });\n\n      // Reset state\n      setSelectedFile(null);\n      setPreviewImage(null);\n      setIsOpen(false);\n\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Erro no upload\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n      setProgress(0);\n    }\n  };\n\n  const removeAvatar = async () => {\n    if (!user) return;\n\n    try {\n      setUploading(true);\n\n      // Update profile to remove avatar\n      const removeResult = await (supabase as any)\n        .from('profiles')\n        .update({ avatar_url: null })\n        .eq('user_id', user.id);\n\n      if (removeResult.error) throw removeResult.error;\n\n      if (onAvatarUpdate) {\n        onAvatarUpdate(null);\n      }\n\n      toast({\n        title: \"Foto removida\",\n        description: \"Sua foto de perfil foi removida com sucesso.\",\n      });\n\n      setIsOpen(false);\n    } catch (error) {\n      console.error('Remove error:', error);\n      toast({\n        title: \"Erro ao remover\",\n        description: \"Não foi possível remover a foto de perfil.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const resetSelection = () => {\n    setSelectedFile(null);\n    setPreviewImage(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"relative\">\n        <Avatar className={`${AVATAR_SIZES[size]} cursor-pointer`} onClick={() => setIsOpen(true)}>\n          <AvatarImage src={currentAvatar || undefined} alt={userName} />\n          <AvatarFallback className=\"text-lg font-semibold bg-primary text-primary-foreground\">\n            {initials}\n          </AvatarFallback>\n        </Avatar>\n        \n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          className=\"absolute -bottom-1 -right-1 h-8 w-8 rounded-full p-0 shadow-md\"\n          onClick={() => setIsOpen(true)}\n          disabled={uploading}\n        >\n          <Camera className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Atualizar Foto de Perfil</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Current/Preview Avatar */}\n            <div className=\"flex justify-center\">\n              <Avatar className=\"h-32 w-32\">\n                <AvatarImage src={previewImage || currentAvatar || undefined} alt={userName} />\n                <AvatarFallback className=\"text-2xl font-semibold bg-primary text-primary-foreground\">\n                  {initials}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n\n            {/* Upload Progress */}\n            {uploading && (\n              <div className=\"space-y-2\">\n                <Progress value={progress} className=\"w-full\" />\n                <p className=\"text-sm text-center text-muted-foreground\">\n                  {progress < 30 ? 'Preparando...' :\n                   progress < 60 ? 'Comprimindo...' :\n                   progress < 90 ? 'Enviando...' :\n                   'Finalizando...'}\n                </p>\n              </div>\n            )}\n\n            {/* File Input */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/jpeg,image/png,image/webp\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n\n            {/* Actions */}\n            <div className=\"space-y-3\">\n              {!selectedFile ? (\n                <>\n                  <Button\n                    onClick={() => fileInputRef.current?.click()}\n                    className=\"w-full\"\n                    disabled={uploading}\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Selecionar Nova Foto\n                  </Button>\n                  \n                  {currentAvatar && (\n                    <Button\n                      onClick={removeAvatar}\n                      variant=\"destructive\"\n                      className=\"w-full\"\n                      disabled={uploading}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Remover Foto Atual\n                    </Button>\n                  )}\n                </>\n              ) : (\n                <>\n                  <Button\n                    onClick={uploadAvatar}\n                    className=\"w-full\"\n                    disabled={uploading}\n                  >\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                    Salvar Foto\n                  </Button>\n                  \n                  <Button\n                    onClick={resetSelection}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    disabled={uploading}\n                  >\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Cancelar\n                  </Button>\n                </>\n              )}\n            </div>\n\n            {/* File Requirements */}\n            <div className=\"text-xs text-muted-foreground text-center space-y-1\">\n              <p>• Formatos aceitos: JPG, PNG, WebP</p>\n              <p>• Tamanho máximo: 2MB</p>\n              <p>• Será redimensionada para 300x300px</p>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":58,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":58,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-gold transition-all duration-300\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-primary/20 bg-background hover:bg-primary/10 hover:text-primary hover:border-primary/40 transition-all duration-300\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 border border-primary/20 hover:border-primary/40 transition-all duration-300\",\n        ghost: \"hover:bg-primary/10 hover:text-primary transition-all duration-300\",\n        link: \"text-primary underline-offset-4 hover:underline hover:text-primary/80 transition-all duration-300\",\n        gold: \"bg-primary text-primary-foreground font-semibold shadow-gold-glow hover:shadow-gold transition-all duration-300\",\n        premium: \"bg-card text-primary border border-primary/30 hover:border-primary shadow-md hover:shadow-gold transition-all duration-300\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[701,752],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/empty-state.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/form-validation.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":48,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":48,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FieldError } from 'react-hook-form';\nimport { cn } from '@/lib/utils';\nimport { AlertCircle, Check } from 'lucide-react';\n\ninterface FormFieldProps {\n  children: React.ReactNode;\n  error?: FieldError;\n  success?: boolean;\n  className?: string;\n}\n\nexport function FormField({ children, error, success, className }: FormFieldProps) {\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      {children}\n      {error && <FormError message={error.message} />}\n      {success && !error && <FormSuccess />}\n    </div>\n  );\n}\n\ninterface FormErrorProps {\n  message?: string;\n}\n\nexport function FormError({ message }: FormErrorProps) {\n  if (!message) return null;\n\n  return (\n    <div className=\"flex items-center space-x-2 text-sm text-destructive\">\n      <AlertCircle className=\"w-4 h-4\" />\n      <span>{message}</span>\n    </div>\n  );\n}\n\nexport function FormSuccess() {\n  return (\n    <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n      <Check className=\"w-4 h-4\" />\n      <span>Campo válido</span>\n    </div>\n  );\n}\n\n// Validation utilities\nexport const validation = {\n  required: (fieldName: string) => ({\n    required: `${fieldName} é obrigatório`,\n  }),\n  \n  email: {\n    required: 'Email é obrigatório',\n    pattern: {\n      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      message: 'Email inválido'\n    }\n  },\n  \n  password: {\n    required: 'Senha é obrigatória',\n    minLength: {\n      value: 6,\n      message: 'Senha deve ter pelo menos 6 caracteres'\n    }\n  },\n  \n  phone: {\n    required: 'Telefone é obrigatório',\n    pattern: {\n      value: /^(\\(?\\d{2}\\)?\\s?)?(\\d{4,5}-?\\d{4})$/,\n      message: 'Formato de telefone inválido'\n    }\n  },\n  \n  cpf: {\n    required: 'CPF é obrigatório',\n    pattern: {\n      value: /^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/,\n      message: 'Formato de CPF inválido (000.000.000-00)'\n    }\n  },\n  \n  currency: {\n    required: 'Valor é obrigatório',\n    min: {\n      value: 0.01,\n      message: 'Valor deve ser maior que zero'\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/image-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2780,2783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2780,2783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { MobileButton } from '@/components/ui/mobile-button';\nimport { useToast } from '@/hooks/use-toast';\nimport { useResponsiveDesign } from '@/hooks/useResponsiveDesign';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Upload, X, ImageIcon } from 'lucide-react';\n\ninterface ImageUploadProps {\n  currentImageUrl?: string | null;\n  onImageChange: (imageUrl: string | null) => void;\n  bucketName: string;\n  path?: string;\n  maxSizeMB?: number;\n  className?: string;\n}\n\nexport function ImageUpload({\n  currentImageUrl,\n  onImageChange,\n  bucketName,\n  path = '',\n  maxSizeMB = 5,\n  className = ''\n}: ImageUploadProps) {\n  const [uploading, setUploading] = useState(false);\n  const [preview, setPreview] = useState<string | null>(currentImageUrl || null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { isMobile } = useResponsiveDesign();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validar tipo de arquivo\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Erro\",\n        description: \"Por favor, selecione apenas arquivos de imagem.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validar tamanho do arquivo\n    if (file.size > maxSizeMB * 1024 * 1024) {\n      toast({\n        title: \"❌ Erro\", \n        description: `Arquivo muito grande. Máximo ${maxSizeMB}MB.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadImage(file);\n  };\n\n  const uploadImage = async (file: File) => {\n    setUploading(true);\n    try {\n      // Gerar nome único para o arquivo\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}.${fileExt}`;\n      const filePath = path ? `${path}/${fileName}` : fileName;\n\n      console.log('Uploading image:', { bucketName, filePath, fileSize: file.size });\n\n      // Upload para Supabase Storage\n      const { data, error } = await supabase.storage\n        .from(bucketName)\n        .upload(filePath, file);\n\n      if (error) {\n        console.error('Upload error:', error);\n        throw error;\n      }\n\n      console.log('Upload successful:', data);\n\n      // Obter URL pública\n      const { data: publicUrlData } = supabase.storage\n        .from(bucketName)\n        .getPublicUrl(data.path);\n\n      const imageUrl = publicUrlData.publicUrl;\n      console.log('Public URL generated:', imageUrl);\n\n      setPreview(imageUrl);\n      onImageChange(imageUrl);\n\n      toast({\n        title: \"✅ Sucesso\",\n        description: \"Imagem enviada com sucesso!\",\n      });\n\n    } catch (error: any) {\n      console.error('Error uploading image:', error);\n      toast({\n        title: \"❌ Erro\",\n        description: error.message || \"Erro ao enviar imagem. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeImage = async () => {\n    if (!preview) return;\n\n    try {\n      // Se a imagem está no storage, tentar removê-la\n      if (preview.includes(bucketName)) {\n        const path = preview.split(`/${bucketName}/`)[1];\n        if (path) {\n          const { error } = await supabase.storage\n            .from(bucketName)\n            .remove([path]);\n          \n          if (error) {\n            console.warn('Warning removing image from storage:', error);\n          }\n        }\n      }\n\n      setPreview(null);\n      onImageChange(null);\n\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n\n      toast({\n        title: \"✅ Sucesso\",\n        description: \"Imagem removida com sucesso.\",\n      });\n\n    } catch (error) {\n      console.error('Error removing image:', error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao remover imagem.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const ButtonComponent = isMobile ? MobileButton : Button;\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"flex flex-col gap-4\">\n        <label className=\"text-sm font-medium\">Imagem do Plano</label>\n        \n        {preview ? (\n          <div className=\"relative inline-block\">\n            <img\n              src={preview}\n              alt=\"Preview do plano\"\n              className=\"w-full h-32 md:h-40 object-cover rounded-lg border border-border\"\n            />\n            <button\n              type=\"button\"\n              onClick={removeImage}\n              className=\"absolute top-2 right-2 p-1 bg-destructive text-destructive-foreground rounded-full hover:bg-destructive/90 transition-colors\"\n              disabled={uploading}\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </div>\n        ) : (\n          <div className=\"w-full h-32 md:h-40 border-2 border-dashed border-border rounded-lg flex flex-col items-center justify-center bg-muted/50\">\n            <ImageIcon className=\"h-8 w-8 text-muted-foreground mb-2\" />\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Nenhuma imagem selecionada\n            </p>\n          </div>\n        )}\n\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            disabled={uploading}\n          />\n          \n          <ButtonComponent\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => fileInputRef.current?.click()}\n            disabled={uploading}\n            className=\"flex-1\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            {uploading ? 'Enviando...' : 'Selecionar Imagem'}\n          </ButtonComponent>\n\n          {preview && (\n            <ButtonComponent\n              type=\"button\"\n              variant=\"outline\"\n              onClick={removeImage}\n              disabled={uploading}\n              className=\"text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              Remover\n            </ButtonComponent>\n          )}\n        </div>\n\n        <p className=\"text-xs text-muted-foreground\">\n          Formatos aceitos: JPG, PNG, GIF. Máximo: {maxSizeMB}MB\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/mobile-button.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[797,800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[797,800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button, ButtonProps } from './button';\nimport { cn } from '@/lib/utils';\n\ninterface MobileButtonProps extends ButtonProps {\n  touchOptimized?: boolean;\n}\n\nexport const MobileButton = React.forwardRef<HTMLButtonElement, MobileButtonProps>(\n  ({ className, touchOptimized = true, children, onClick, ...props }, ref) => {\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onClick) {\n        onClick(event);\n      }\n    };\n\n    const handleTouchEnd = (event: React.TouchEvent<HTMLButtonElement>) => {\n      // Previne duplo toque\n      event.preventDefault();\n      \n      if (onClick) {\n        const syntheticEvent = {\n          ...event,\n          currentTarget: event.currentTarget,\n          target: event.target\n        } as any;\n        onClick(syntheticEvent);\n      }\n    };\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          touchOptimized && [\n            'min-h-[44px]',\n            'min-w-[44px]',\n            'touch-manipulation',\n            'select-none',\n            'text-base',\n            'px-4',\n            'py-3'\n          ],\n          className\n        )}\n        onClick={handleClick}\n        onTouchEnd={handleTouchEnd}\n        {...props}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nMobileButton.displayName = 'MobileButton';","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/optimized-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/payment-method-selector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/payment-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/seo-head.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/simple-file-upload.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/user-avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/ui/ux-improvements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/ContemplatedPlans.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadContemplatedPlans'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadContemplatedPlans, user]","fix":{"range":[1067,1073],"text":"[loadContemplatedPlans, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { \n  CheckCircle, \n  Calendar, \n  DollarSign, \n  Users, \n  Phone, \n  Mail \n} from \"lucide-react\";\n\ninterface ContemplatedPlan {\n  id: string;\n  plan_name: string;\n  amount_paid: number;\n  joined_at: string;\n  contemplated_at: string;\n  group_number: number;\n  professional_name?: string;\n  professional_phone?: string;\n  professional_email?: string;\n}\n\nconst ContemplatedPlans: React.FC = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [contemplatedPlans, setContemplatedPlans] = useState<ContemplatedPlan[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadContemplatedPlans();\n    }\n  }, [user]);\n\n  const loadContemplatedPlans = async () => {\n    try {\n      console.log('🔍 Buscando planos contemplados para usuário:', user?.id);\n      \n      // Buscar participações do usuário em grupos contemplados\n      const { data: participations, error } = await supabase\n        .from('group_participants')\n        .select(`\n          *,\n          plan_groups!inner (\n            id,\n            group_number,\n            status,\n            contemplated_at,\n            service_id\n          )\n        `)\n        .eq('user_id', user?.id)\n        .eq('plan_groups.status', 'contemplated');\n\n      if (error) {\n        console.error('❌ Erro ao buscar planos contemplados:', error);\n        return;\n      }\n\n      console.log('📊 Dados retornados:', participations);\n\n      if (participations && participations.length > 0) {\n        // Para cada participação, buscar dados do plano separadamente\n        const formattedPlans: ContemplatedPlan[] = [];\n        \n        for (const participation of participations) {\n          if (participation.plan_groups?.contemplated_at && participation.plan_groups?.service_id) {\n            // Buscar dados do plano\n            const { data: planData } = await supabase\n              .from('custom_plans')\n              .select('name, professional_id')\n              .eq('id', participation.plan_groups.service_id)\n              .single();\n            \n            let professionalData = null;\n            if (planData?.professional_id) {\n              const { data: professional } = await supabase\n                .from('profiles')\n                .select('full_name, phone, email')\n                .eq('id', planData.professional_id)\n                .single();\n              professionalData = professional;\n            }\n            \n            formattedPlans.push({\n              id: participation.id,\n              plan_name: planData?.name || 'Plano não identificado',\n              amount_paid: participation.amount_paid,\n              joined_at: participation.joined_at,\n              contemplated_at: participation.plan_groups.contemplated_at,\n              group_number: participation.plan_groups.group_number,\n              professional_name: professionalData?.full_name,\n              professional_phone: professionalData?.phone,\n              professional_email: professionalData?.email,\n            });\n          }\n        }\n\n        setContemplatedPlans(formattedPlans);\n        console.log('✅ Planos contemplados encontrados:', formattedPlans.length);\n      } else {\n        console.log('ℹ️ Nenhum plano contemplado encontrado');\n      }\n    } catch (error) {\n      console.error('💥 Erro ao carregar planos contemplados:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (contemplatedPlans.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6 text-center\">\n          <CheckCircle className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">Nenhum plano contemplado</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Você ainda não foi contemplado em nenhum grupo.\n          </p>\n          <Button onClick={() => navigate('/usuario/planos')}>\n            Ver Planos Disponíveis\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2 mb-4\">\n        <CheckCircle className=\"h-6 w-6 text-green-600\" />\n        <h2 className=\"text-xl font-semibold\">Planos Contemplados</h2>\n        <Badge className=\"bg-green-500 text-white\">{contemplatedPlans.length}</Badge>\n      </div>\n\n      {contemplatedPlans.map((plan) => (\n        <Card key={plan.id} className=\"border-l-4 border-l-green-500\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg text-green-600\">\n                  {plan.plan_name}\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Grupo {plan.group_number} • Contemplado em{' '}\n                  {new Date(plan.contemplated_at).toLocaleDateString('pt-BR')}\n                </p>\n              </div>\n              <Badge className=\"bg-green-500 text-white\">Contemplado</Badge>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Informações da participação */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">\n                  Valor pago: R$ {plan.amount_paid.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">\n                  Entrada: {new Date(plan.joined_at).toLocaleDateString('pt-BR')}\n                </span>\n              </div>\n            </div>\n\n            {/* Informações do profissional */}\n            {(plan.professional_name || plan.professional_phone || plan.professional_email) && (\n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-green-800 mb-2\">\n                  Entre em contato com o profissional para agendar seu serviço:\n                </h4>\n                \n                {plan.professional_name && (\n                  <p className=\"text-green-700 font-medium mb-2\">\n                    {plan.professional_name}\n                  </p>\n                )}\n                \n                <div className=\"flex flex-col gap-2\">\n                  {plan.professional_phone && (\n                    <div className=\"flex items-center gap-2 text-green-700\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">{plan.professional_phone}</span>\n                    </div>\n                  )}\n                  \n                  {plan.professional_email && (\n                    <div className=\"flex items-center gap-2 text-green-700\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">{plan.professional_email}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2 mt-3\">\n                  {plan.professional_phone && (\n                    <Button \n                      size=\"sm\"\n                      onClick={() => window.open(`tel:${plan.professional_phone}`)}\n                      className=\"flex items-center gap-1 bg-green-600 hover:bg-green-700\"\n                    >\n                      <Phone className=\"h-3 w-3\" />\n                      Ligar\n                    </Button>\n                  )}\n                  \n                  {plan.professional_email && (\n                    <Button \n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => window.open(`mailto:${plan.professional_email}`)}\n                      className=\"flex items-center gap-1 border-green-600 text-green-600 hover:bg-green-50\"\n                    >\n                      <Mail className=\"h-3 w-3\" />\n                      Email\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default ContemplatedPlans;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/CreditBalance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/DigitalVoucher.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVouchers'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadVouchers, user]","fix":{"range":[956,962],"text":"[loadVouchers, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Gift, \n  Download, \n  Share, \n  QrCode,\n  Calendar,\n  User\n} from 'lucide-react';\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Voucher {\n  id: string;\n  group_name: string;\n  voucher_code: string;\n  value: number;\n  status: string;\n  created_at: string;\n  expires_at: string;\n}\n\nexport function DigitalVoucher() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [vouchers, setVouchers] = useState<Voucher[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadVouchers();\n  }, [user]);\n\n  const loadVouchers = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    try {\n      // Buscar grupos que o usuário ganhou usando group_participants\n      const { data: participations } = await supabase\n        .from('group_participants')\n        .select(`\n          id,\n          group_id,\n          status,\n          joined_at,\n          amount_paid\n        `)\n        .eq('user_id', user.id);\n\n      if (participations) {\n        // Simular vouchers baseado nas participações\n        const mockVouchers: Voucher[] = participations\n          .filter(p => p.status === 'active')\n          .map(participation => ({\n            id: participation.id,\n            group_name: `Grupo ${participation.group_id?.slice(0, 8)}`,\n            voucher_code: `VOUCHER-${participation.id.slice(0, 8).toUpperCase()}`,\n            value: Number(participation.amount_paid) * 10, // 10x o valor pago\n            status: 'active',\n            created_at: participation.joined_at || new Date().toISOString(),\n            expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString() // 1 ano\n          }));\n\n        setVouchers(mockVouchers);\n      }\n\n    } catch (error) {\n      console.error('Erro ao carregar vouchers:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar seus vouchers.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('pt-BR');\n  };\n\n  const downloadVoucher = (voucher: Voucher) => {\n    toast({\n      title: \"Download iniciado\",\n      description: `Baixando voucher ${voucher.voucher_code}`,\n    });\n  };\n\n  const shareVoucher = (voucher: Voucher) => {\n    if (navigator.share) {\n      navigator.share({\n        title: 'Meu Voucher Digital',\n        text: `Voucher no valor de ${formatCurrency(voucher.value)}`,\n        url: window.location.href\n      });\n    } else {\n      navigator.clipboard.writeText(`Voucher: ${voucher.voucher_code} - Valor: ${formatCurrency(voucher.value)}`);\n      toast({\n        title: \"Copiado!\",\n        description: \"Informações do voucher copiadas para a área de transferência.\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"default\">Ativo</Badge>;\n      case 'used':\n        return <Badge variant=\"secondary\">Usado</Badge>;\n      case 'expired':\n        return <Badge variant=\"destructive\">Expirado</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Meus Vouchers Digitais</h2>\n        <p className=\"text-muted-foreground\">\n          Seus vouchers conquistados através das participações em grupos\n        </p>\n      </div>\n\n      {vouchers.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Gift className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nenhum voucher disponível</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Participe de grupos para ganhar vouchers digitais\n            </p>\n            <Alert>\n              <AlertDescription>\n                Quando você for contemplado em um grupo, receberá um voucher digital no valor correspondente.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {vouchers.map((voucher) => (\n            <Card key={voucher.id} className=\"relative\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Gift className=\"h-5 w-5\" />\n                    {voucher.group_name}\n                  </CardTitle>\n                  {getStatusBadge(voucher.status)}\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Valor do Voucher */}\n                <div className=\"text-center py-6 bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg\">\n                  <div className=\"text-3xl font-bold text-primary\">\n                    {formatCurrency(voucher.value)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">Valor do Voucher</p>\n                </div>\n\n                {/* Código do Voucher */}\n                <div className=\"text-center\">\n                  <div className=\"inline-flex items-center gap-2 px-3 py-2 bg-muted rounded-lg\">\n                    <QrCode className=\"h-4 w-4\" />\n                    <code className=\"font-mono text-sm\">{voucher.voucher_code}</code>\n                  </div>\n                </div>\n\n                {/* Informações */}\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4\" />\n                      Criado em:\n                    </span>\n                    <span>{formatDate(voucher.created_at)}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4\" />\n                      Expira em:\n                    </span>\n                    <span>{formatDate(voucher.expires_at)}</span>\n                  </div>\n                </div>\n\n                {/* Ações */}\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => downloadVoucher(voucher)}\n                    className=\"flex-1\"\n                  >\n                    <Download className=\"h-4 w-4 mr-1\" />\n                    Baixar\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => shareVoucher(voucher)}\n                    className=\"flex-1\"\n                  >\n                    <Share className=\"h-4 w-4 mr-1\" />\n                    Compartilhar\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Informações sobre uso */}\n      <Alert>\n        <Gift className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Como usar seus vouchers:</strong> Apresente o código do voucher em estabelecimentos parceiros \n          ou utilize-o em compras online na nossa plataforma. Cada voucher tem validade de 1 ano.\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/DigitalWallet.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateReferralLink', 'loadGroupProgress', 'loadReferralRewards', and 'loadWalletData'. Either include them or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [generateReferralLink, loadGroupProgress, loadReferralRewards, loadWalletData, user]","fix":{"range":[1847,1853],"text":"[generateReferralLink, loadGroupProgress, loadReferralRewards, loadWalletData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2484,2487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2484,2487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3359,3362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3359,3362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4191,4194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4191,4194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Wallet, \n  TrendingUp, \n  Users, \n  Award, \n  DollarSign,\n  Eye,\n  Copy,\n  Share2,\n  Gift,\n  Target,\n  CheckCircle,\n  Clock,\n  Star\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface WalletData {\n  available_balance: number;\n  pending_balance: number;\n  total_earned: number;\n  total_withdrawn: number;\n  pix_key: string;\n  pix_key_type: string;\n}\n\ninterface GroupProgress {\n  group_id: string;\n  current_members: number;\n  progress_message: string;\n  status: string;\n  created_at: string;\n  completed_at?: string;\n  members: Array<{\n    user_id: string;\n    position: number;\n    referrer_id?: string;\n    joined_at: string;\n    is_validated: boolean;\n  }>;\n}\n\ninterface ReferralReward {\n  id: string;\n  validation_step: number;\n  reward_amount: number;\n  reward_status: string;\n  validated_at: string;\n  referred_user?: string;\n}\n\nexport const DigitalWallet = () => {\n  const [walletData, setWalletData] = useState<WalletData | null>(null);\n  const [groupProgress, setGroupProgress] = useState<GroupProgress[]>([]);\n  const [referralRewards, setReferralRewards] = useState<ReferralReward[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [referralLink, setReferralLink] = useState(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadWalletData();\n      loadGroupProgress();\n      loadReferralRewards();\n      generateReferralLink();\n    }\n  }, [user]);\n\n  const loadWalletData = async () => {\n    try {\n      // Buscar dados de créditos do usuário\n      const { data, error } = await supabase\n        .from('user_credits')\n        .select('*')\n        .eq('user_id', user?.id)\n        .single();\n\n      if (data) {\n        setWalletData({\n          available_balance: data.available_credits,\n          pending_balance: data.pending_credits || 0,\n          total_earned: data.total_credits,\n          total_withdrawn: Math.max(0, data.total_credits - data.available_credits),\n          pix_key: 'não informado',\n          pix_key_type: 'cpf'\n        });\n      }\n    } catch (error: any) {\n      console.error('Error loading wallet:', error);\n    }\n  };\n\n  const loadGroupProgress = async () => {\n    try {\n      // Buscar participações do usuário\n      const { data, error } = await supabase\n        .from('group_participants')\n        .select('*, plan_groups(*)')\n        .eq('user_id', user?.id)\n        .order('joined_at', { ascending: false });\n\n      if (data) {\n        const formattedGroups = data.map(participant => ({\n          group_id: participant.id,\n          current_members: participant.plan_groups?.current_participants || 1,\n          progress_message: `Participando desde ${new Date(participant.joined_at).toLocaleDateString()}`,\n          status: participant.status,\n          created_at: participant.joined_at,\n          members: [] // Mock empty array\n        }));\n        setGroupProgress(formattedGroups);\n      }\n    } catch (error: any) {\n      console.error('Error loading groups:', error);\n    }\n  };\n\n  const loadReferralRewards = async () => {\n    try {\n      // Buscar transações de crédito do usuário como recompensas\n      const { data, error } = await supabase\n        .from('credit_transactions')\n        .select('*')\n        .eq('user_id', user?.id)\n        .eq('type', 'earned')\n        .order('created_at', { ascending: false });\n\n      if (data) {\n        const formattedRewards = data.map((transaction, index) => ({\n          id: transaction.id,\n          validation_step: index + 1,\n          reward_amount: transaction.amount,\n          reward_status: 'credited',\n          validated_at: transaction.created_at,\n          referred_user: transaction.description\n        }));\n        setReferralRewards(formattedRewards);\n      }\n    } catch (error: any) {\n      console.error('Error loading referrals:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateReferralLink = () => {\n    if (user?.id) {\n      const link = `${window.location.origin}/registro?ref=${user.id}`;\n      setReferralLink(link);\n    }\n  };\n\n  const copyReferralLink = async () => {\n    try {\n      await navigator.clipboard.writeText(referralLink);\n      toast({\n        title: \"Link copiado!\",\n        description: \"Seu link de indicação foi copiado para a área de transferência.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar\",\n        description: \"Não foi possível copiar o link.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const shareReferralLink = async () => {\n    const shareData = {\n      title: \"Venha fazer parte do Amigo do Peito!\",\n      text: \"Junte-se ao melhor sistema de grupos de WhatsApp e ganhe dinheiro com indicações!\",\n      url: referralLink\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        copyReferralLink();\n      }\n    } else {\n      copyReferralLink();\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const getProgressPercentage = (current: number, total: number = 9) => {\n    return Math.min((current / total) * 100, 100);\n  };\n\n  const getMilestoneColor = (members: number) => {\n    if (members >= 9) return \"text-green-600\";\n    if (members >= 6) return \"text-blue-600\";\n    if (members >= 3) return \"text-yellow-600\";\n    return \"text-gray-600\";\n  };\n\n  const getMilestoneBadge = (members: number) => {\n    if (members >= 9) return { label: \"Completo\", variant: \"default\" as const };\n    if (members >= 6) return { label: \"Quase lá\", variant: \"secondary\" as const };\n    if (members >= 3) return { label: \"Progredindo\", variant: \"outline\" as const };\n    return { label: \"Iniciando\", variant: \"outline\" as const };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Wallet Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <Wallet className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Saldo Disponível</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(walletData?.available_balance || 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-yellow-100 rounded-full\">\n                <Clock className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pendente</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  {formatCurrency(walletData?.pending_balance || 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Ganho</p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {formatCurrency(walletData?.total_earned || 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-full\">\n                <DollarSign className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Já Sacado</p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {formatCurrency(walletData?.total_withdrawn || 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Referral Link */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"h-5 w-5\" />\n            Seu Link de Indicação\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1 p-3 bg-muted rounded-lg text-sm font-mono\">\n              {referralLink}\n            </div>\n            <Button variant=\"outline\" onClick={copyReferralLink}>\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copiar\n            </Button>\n            <Button onClick={shareReferralLink}>\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Compartilhar\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Compartilhe este link para ganhar R$ 25,00 por cada pessoa que se inscrever no seu grupo!\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Group Progress */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Progresso dos Seus Grupos\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {groupProgress.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Target className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhum grupo ativo</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Crie seu primeiro grupo e comece a ganhar dinheiro com indicações!\n              </p>\n              <Button>Criar Primeiro Grupo</Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {groupProgress.map((group) => {\n                const milestone = getMilestoneBadge(group.current_members);\n                const progressPercent = getProgressPercentage(group.current_members);\n                \n                return (\n                  <div key={group.group_id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-semibold\">Grupo #{group.group_id.slice(-6)}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Criado em {formatDate(group.created_at)}\n                        </p>\n                      </div>\n                      <Badge variant={milestone.variant}>{milestone.label}</Badge>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>Progresso: {group.current_members}/9 membros</span>\n                          <span className={getMilestoneColor(group.current_members)}>\n                            {progressPercent.toFixed(0)}%\n                          </span>\n                        </div>\n                        <Progress value={progressPercent} className=\"h-2\" />\n                      </div>\n\n                      <p className=\"text-sm text-muted-foreground\">\n                        {group.progress_message}\n                      </p>\n\n                      {/* Members List */}\n                      <div className=\"grid grid-cols-3 md:grid-cols-9 gap-2\">\n                        {Array.from({ length: 9 }, (_, index) => {\n                          const member = group.members.find(m => m.position === index + 1);\n                          return (\n                            <div\n                              key={index}\n                              className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-semibold ${\n                                member \n                                  ? 'bg-green-100 text-green-800' \n                                  : 'bg-gray-100 text-gray-400'\n                              }`}\n                            >\n                              {member ? (\n                                <CheckCircle className=\"h-4 w-4\" />\n                              ) : (\n                                index + 1\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n\n                      {/* Milestones */}\n                      <div className=\"flex justify-between text-xs\">\n                        <div className={`text-center ${group.current_members >= 3 ? 'text-green-600' : 'text-gray-400'}`}>\n                          <div className=\"font-semibold\">3 membros</div>\n                          <div>+R$ 50</div>\n                        </div>\n                        <div className={`text-center ${group.current_members >= 6 ? 'text-green-600' : 'text-gray-400'}`}>\n                          <div className=\"font-semibold\">6 membros</div>\n                          <div>+R$ 100</div>\n                        </div>\n                        <div className={`text-center ${group.current_members >= 9 ? 'text-green-600' : 'text-gray-400'}`}>\n                          <div className=\"font-semibold\">9 membros</div>\n                          <div>+R$ 500</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Referral Rewards */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Award className=\"h-5 w-5\" />\n            Recompensas por Indicações\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {referralRewards.length === 0 ? (\n            <div className=\"text-center py-6\">\n              <Gift className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n              <p className=\"text-muted-foreground\">\n                Suas recompensas por indicações aparecerão aqui\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {referralRewards.slice(0, 10).map((reward) => (\n                <div key={reward.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Star className=\"h-4 w-4 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Indicação #{reward.validation_step}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {formatDate(reward.validated_at)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-green-600\">\n                      {formatCurrency(reward.reward_amount)}\n                    </p>\n                    <Badge \n                      variant={reward.reward_status === 'credited' ? 'default' : 'secondary'}\n                      className=\"text-xs\"\n                    >\n                      {reward.reward_status === 'credited' ? 'Creditado' : 'Pendente'}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/EnhancedUserDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserData, user]","fix":{"range":[1732,1738],"text":"[loadUserData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5855,5858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5855,5858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13918,13921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13918,13921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { LoadingSpinner, SkeletonCard } from \"@/components/LoadingComponents\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Clock, \n  DollarSign, \n  Share2, \n  CheckCircle, \n  AlertCircle,\n  TrendingUp,\n  Gift,\n  Copy,\n  ExternalLink\n} from \"lucide-react\";\n\ninterface PlanParticipation {\n  id: string;\n  plan_id: string;\n  payment_status: string;\n  contemplated: boolean;\n  position_in_queue: number;\n  entry_paid_at: string;\n  plan: {\n    title: string;\n    description: string;\n    entry_value: number;\n    contemplation_value: number;\n    max_participants: number;\n  };\n}\n\ninterface UserStats {\n  total_referrals: number;\n  pending_commission: number;\n  total_earned: number;\n  active_plans: number;\n}\n\nexport function EnhancedUserDashboard() {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [plans, setPlans] = useState<PlanParticipation[]>([]);\n  const [stats, setStats] = useState<UserStats | null>(null);\n  const [referralCode, setReferralCode] = useState<string>(\"\");\n  const [activeTab, setActiveTab] = useState(\"plans\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n    }\n  }, [user]);\n\n  const loadUserData = async () => {\n    try {\n      setLoading(true);\n      await Promise.all([\n        loadUserPlans(),\n        loadUserStats(),\n        loadReferralCode(),\n      ]);\n    } catch (error) {\n      console.error(\"Error loading user data:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Falha ao carregar dados do usuário\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUserPlans = async () => {\n    try {\n      // Buscar participações do usuário\n      const { data, error } = await supabase\n        .from(\"group_participants\")\n        .select(\"*, plan_groups(*)\")\n        .eq(\"user_id\", user?.id)\n        .order(\"joined_at\", { ascending: false });\n\n      if (data) {\n        const formattedPlans = data.map((participant, index) => ({\n          id: participant.id,\n          plan_id: participant.group_id,\n          payment_status: 'paid',\n          contemplated: participant.plan_groups?.status === 'complete',\n          position_in_queue: index + 1,\n          entry_paid_at: participant.joined_at,\n          plan: {\n            title: `Grupo ${participant.plan_groups?.group_number || 'N/A'}`,\n            description: 'Grupo de contemplação',\n            entry_value: participant.amount_paid || 100,\n            contemplation_value: participant.plan_groups?.target_amount || 1000,\n            max_participants: participant.plan_groups?.max_participants || 10\n          }\n        }));\n        setPlans(formattedPlans);\n      }\n    } catch (error) {\n      console.error('Error loading plans:', error);\n    }\n  };\n\n  const loadUserStats = async () => {\n    // Mock stats - replace with real data\n    setStats({\n      total_referrals: 5,\n      pending_commission: 150.00,\n      total_earned: 320.50,\n      active_plans: plans.length,\n    });\n  };\n\n  const loadReferralCode = async () => {\n    // Gerar código baseado no ID do usuário\n    if (user?.id) {\n      setReferralCode(user.id.slice(-8).toUpperCase());\n    }\n  };\n\n  const copyReferralLink = () => {\n    const link = `${window.location.origin}/?ref=${referralCode}`;\n    navigator.clipboard.writeText(link);\n    toast({\n      title: \"Link copiado!\",\n      description: \"Compartilhe este link para ganhar comissões\",\n    });\n  };\n\n  const shareReferralLink = () => {\n    const link = `${window.location.origin}/?ref=${referralCode}`;\n    const text = \"Participe dos meus grupos de contemplação e realize seus sonhos!\";\n    \n    if (navigator.share) {\n      navigator.share({\n        title: \"Convite para Grupo de Contemplação\",\n        text: text,\n        url: link,\n      });\n    } else {\n      // Fallback for browsers that don't support Web Share API\n      const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(text + \" \" + link)}`;\n      window.open(whatsappUrl, \"_blank\");\n    }\n  };\n\n  const getStatusBadge = (status: string, contemplated: boolean) => {\n    if (contemplated) {\n      return <Badge className=\"bg-green-100 text-green-800\">Contemplado</Badge>;\n    }\n    \n    switch (status) {\n      case \"paid\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Ativo</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pendente</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Inativo</Badge>;\n    }\n  };\n\n  const calculateProgress = (position: number, maxParticipants: number) => {\n    return Math.max(0, ((maxParticipants - position) / maxParticipants) * 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto p-4 space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <SkeletonCard key={i} />\n          ))}\n        </div>\n        <SkeletonCard />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n      {/* Welcome Header */}\n      <div className=\"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground rounded-lg p-6\">\n        <h1 className=\"text-2xl font-bold mb-2\">\n          Olá, {(user as any)?.user_metadata?.full_name || user?.email?.split('@')[0] || \"Usuário\"}! 👋\n        </h1>\n        <p className=\"opacity-90\">\n          Acompanhe seus grupos de contemplação e indicações\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Planos Ativos</p>\n                <p className=\"text-2xl font-bold\">{stats?.active_plans || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Indicações</p>\n                <p className=\"text-2xl font-bold\">{stats?.total_referrals || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                <Clock className=\"h-5 w-5 text-yellow-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Comissão Pendente</p>\n                <p className=\"text-2xl font-bold\">R$ {stats?.pending_commission?.toFixed(2) || \"0,00\"}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <DollarSign className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-muted-foreground\">Disponível para Saque</p>\n                <p className=\"text-2xl font-bold\">R$ 320,75</p>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => window.location.href = '/usuario/saques'}\n              >\n                Sacar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"plans\">Meus Planos</TabsTrigger>\n          <TabsTrigger value=\"referrals\">Indicações</TabsTrigger>\n          <TabsTrigger value=\"profile\">Perfil</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"plans\" className=\"space-y-4\">\n          {plans.length === 0 ? (\n            <Alert>\n              <Gift className=\"h-4 w-4\" />\n              <AlertDescription>\n                Você ainda não participa de nenhum plano. \n                <Button variant=\"link\" className=\"p-0 h-auto ml-1\">\n                  Explore nossos planos disponíveis\n                </Button>\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <div className=\"space-y-4\">\n              {plans.map((plan) => (\n                <Card key={plan.id} className=\"relative overflow-hidden\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{plan.plan.title}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {plan.plan.description}\n                        </p>\n                      </div>\n                      {getStatusBadge(plan.payment_status, plan.contemplated)}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Valor Pago</p>\n                        <p className=\"font-semibold\">R$ {plan.plan.entry_value.toFixed(2)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Meta</p>\n                        <p className=\"font-semibold\">R$ {plan.plan.contemplation_value.toFixed(2)}</p>\n                      </div>\n                    </div>\n\n                    {!plan.contemplated && plan.payment_status === \"paid\" && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Posição na fila: #{plan.position_in_queue}</span>\n                          <span>{plan.plan.max_participants - plan.position_in_queue} para frente</span>\n                        </div>\n                        <Progress \n                          value={calculateProgress(plan.position_in_queue, plan.plan.max_participants)} \n                          className=\"h-2\"\n                        />\n                      </div>\n                    )}\n\n                    {plan.contemplated && (\n                      <Alert className=\"border-green-200 bg-green-50\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <AlertDescription className=\"text-green-700\">\n                          🎉 Parabéns! Você foi contemplado neste plano!\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"referrals\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Share2 className=\"h-5 w-5\" />\n                <span>Seu Link de Indicação</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2 p-3 bg-muted rounded-lg\">\n                <code className=\"flex-1 text-sm\">\n                  {window.location.origin}/?ref={referralCode}\n                </code>\n                <Button size=\"sm\" variant=\"outline\" onClick={copyReferralLink}>\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <Button onClick={shareReferralLink} className=\"w-full\">\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Compartilhar Link\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  Ver Estatísticas\n                </Button>\n              </div>\n\n              <Alert>\n                <TrendingUp className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Ganhe 10% de comissão para cada pessoa que se cadastrar usando seu link!\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"profile\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Informações do Perfil</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Nome</label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {(user as any)?.user_metadata?.full_name || user?.email?.split('@')[0] || \"Não informado\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Email</label>\n                  <p className=\"text-sm text-muted-foreground\">{user?.email}</p>\n                </div>\n                <Button variant=\"outline\">Editar Perfil</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/GroupDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserGroups'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserGroups, user]","fix":{"range":[1182,1188],"text":"[loadUserGroups, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Share2, \n  Copy, \n  CheckCircle, \n  Clock,\n  ExternalLink,\n  Calendar\n} from \"lucide-react\";\n\ninterface GroupData {\n  id: string;\n  referral_code: string;\n  status: 'forming' | 'complete' | 'cancelled';\n  current_participants: number;\n  max_participants: number;\n  current_amount: number;\n  target_amount: number;\n  created_at: string;\n  contemplated_at: string | null;\n  service_name: string;\n  service_category: string;\n  user_amount_paid: number;\n}\n\nexport const GroupDashboard = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [groups, setGroups] = useState<GroupData[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadUserGroups();\n    }\n  }, [user]);\n\n  const loadUserGroups = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase\n        .from('group_participants')\n        .select(`\n          amount_paid,\n          joined_at,\n          status,\n          plan_groups!inner(\n            id,\n            referral_code,\n            status,\n            current_participants,\n            max_participants,\n            current_amount,\n            target_amount,\n            created_at,\n            contemplated_at,\n            service_id\n          )\n        `)\n        .eq('user_id', user?.id)\n        .eq('status', 'active')\n        .order('joined_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Para cada grupo, buscar os detalhes do plano\n      const groupsWithPlans = await Promise.all(\n        (data || []).map(async (item) => {\n          const { data: planData } = await supabase\n            .from('custom_plans')\n            .select('name, category')\n            .eq('id', item.plan_groups.service_id)\n            .single();\n\n          return {\n            id: item.plan_groups.id,\n            referral_code: item.plan_groups.referral_code,\n            status: item.plan_groups.status as 'forming' | 'complete' | 'cancelled',\n            current_participants: item.plan_groups.current_participants,\n            max_participants: item.plan_groups.max_participants,\n            current_amount: item.plan_groups.current_amount,\n            target_amount: item.plan_groups.target_amount,\n            created_at: item.plan_groups.created_at,\n            contemplated_at: item.plan_groups.contemplated_at,\n            service_name: planData?.name || 'Serviço',\n            service_category: planData?.category || 'service',\n            user_amount_paid: item.amount_paid\n          };\n        })\n      );\n\n      setGroups(groupsWithPlans);\n    } catch (error) {\n      console.error('Erro ao carregar grupos:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar seus grupos.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyReferralLink = async (referralCode: string) => {\n    const linkToCopy = `${window.location.origin}/plano/${groups[0]?.id}?ref=${referralCode}`;\n    \n    try {\n      await navigator.clipboard.writeText(linkToCopy);\n      toast({\n        title: \"✅ Link copiado!\",\n        description: \"Link de convite copiado para a área de transferência.\",\n        duration: 3000\n      });\n    } catch (error) {\n      // Fallback para dispositivos móveis\n      const textArea = document.createElement('textarea');\n      textArea.value = linkToCopy;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-9999px';\n      document.body.appendChild(textArea);\n      textArea.select();\n      \n      try {\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        toast({\n          title: \"✅ Link copiado!\",\n          description: \"Link de convite copiado para a área de transferência.\",\n        });\n      } catch (fallbackError) {\n        document.body.removeChild(textArea);\n        toast({\n          title: \"Erro ao copiar\",\n          description: \"Não foi possível copiar automaticamente. Tente novamente.\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const shareReferralLink = (referralCode: string) => {\n    const linkToShare = `${window.location.origin}/plano/${groups[0]?.id}?ref=${referralCode}`;\n    \n    if (navigator.share) {\n      navigator.share({\n        title: \"Participe do meu grupo!\",\n        text: `Venha fazer parte do meu grupo para ${groups[0]?.service_name} e economizar!`,\n        url: linkToShare,\n      });\n    } else {\n      copyReferralLink(referralCode);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'complete': return 'bg-green-100 text-green-800';\n      case 'forming': return 'bg-blue-100 text-blue-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'complete': return 'Completo';\n      case 'forming': return 'Formando';\n      case 'cancelled': return 'Cancelado';\n      default: return status;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  if (groups.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Users className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n          <h3 className=\"text-xl font-semibold mb-2\">Nenhum grupo encontrado</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Você ainda não está participando de nenhum grupo.\n          </p>\n          <Button onClick={() => window.location.href = '/plans'}>\n            Escolher um Plano\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Meus Grupos</h2>\n        <Badge variant=\"secondary\">\n          {groups.length} grupo{groups.length !== 1 ? 's' : ''}\n        </Badge>\n      </div>\n\n      {groups.map((group) => (\n        <Card key={group.id}>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  {group.service_name}\n                  <Badge className={getStatusColor(group.status)}>\n                    {getStatusLabel(group.status)}\n                  </Badge>\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Código do grupo: <span className=\"font-mono font-medium\">{group.referral_code}</span>\n                </p>\n              </div>\n              {group.status === 'complete' && (\n                <div className=\"flex items-center gap-2 text-green-600\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  <span className=\"text-sm font-medium\">Grupo Completo!</span>\n                </div>\n              )}\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Progress */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Progresso do Grupo</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {group.current_participants}/{group.max_participants} pessoas\n                </span>\n              </div>\n              <Progress \n                value={(group.current_participants / group.max_participants) * 100} \n                className=\"h-2\"\n              />\n              <div className=\"flex items-center justify-between mt-1 text-xs text-muted-foreground\">\n                <span>R$ {group.current_amount.toLocaleString()} arrecadado</span>\n                <span>Meta: R$ {group.target_amount.toLocaleString()}</span>\n              </div>\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <Users className=\"h-5 w-5 mx-auto mb-1 text-muted-foreground\" />\n                <div className=\"text-sm font-medium\">{group.current_participants}</div>\n                <div className=\"text-xs text-muted-foreground\">Participantes</div>\n              </div>\n              \n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <Clock className=\"h-5 w-5 mx-auto mb-1 text-muted-foreground\" />\n                <div className=\"text-sm font-medium\">\n                  {Math.max(0, group.max_participants - group.current_participants)}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Restam</div>\n              </div>\n\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <div className=\"text-sm font-medium\">R$ {group.user_amount_paid.toLocaleString()}</div>\n                <div className=\"text-xs text-muted-foreground\">Sua contribuição</div>\n              </div>\n\n              <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                <Calendar className=\"h-5 w-5 mx-auto mb-1 text-muted-foreground\" />\n                <div className=\"text-sm font-medium\">\n                  {new Date(group.created_at).toLocaleDateString('pt-BR')}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Criado em</div>\n              </div>\n            </div>\n\n            {/* Actions */}\n            {group.status === 'forming' && (\n              <div className=\"space-y-3\">\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Share2 className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"font-medium text-blue-800\">Compartilhe e complete seu grupo</span>\n                  </div>\n                  <p className=\"text-sm text-blue-600 mb-3\">\n                    Compartilhe o link abaixo para que mais {group.max_participants - group.current_participants} \n                    {group.max_participants - group.current_participants === 1 ? ' pessoa se junte' : ' pessoas se juntem'} \n                    ao seu grupo:\n                  </p>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => copyReferralLink(group.referral_code)}\n                      className=\"flex-1\"\n                    >\n                      <Copy className=\"h-4 w-4 mr-2\" />\n                      Copiar Link\n                    </Button>\n                    <Button \n                      size=\"sm\"\n                      onClick={() => shareReferralLink(group.referral_code)}\n                      className=\"flex-1\"\n                    >\n                      <Share2 className=\"h-4 w-4 mr-2\" />\n                      Compartilhar\n                    </Button>\n                  </div>\n                  \n                  <div className=\"mt-3 p-2 bg-white rounded border text-xs font-mono text-gray-600 break-all\">\n                    {`${window.location.origin}/plano/${group.id}?ref=${group.referral_code}`}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {group.status === 'complete' && group.contemplated_at && (\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"font-medium text-green-800\">Parabéns! Grupo Completo</span>\n                </div>\n                <p className=\"text-sm text-green-600 mb-3\">\n                  Seu grupo foi contemplado em{' '}\n                  {new Date(group.contemplated_at).toLocaleDateString('pt-BR')}. \n                  Agora você pode agendar seu serviço!\n                </p>\n                <Button size=\"sm\" className=\"w-full\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Agendar Serviço\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/ParticipationDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadParticipationData' and 'loadReferralData'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadParticipationData, loadReferralData, user]","fix":{"range":[1750,1756],"text":"[loadParticipationData, loadReferralData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Target, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  TrendingUp,\n  Calendar,\n  Gift,\n  Copy\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface PlanParticipation {\n  id: string;\n  plan_id: string;\n  group_id: string;\n  contemplation_status: string;\n  payment_status: string;\n  contemplation_date?: string;\n  joined_at: string;\n  plan_groups: {\n    current_participants: number;\n    status: string;\n    start_date?: string;\n    end_date?: string;\n  };\n  custom_plans: {\n    name: string;\n    entry_price: number;\n    total_price: number;\n    max_participants: number;\n  };\n}\n\ninterface ReferralData {\n  referralCode: string;\n  totalReferrals: number;\n  confirmedReferrals: number;\n  pendingReferrals: number;\n}\n\nexport const ParticipationDashboard = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [participations, setParticipations] = useState<PlanParticipation[]>([]);\n  const [referralData, setReferralData] = useState<ReferralData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [copySuccess, setCopySuccess] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadParticipationData();\n      loadReferralData();\n    }\n  }, [user]);\n\n  const loadParticipationData = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('group_participants')\n        .select(`\n          *,\n          plan_groups(*)\n        `)\n        .eq('user_id', user?.id)\n        .order('joined_at', { ascending: false });\n\n      if (error) throw error;\n      \n      if (data) {\n        const formattedParticipations: PlanParticipation[] = data.map(participation => ({\n          id: participation.id,\n          plan_id: participation.group_id,\n          group_id: participation.group_id,\n          contemplation_status: participation.plan_groups?.status === 'complete' ? 'contemplated' : 'waiting',\n          payment_status: 'paid', // Default since they're participants\n          contemplation_date: participation.plan_groups?.contemplated_at,\n          joined_at: participation.joined_at,\n          plan_groups: {\n            current_participants: participation.plan_groups?.current_participants || 0,\n            status: participation.plan_groups?.status || 'forming',\n            start_date: participation.plan_groups?.created_at,\n            end_date: participation.plan_groups?.contemplated_at,\n          },\n          custom_plans: {\n            name: `Grupo ${participation.plan_groups?.group_number || 'N/A'}`,\n            entry_price: participation.amount_paid || 100,\n            total_price: participation.plan_groups?.target_amount || 1000,\n            max_participants: participation.plan_groups?.max_participants || 10,\n          }\n        }));\n        setParticipations(formattedParticipations);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar participações:', error);\n    }\n  };\n\n  const loadReferralData = async () => {\n    try {\n      // Buscar dados do perfil do usuário para código de indicação\n      const { data: profileData, error: profileError } = await supabase\n        .from('profiles')\n        .select('referral_code')\n        .eq('user_id', user?.id)\n        .single();\n\n      // Contar referências diretas\n      const { count: totalReferrals } = await supabase\n        .from('profiles')\n        .select('id', { count: 'exact' })\n        .eq('referred_by', user?.id);\n\n      console.log('Profile data:', profileData);\n      console.log('User ID:', user?.id);\n\n      if (profileData?.referral_code) {\n        const referralCode = profileData.referral_code;\n        console.log('Código de referência encontrado:', referralCode);\n        \n        setReferralData({\n          referralCode: referralCode,\n          totalReferrals: totalReferrals || 0,\n          confirmedReferrals: totalReferrals || 0,\n          pendingReferrals: 0\n        });\n      } else {\n        // Fallback: usar parte do ID do usuário\n        const fallbackCode = user?.id?.slice(-8).toUpperCase() || 'N/A';\n        console.log('Usando código fallback:', fallbackCode);\n        \n        setReferralData({\n          referralCode: fallbackCode,\n          totalReferrals: totalReferrals || 0,\n          confirmedReferrals: totalReferrals || 0,\n          pendingReferrals: 0\n        });\n      }\n    } catch (error) {\n      console.error('Erro ao carregar dados de indicação:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusBadge = (contemplationStatus: string, paymentStatus: string) => {\n    if (contemplationStatus === 'contemplated') {\n      return <Badge className=\"bg-green-100 text-green-800\">Contemplado</Badge>;\n    }\n    if (contemplationStatus === 'waiting' && paymentStatus === 'pending') {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Em Andamento</Badge>;\n    }\n    if (paymentStatus === 'paid') {\n      return <Badge className=\"bg-purple-100 text-purple-800\">Finalizado</Badge>;\n    }\n    return <Badge variant=\"secondary\">Aguardando</Badge>;\n  };\n\n  const getProgressPercentage = (currentParticipants: number, maxParticipants: number) => {\n    return Math.min((currentParticipants / maxParticipants) * 100, 100);\n  };\n\n  const copyReferralLink = async () => {\n    if (!referralData?.referralCode) {\n      return;\n    }\n\n    const link = `${window.location.origin}/register?ref=${referralData.referralCode}`;\n    console.log('🚀 Copiando link:', link);\n    \n    try {\n      await navigator.clipboard.writeText(link);\n      console.log('✅ Link copiado!');\n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    } catch (error) {\n      console.log('⚠️ Erro ao copiar, usando fallback');\n      // Fallback simples\n      const input = document.createElement('input');\n      input.value = link;\n      document.body.appendChild(input);\n      input.select();\n      document.execCommand('copy');\n      document.body.removeChild(input);\n      \n      setCopySuccess(true);\n      setTimeout(() => setCopySuccess(false), 2000);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-32\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Participação ativa mais recente\n  const activeParticipation = participations.find(p => \n    p.contemplation_status === 'waiting' && p.payment_status === 'pending'\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Status da Participação Atual */}\n      {activeParticipation ? (\n        <Card className=\"border-primary/20 bg-primary/5\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-primary\" />\n              Plano Atual: {activeParticipation.custom_plans.name}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">\n                  {activeParticipation.plan_groups.current_participants}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Participantes Atuais</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold\">\n                  {activeParticipation.custom_plans.max_participants}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Meta do Grupo</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {activeParticipation.custom_plans.max_participants - activeParticipation.plan_groups.current_participants}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Faltam</div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Progresso do Grupo</span>\n                <span>\n                  {activeParticipation.plan_groups.current_participants}/\n                  {activeParticipation.custom_plans.max_participants}\n                </span>\n              </div>\n              <Progress \n                value={getProgressPercentage(\n                  activeParticipation.plan_groups.current_participants,\n                  activeParticipation.custom_plans.max_participants\n                )} \n                className=\"h-3\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Valor da Entrada:</span>\n                <span className=\"ml-2 font-semibold\">\n                  {formatCurrency(activeParticipation.custom_plans.entry_price)}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">Valor Total:</span>\n                <span className=\"ml-2 font-semibold\">\n                  {formatCurrency(activeParticipation.custom_plans.total_price)}\n                </span>\n              </div>\n            </div>\n\n            {getStatusBadge(activeParticipation.contemplation_status, activeParticipation.payment_status)}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"border-dashed border-2 border-muted\">\n          <CardContent className=\"p-8 text-center\">\n            <Gift className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nenhum plano ativo</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Participe de um plano para começar a formar seu grupo!\n            </p>\n            <Button onClick={() => navigate('/plans')}>Escolher Plano</Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Dados de Indicação */}\n      {referralData && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Status das Indicações */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Minhas Indicações\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {referralData.totalReferrals}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Total</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {referralData.confirmedReferrals}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Confirmadas</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {referralData.pendingReferrals}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Pendentes</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Progresso Pessoal</span>\n                  <span>{referralData.confirmedReferrals}/9</span>\n                </div>\n                <Progress \n                  value={Math.min((referralData.confirmedReferrals / 9) * 100, 100)} \n                  className=\"h-2\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Link de Indicação */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Meu Link de Indicação\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-3 bg-muted rounded-lg\">\n                <div className=\"text-sm font-medium text-muted-foreground mb-1\">\n                  Seu código:\n                </div>\n                <div className=\"font-mono text-lg font-bold\">\n                  {referralData.referralCode}\n                </div>\n              </div>\n\n              <Button onClick={copyReferralLink} className=\"w-full relative\">\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Copiar Link de Indicação\n              </Button>\n              \n              {/* Mensagem de sucesso diretamente abaixo do botão */}\n              {copySuccess && (\n                <div className=\"mt-2 text-green-400 text-center font-semibold animate-in fade-in duration-300\">\n                  ✅ Link copiado!\n                </div>\n              )}\n\n              <div className=\"text-xs text-muted-foreground\">\n                Compartilhe este link para que amigos se juntem ao seu grupo\n              </div>\n              \n              {/* Fallback: mostrar link para cópia manual */}\n              <div className=\"mt-2 p-2 bg-muted rounded text-xs\">\n                <p className=\"font-medium mb-1\">Link completo (caso precise copiar manualmente):</p>\n                <p className=\"font-mono text-muted-foreground break-all select-all\">\n                  {referralData ? `${window.location.origin}/register?ref=${referralData.referralCode}` : 'Carregando...'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Histórico de Participações */}\n      {participations.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Histórico de Participações\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {participations.map((participation) => (\n                <div \n                  key={participation.id}\n                  className=\"flex items-center justify-between p-4 border rounded-lg\"\n                >\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\">{participation.custom_plans.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Participou em: {new Date(participation.joined_at).toLocaleDateString('pt-BR')}\n                    </p>\n                    <p className=\"text-sm\">\n                      Grupo: {participation.plan_groups.current_participants}/\n                      {participation.custom_plans.max_participants} participantes\n                    </p>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    {getStatusBadge(participation.contemplation_status, participation.payment_status)}\n                    {participation.contemplation_date && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Contemplado em: {new Date(participation.contemplation_date).toLocaleDateString('pt-BR')}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/PlanProgress.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserData, user]","fix":{"range":[2022,2028],"text":"[loadUserData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Copy, Users, Clock, DollarSign, Share, Gift, ExternalLink } from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface PlanProgress {\n  participation_id: string;\n  plan_code: string;\n  plan_name: string;\n  description: string;\n  category_name: string;\n  total_price: number;\n  entry_amount: number;\n  group_number: number;\n  position_number: number;\n  current_participants: number;\n  max_participants: number;\n  group_status: string;\n  payment_status: string;\n  contemplated: boolean;\n  service_completed: boolean;\n  professional_name: string;\n  especialidade: string;\n  local_atendimento: string;\n  enrollment_date: string;\n  contemplation_date: string;\n  service_completion_date: string;\n}\n\ninterface ReferralLink {\n  id: string;\n  referral_code: string;\n  link_url: string;\n  clicks_count: number;\n  conversions_count: number;\n  total_commission: number;\n}\n\ninterface Commission {\n  id: string;\n  participation_amount: number;\n  commission_amount: number;\n  status: string;\n  created_at: string;\n  referrer_name: string;\n}\n\nexport function PlanProgress() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [plans, setPlans] = useState<PlanProgress[]>([]);\n  const [referralLinks, setReferralLinks] = useState<ReferralLink[]>([]);\n  const [commissions, setCommissions] = useState<Commission[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n    }\n  }, [user]);\n\n  const loadUserData = async () => {\n    setLoading(true);\n    try {\n      // Usar o ID do usuário diretamente\n      const userId = user?.id;\n      if (!userId) return;\n\n      // Carregar participações do usuário\n      const { data: plansData } = await supabase\n        .from('group_participants')\n        .select('*, plan_groups(*)')\n        .eq('user_id', userId)\n        .order('joined_at', { ascending: false });\n\n      // Transformar dados para o formato esperado\n      const formattedPlans = (plansData || []).map(participant => ({\n        participation_id: participant.id,\n        plan_code: `GROUP-${participant.id.slice(-4)}`,\n        plan_name: `Grupo ${participant.plan_groups?.group_number || 'N/A'}`,\n        description: 'Grupo de contemplação',\n        category_name: 'Serviços',\n        total_price: participant.plan_groups?.target_amount || 1000,\n        entry_amount: participant.amount_paid || 100,\n        group_number: participant.plan_groups?.group_number || 1,\n        position_number: 1,\n        current_participants: participant.plan_groups?.current_participants || 1,\n        max_participants: participant.plan_groups?.max_participants || 10,\n        group_status: participant.plan_groups?.status || 'forming',\n        payment_status: 'pago',\n        contemplated: participant.plan_groups?.status === 'complete',\n        service_completed: false,\n        professional_name: '',\n        especialidade: '',\n        local_atendimento: '',\n        enrollment_date: participant.joined_at,\n        contemplation_date: participant.plan_groups?.contemplated_at || '',\n        service_completion_date: ''\n      }));\n\n      setPlans(formattedPlans);\n\n      // Simular links de referência vazios\n      setReferralLinks([]);\n\n      // Simular comissões vazias\n      setCommissions([]);\n\n\n    } catch (error) {\n      console.error('Erro ao carregar dados:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar seus dados. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateReferralLink = async (planCode: string) => {\n    try {\n      // Simular geração de link\n      const referralCode = `REF-${user?.id?.slice(-8)}-${Date.now()}`;\n      const linkUrl = `/?ref=${referralCode}`;\n      \n      toast({\n        title: \"Link gerado!\",\n        description: \"Seu link de indicação foi criado com sucesso.\",\n      });\n\n      // Adicionar à lista de links\n      const newLink: ReferralLink = {\n        id: Date.now().toString(),\n        referral_code: referralCode,\n        link_url: linkUrl,\n        clicks_count: 0,\n        conversions_count: 0,\n        total_commission: 0\n      };\n\n      setReferralLinks(prev => [...prev, newLink]);\n\n    } catch (error) {\n      console.error('Erro ao gerar link:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao gerar link de indicação.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyReferralLink = (linkUrl: string) => {\n    const fullUrl = `${window.location.origin}${linkUrl}`;\n    navigator.clipboard.writeText(fullUrl);\n    toast({\n      title: \"Link copiado!\",\n      description: \"Link de indicação copiado para a área de transferência.\",\n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'forming': { label: 'Formando', variant: 'secondary' as const },\n      'full': { label: 'Completo', variant: 'default' as const },\n      'contemplating': { label: 'Contemplando', variant: 'default' as const },\n      'completed': { label: 'Finalizado', variant: 'default' as const }\n    };\n    \n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: 'outline' as const };\n  };\n\n  const getProgressPercentage = (current: number, max: number) => {\n    return Math.round((current / max) * 100);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-3xl font-bold tracking-tight\">Meus Planos</h2>\n        <p className=\"text-muted-foreground\">\n          Acompanhe o progresso dos seus grupos e suas indicações\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"progress\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"progress\">Progresso dos Grupos</TabsTrigger>\n          <TabsTrigger value=\"referrals\">Indicações</TabsTrigger>\n          <TabsTrigger value=\"commissions\">Comissões</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"progress\" className=\"space-y-4\">\n          {plans.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Users className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Nenhum plano encontrado</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Você ainda não está inscrito em nenhum plano.\n                </p>\n                <Button onClick={() => window.location.href = '/'}>\n                  Explorar Planos\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            plans.map((plan) => (\n              <Card key={plan.participation_id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <span>{plan.plan_name}</span>\n                        <Badge variant=\"outline\">{plan.category_name}</Badge>\n                        <Badge {...getStatusBadge(plan.group_status)}>\n                          {getStatusBadge(plan.group_status).label}\n                        </Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        Grupo {plan.group_number} • Posição {plan.position_number}\n                      </CardDescription>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-primary\">\n                        {formatCurrency(plan.entry_amount)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">pago</div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Progresso do grupo */}\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Progresso do Grupo</span>\n                      <span>{plan.current_participants}/{plan.max_participants} participantes</span>\n                    </div>\n                    <Progress \n                      value={getProgressPercentage(plan.current_participants, plan.max_participants)} \n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  {/* Status especiais */}\n                  {plan.contemplated && (\n                    <Alert>\n                      <Gift className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        🎉 <strong>Parabéns!</strong> Você foi contemplado! \n                        {plan.contemplation_date && (\n                          <span> em {new Date(plan.contemplation_date).toLocaleDateString('pt-BR')}</span>\n                        )}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {plan.service_completed && (\n                    <Alert>\n                      <AlertDescription>\n                        ✅ Serviço realizado com sucesso!\n                        {plan.service_completion_date && (\n                          <span> em {new Date(plan.service_completion_date).toLocaleDateString('pt-BR')}</span>\n                        )}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* Informações do profissional */}\n                  {plan.professional_name && (\n                    <div className=\"bg-muted p-3 rounded-lg\">\n                      <h4 className=\"font-semibold\">Profissional Designado</h4>\n                      <p className=\"text-sm\">\n                        {plan.professional_name} - {plan.especialidade}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {plan.local_atendimento}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Ações */}\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => generateReferralLink(plan.plan_code)}\n                    >\n                      <Share className=\"mr-2 h-4 w-4\" />\n                      Gerar Link de Indicação\n                    </Button>\n                    \n                    {plan.contemplated && !plan.service_completed && (\n                      <Button size=\"sm\">\n                        <ExternalLink className=\"mr-2 h-4 w-4\" />\n                        Agendar Serviço\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"referrals\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {referralLinks.map((link) => (\n              <Card key={link.id}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Link de Indicação</span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => copyReferralLink(link.link_url)}\n                    >\n                      <Copy className=\"mr-2 h-4 w-4\" />\n                      Copiar\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"bg-muted p-3 rounded-lg mb-4\">\n                    <code className=\"text-sm break-all\">\n                      {window.location.origin}{link.link_url}\n                    </code>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-blue-600\">{link.clicks_count}</div>\n                      <div className=\"text-sm text-muted-foreground\">Cliques</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-green-600\">{link.conversions_count}</div>\n                      <div className=\"text-sm text-muted-foreground\">Conversões</div>\n                    </div>\n                    <div>\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        {formatCurrency(link.total_commission)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Comissão</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"commissions\" className=\"space-y-4\">\n          {commissions.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <DollarSign className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Nenhuma comissão encontrada</h3>\n                <p className=\"text-muted-foreground\">\n                  Compartilhe seus links de indicação para ganhar comissões!\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Resumo das comissões */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"text-center p-4\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {formatCurrency(commissions.filter(c => c.status === 'paid').reduce((sum, c) => sum + c.commission_amount, 0))}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Comissões Pagas</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"text-center p-4\">\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {formatCurrency(commissions.filter(c => c.status === 'pending').reduce((sum, c) => sum + c.commission_amount, 0))}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Pendentes</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"text-center p-4\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {formatCurrency(commissions.reduce((sum, c) => sum + c.commission_amount, 0))}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Lista de comissões */}\n              {commissions.map((commission) => (\n                <Card key={commission.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-semibold\">\n                          Indicação: {commission.referrer_name}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {new Date(commission.created_at).toLocaleDateString('pt-BR')}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-lg\">\n                          {formatCurrency(commission.commission_amount)}\n                        </div>\n                        <Badge \n                          variant={commission.status === 'paid' ? 'default' : 'secondary'}\n                        >\n                          {commission.status === 'paid' ? 'Pago' : 'Pendente'}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/PlansDisplay.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlans'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [category, loadPlans]","fix":{"range":[2294,2304],"text":"[category, loadPlans]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Users, DollarSign, Calendar } from \"lucide-react\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  image_url?: string;\n  active: boolean;\n  created_at: string;\n}\n\ninterface PlansDisplayProps {\n  category: 'tatuador' | 'dentista';\n  title: string;\n  onSelectPlan?: (plan: Plan) => void;\n}\n\nexport const PlansDisplay = ({ category, title, onSelectPlan }: PlansDisplayProps) => {\n  const [plans, setPlans] = useState<Plan[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  const tableMap = {\n    tatuador: 'planos_tatuador',\n    dentista: 'planos_dentista'\n  };\n\n  const loadPlans = async () => {\n    try {\n      setLoading(true);\n      console.log('🔍 Carregando planos para categoria:', category);\n      \n      // **SOLUÇÃO: Usar edge function unificada com filtro de categoria**\n      const { data: response, error } = await supabase.functions.invoke('unified-plans-loader', {\n        body: {\n          category_filter: category === 'tatuador' ? 'tattoo' : 'dental'\n        }\n      });\n\n      if (error) {\n        console.error('❌ Erro na edge function unified-plans-loader:', error);\n        throw error;\n      }\n\n      if (!response?.success) {\n        console.error('❌ Resposta inválida da edge function:', response);\n        throw new Error(response?.error || 'Resposta inválida do servidor');\n      }\n\n      const plans = response.plans || [];\n      console.log('📊 Estatísticas dos planos filtrados:', response.stats);\n      console.log('📝 Planos encontrados para', category, ':', plans.length);\n\n      setPlans(plans);\n\n    } catch (error) {\n      console.error('❌ Erro ao carregar planos:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar planos. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPlans();\n  }, [category]);\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <h3 className=\"text-xl font-semibold\">{title}</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (plans.length === 0) {\n    return (\n      <div className=\"space-y-4\">\n        <h3 className=\"text-xl font-semibold\">{title}</h3>\n        <Card>\n          <CardContent className=\"py-8 text-center\">\n            <p className=\"text-muted-foreground\">\n              Nenhum plano de {category === 'tatuador' ? 'tatuagem' : 'odontologia'} disponível no momento.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-xl font-semibold\">{title}</h3>\n        <Badge variant=\"outline\">\n          {plans.length} plano{plans.length > 1 ? 's' : ''} disponível{plans.length > 1 ? 'is' : ''}\n        </Badge>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {plans.map((plan) => (\n          <Card key={plan.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">{plan.name}</CardTitle>\n              {plan.image_url && (\n                <div className=\"aspect-video bg-gray-100 rounded-lg overflow-hidden\">\n                  <img \n                    src={plan.image_url} \n                    alt={plan.name}\n                    className=\"w-full h-full object-cover\"\n                    loading=\"lazy\"\n                  />\n                </div>\n              )}\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {plan.description && (\n                <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                  {plan.description}\n                </p>\n              )}\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"font-bold text-green-600\">\n                      {formatPrice(plan.price)}\n                    </span>\n                  </div>\n                  <Badge variant=\"secondary\">\n                    Ativo\n                  </Badge>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>Máximo {plan.max_participants} participantes</span>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>\n                    Criado em {new Date(plan.created_at).toLocaleDateString('pt-BR')}\n                  </span>\n                </div>\n              </div>\n              \n              {onSelectPlan && (\n                <Button \n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                  onClick={() => onSelectPlan(plan)}\n                >\n                  Pagar com PIX - {formatPrice(plan.price)}\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/ReferralSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1003,1006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1003,1006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadReferralData' and 'loadUserGroups'. Either include them or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadReferralData, loadUserGroups, user]","fix":{"range":[1113,1119],"text":"[loadReferralData, loadUserGroups, user]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Copy, Share, Users, UserPlus, TrendingUp, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UserReferralData {\n  referralCode: string;\n  referralLink: string;\n  totalReferrals: number;\n  groupsFormed: number;\n  pendingInvites: number;\n}\n\nexport const ReferralSystem = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [referralData, setReferralData] = useState<UserReferralData>({\n    referralCode: \"\",\n    referralLink: \"\",\n    totalReferrals: 0,\n    groupsFormed: 0,\n    pendingInvites: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [userGroups, setUserGroups] = useState<any[]>([]);\n\n  useEffect(() => {\n    if (user) {\n      loadReferralData();\n      loadUserGroups();\n    }\n  }, [user]);\n\n  const loadUserGroups = async () => {\n    try {\n      const { data: groups } = await supabase\n        .from('group_participants')\n        .select(`\n          plan_groups!inner(\n            id,\n            referral_code,\n            service_id\n          )\n        `)\n        .eq('user_id', user?.id)\n        .eq('status', 'active');\n      \n      // Para cada grupo, buscar os detalhes do plano\n      const groupsWithPlans = await Promise.all(\n        (groups || []).map(async (group) => {\n          const { data: planData } = await supabase\n            .from('custom_plans')\n            .select('name')\n            .eq('id', group.plan_groups.service_id)\n            .single();\n\n          return {\n            plan_groups: {\n              ...group.plan_groups,\n              custom_plans: planData\n            }\n          };\n        })\n      );\n      \n      setUserGroups(groupsWithPlans);\n    } catch (error) {\n      console.error('Erro ao carregar grupos do usuário:', error);\n    }\n  };\n\n  const loadReferralData = async () => {\n    try {\n      setLoading(true);\n\n      // Buscar dados do perfil do usuário para código de indicação pessoal\n      const { data: profileData, error: profileError } = await supabase\n        .from('profiles')\n        .select('referral_code')\n        .eq('user_id', user?.id)\n        .single();\n\n      if (profileError) throw profileError;\n\n      // Contar referrals diretos através dos grupos (pessoas que usaram códigos dos grupos do usuário)\n      const { data: groupReferrals } = await supabase\n        .from('group_participants')\n        .select(`\n          referrer_code,\n          plan_groups!inner(\n            referral_code\n          )\n        `)\n        .neq('user_id', user?.id)\n        .not('referrer_code', 'is', null);\n\n      // Buscar códigos dos grupos do usuário\n      const { data: userGroupCodes } = await supabase\n        .from('group_participants')\n        .select(`\n          plan_groups!inner(\n            referral_code\n          )\n        `)\n        .eq('user_id', user?.id);\n\n      const myGroupCodes = userGroupCodes?.map(ug => ug.plan_groups.referral_code) || [];\n      const totalReferrals = groupReferrals?.filter(gr => myGroupCodes.includes(gr.referrer_code)).length || 0;\n\n      // Contar grupos formados (participações ativas do usuário)\n      const { count: activeParticipations } = await supabase\n        .from('group_participants')\n        .select('id', { count: 'exact' })\n        .eq('user_id', user?.id)\n        .eq('status', 'active');\n\n      const referralCode = profileData?.referral_code || user?.id?.slice(-8).toUpperCase() || '';\n      \n      setReferralData({\n        referralCode,\n        referralLink: `${window.location.origin}/register?ref=${referralCode}`,\n        totalReferrals,\n        groupsFormed: activeParticipations || 0,\n        pendingInvites: 0 // Será calculado baseado no progresso dos grupos\n      });\n\n    } catch (error) {\n      console.error('Erro ao carregar dados de indicação:', error);\n      toast({\n        title: \"Erro ao carregar dados\",\n        description: \"Não foi possível carregar os dados de indicação.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyReferralLink = async (groupId?: string, groupCode?: string) => {\n    // Se tiver um grupo específico, usar o link do grupo, senão usar o link geral de cadastro\n    let linkToCopy;\n    if (groupId && groupCode) {\n      linkToCopy = `${window.location.origin}/plano/${groupId}?ref=${groupCode}`;\n    } else {\n      if (!referralData.referralCode) {\n        toast({\n          title: \"Erro\",\n          description: \"Código de referência não disponível.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      linkToCopy = `${window.location.origin}/register?ref=${referralData.referralCode}`;\n    }\n\n    try {\n      await navigator.clipboard.writeText(linkToCopy);\n      \n      toast({\n        title: \"✅ Link copiado!\",\n        description: groupId ? \"Link do grupo copiado!\" : \"Seu link de indicação foi copiado!\",\n        duration: 3000\n      });\n      \n    } catch (error) {\n      // Fallback para dispositivos móveis ou browsers antigos\n      const textArea = document.createElement('textarea');\n      textArea.value = linkToCopy;\n      textArea.style.position = 'fixed';\n      textArea.style.left = '-9999px';\n      textArea.style.top = '-9999px';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      \n      try {\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        \n        toast({\n          title: \"✅ Link copiado!\",\n          description: groupId ? \"Link do grupo copiado!\" : \"Seu link de indicação foi copiado!\",\n          duration: 3000\n        });\n        \n      } catch (fallbackError) {\n        document.body.removeChild(textArea);\n        \n        toast({\n          title: \"📋 Copie manualmente\",\n          description: \"Selecione o link abaixo e copie (Ctrl+C)\",\n          duration: 5000\n        });\n      }\n    }\n  };\n\n  const shareReferralLink = (groupId?: string, groupCode?: string, serviceName?: string) => {\n    const linkToShare = groupId && groupCode \n      ? `${window.location.origin}/plano/${groupId}?ref=${groupCode}`\n      : `${window.location.origin}/register?ref=${referralData.referralCode}`;\n      \n    if (navigator.share) {\n      navigator.share({\n        title: groupId ? \"Participe do meu grupo!\" : \"Cadastre-se com minha indicação!\",\n        text: groupId \n          ? `Venha formar grupo comigo para ${serviceName} e economizar!`\n          : \"Venha formar um grupo comigo e economizar em serviços estéticos!\",\n        url: linkToShare,\n      });\n    } else {\n      copyReferralLink(groupId, groupCode);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <UserPlus className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total de Indicações</p>\n                <p className=\"text-2xl font-bold\">{referralData.totalReferrals}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Users className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Grupos Formados</p>\n                <p className=\"text-2xl font-bold\">{referralData.groupsFormed}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Convites Pendentes</p>\n                <p className=\"text-2xl font-bold\">{referralData.pendingInvites}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Referral Link Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share className=\"h-5 w-5\" />\n            Meu Link de Indicação\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Compartilhe este link para que seus amigos se juntem ao seu grupo\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Links dos Grupos */}\n          {userGroups.length > 0 && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Links dos Seus Grupos:</h4>\n              {userGroups.map((group, index) => {\n                const groupCode = group.plan_groups.referral_code;\n                const serviceName = group.plan_groups.custom_plans?.name || 'Serviço';\n                const groupLink = `${window.location.origin}/plano/${group.plan_groups.service_id}?ref=${groupCode}`;\n                \n                return (\n                  <div key={index} className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-medium text-blue-800\">{serviceName}</span>\n                      <Badge variant=\"secondary\" className=\"font-mono text-xs\">\n                        {groupCode}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex gap-2 mb-2\">\n                      <Button \n                        size=\"sm\"\n                        variant=\"outline\" \n                        onClick={() => copyReferralLink(group.plan_groups.service_id, groupCode)}\n                        className=\"flex-1\"\n                      >\n                        <Copy className=\"h-3 w-3 mr-1\" />\n                        Copiar\n                      </Button>\n                      <Button \n                        size=\"sm\"\n                        onClick={() => shareReferralLink(group.plan_groups.service_id, groupCode, serviceName)}\n                        className=\"flex-1\"\n                      >\n                        <Share className=\"h-3 w-3 mr-1\" />\n                        Compartilhar\n                      </Button>\n                    </div>\n                    \n                    <div className=\"text-xs font-mono text-blue-600 bg-white p-2 rounded border break-all\">\n                      {groupLink}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n\n          {/* Link Geral de Indicação */}\n          <div className=\"p-4 bg-gray-50 rounded-lg border\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-700\">Seu código pessoal:</p>\n                <Badge variant=\"secondary\" className=\"font-mono\">\n                  {referralData.referralCode}\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"mb-3\">\n              <p className=\"text-sm font-medium text-gray-700 mb-2\">Link de cadastro geral:</p>\n              <div className=\"flex items-center gap-2 p-3 bg-card border rounded\">\n                <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n                <span className=\"flex-1 text-sm font-mono text-gray-600 truncate\">\n                  {referralData.referralLink}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => copyReferralLink()}\n                variant=\"outline\" \n                size=\"sm\"\n                className=\"flex-1\"\n              >\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Copiar Link\n              </Button>\n              <Button \n                onClick={() => shareReferralLink()}\n                size=\"sm\"\n                className=\"flex-1\"\n              >\n                <Share className=\"h-4 w-4 mr-2\" />\n                Compartilhar\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* How it Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Como Funciona o Sistema de Indicação</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                1\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Compartilhe seu link</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Envie seu link único para amigos e familiares\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                2\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Eles se cadastram</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Quando alguém se cadastra pelo seu link, vocês ficam no mesmo grupo\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                3\n              </div>\n              <div>\n                <h4 className=\"font-medium\">Grupo completo = serviço liberado</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Com 10 pessoas, todos podem agendar seus serviços\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/ReferralValidation.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateReferralLink' and 'loadGroupData'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [generateReferralLink, loadGroupData, user]","fix":{"range":[1743,1749],"text":"[generateReferralLink, loadGroupData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3293,3296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3293,3296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5673,5676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5673,5676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6738,6741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6738,6741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Users, \n  UserPlus, \n  CheckCircle, \n  Clock, \n  Award,\n  Target,\n  Gift,\n  Share2,\n  Copy,\n  DollarSign,\n  TrendingUp,\n  Star\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface GroupMember {\n  user_id: string;\n  position: number;\n  referrer_id?: string;\n  joined_at: string;\n  is_validated: boolean;\n  user_email?: string;\n  user_name?: string;\n}\n\ninterface GroupData {\n  id: string;\n  current_members: number;\n  progress_message: string;\n  status: string;\n  created_at: string;\n  completed_at?: string;\n  members: GroupMember[];\n}\n\nconst MILESTONE_REWARDS = [\n  { members: 3, reward: 50, label: \"Primeiro Marco\" },\n  { members: 6, reward: 100, label: \"Meio Caminho\" },\n  { members: 9, reward: 500, label: \"Grupo Completo\" }\n];\n\nexport const ReferralValidation = () => {\n  const [groupData, setGroupData] = useState<GroupData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [referralLink, setReferralLink] = useState(\"\");\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [sendingInvite, setSendingInvite] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (user) {\n      loadGroupData();\n      generateReferralLink();\n    }\n  }, [user]);\n\n  const loadGroupData = async () => {\n    try {\n      // Get user's active group participants\n      const { data: groupsData, error: groupsError } = await supabase\n        .from('group_participants')\n        .select('*, plan_groups(*)')\n        .eq('user_id', user?.id)\n        .order('joined_at', { ascending: false })\n        .limit(1)\n        .maybeSingle();\n\n      if (groupsError && groupsError.code !== 'PGRST116') {\n        throw groupsError;\n      }\n\n      if (groupsData) {\n        // Get group members from credit transactions\n        const { data: membersData, error: membersError } = await supabase\n          .from('credit_transactions')\n          .select('*')\n          .eq('reference_id', groupsData.group_id)\n          .order('created_at');\n\n        if (membersError) throw membersError;\n\n        const enrichedMembers = (membersData || []).map((member, index) => ({\n          user_id: member.user_id,\n          user_email: 'user@example.com',\n          user_name: `Usuário ${index + 1}`,\n          position: index + 1,\n          joined_at: member.created_at,\n          is_validated: true\n        }));\n\n        setGroupData({\n          id: groupsData.id,\n          current_members: enrichedMembers.length,\n          progress_message: getProgressMessage(enrichedMembers.length),\n          status: groupsData.plan_groups?.status || 'forming',\n          created_at: groupsData.joined_at,\n          completed_at: groupsData.plan_groups?.contemplated_at,\n          members: enrichedMembers\n        });\n      }\n    } catch (error: any) {\n      console.error('Error loading group data:', error);\n      toast({\n        title: \"Erro ao carregar dados\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateReferralLink = () => {\n    if (user?.id) {\n      const link = `${window.location.origin}/registro?ref=${user.id}`;\n      setReferralLink(link);\n    }\n  };\n\n  const getProgressMessage = (members: number) => {\n    if (members >= 9) return \"🎉 Grupo completo! Parabéns!\";\n    if (members >= 6) return `Quase lá! Faltam apenas ${9 - members} membros`;\n    if (members >= 3) return `Ótimo progresso! Faltam ${9 - members} membros`;\n    return `Começando! Você precisa de ${9 - members} indicações para completar`;\n  };\n\n  const copyReferralLink = async () => {\n    try {\n      await navigator.clipboard.writeText(referralLink);\n      toast({\n        title: \"Link copiado!\",\n        description: \"Seu link de indicação foi copiado para a área de transferência.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar\",\n        description: \"Não foi possível copiar o link.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const shareReferralLink = async () => {\n    const shareData = {\n      title: \"Participe do Amigo do Peito!\",\n      text: \"Junte-se ao melhor sistema de grupos de WhatsApp e ganhe dinheiro!\",\n      url: referralLink\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        copyReferralLink();\n      }\n    } else {\n      copyReferralLink();\n    }\n  };\n\n  const sendInviteEmail = async () => {\n    if (!inviteEmail) {\n      toast({\n        title: \"Email obrigatório\",\n        description: \"Por favor, insira um email válido.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setSendingInvite(true);\n    try {\n      // Call edge function to send invite email\n      const { error } = await supabase.functions.invoke('send-invite-email', {\n        body: {\n          email: inviteEmail,\n          referral_link: referralLink,\n          referrer_name: user?.email\n        }\n      });\n\n      if (error) throw error;\n\n      toast({\n        title: \"Convite enviado!\",\n        description: `Convite enviado para ${inviteEmail} com sucesso.`,\n      });\n      setInviteEmail(\"\");\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao enviar convite\",\n        description: error.message || \"Erro inesperado ao enviar convite.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setSendingInvite(false);\n    }\n  };\n\n  const createNewGroup = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('plan_groups')\n        .insert({\n          service_id: 'default-service',\n          status: 'forming',\n          group_number: Math.floor(Math.random() * 1000) + 1,\n          target_amount: 1000,\n          max_participants: 10\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Create participant record\n      await supabase\n        .from('group_participants')\n        .insert({\n          user_id: user?.id,\n          group_id: data.id,\n          amount_paid: 100\n        });\n\n      toast({\n        title: \"Novo grupo criado!\",\n        description: \"Seu novo grupo foi criado. Comece a convidar pessoas!\",\n      });\n\n      // Reload data\n      loadGroupData();\n    } catch (error: any) {\n      toast({\n        title: \"Erro ao criar grupo\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const getProgressPercentage = (current: number) => {\n    return Math.min((current / 9) * 100, 100);\n  };\n\n  const getMilestoneStatus = (members: number, requiredMembers: number) => {\n    if (members >= requiredMembers) return \"completed\";\n    if (members >= requiredMembers - 1) return \"almost\";\n    return \"pending\";\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[1, 2, 3].map((i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Group Status Overview */}\n      {groupData ? (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Seu Grupo Atual\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold\">\n                    Grupo #{groupData.id.slice(-6)}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Criado em {formatDate(groupData.created_at)}\n                  </p>\n                </div>\n                <Badge variant={groupData.current_members >= 9 ? \"default\" : \"secondary\"}>\n                  {groupData.current_members}/9 membros\n                </Badge>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span>Progresso:</span>\n                  <span className=\"font-semibold\">\n                    {getProgressPercentage(groupData.current_members).toFixed(0)}%\n                  </span>\n                </div>\n                <Progress value={getProgressPercentage(groupData.current_members)} className=\"h-3\" />\n              </div>\n\n              <p className=\"text-center font-medium text-lg\">\n                {groupData.progress_message}\n              </p>\n\n              {/* Visual Member Grid */}\n              <div className=\"grid grid-cols-3 md:grid-cols-9 gap-3\">\n                {Array.from({ length: 9 }, (_, index) => {\n                  const member = groupData.members.find(m => m.position === index + 1);\n                  return (\n                    <div\n                      key={index}\n                      className={`aspect-square rounded-lg flex flex-col items-center justify-center text-xs font-semibold border-2 ${\n                        member \n                          ? 'bg-green-50 border-green-200 text-green-800' \n                          : 'bg-gray-50 border-gray-200 text-gray-400'\n                      }`}\n                    >\n                      {member ? (\n                        <>\n                          <CheckCircle className=\"h-6 w-6 mb-1\" />\n                          <span>#{index + 1}</span>\n                        </>\n                      ) : (\n                        <>\n                          <Users className=\"h-6 w-6 mb-1\" />\n                          <span>#{index + 1}</span>\n                        </>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Target className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Você ainda não tem um grupo ativo</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Crie seu primeiro grupo e comece a ganhar dinheiro com indicações!\n            </p>\n            <Button onClick={createNewGroup}>\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Criar Primeiro Grupo\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Milestone Rewards */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Award className=\"h-5 w-5\" />\n            Recompensas por Marcos\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {MILESTONE_REWARDS.map((milestone) => {\n              const status = getMilestoneStatus(groupData?.current_members || 0, milestone.members);\n              \n              return (\n                <div\n                  key={milestone.members}\n                  className={`p-4 rounded-lg border-2 ${\n                    status === \"completed\" \n                      ? \"bg-green-50 border-green-200\" \n                      : status === \"almost\"\n                      ? \"bg-yellow-50 border-yellow-200\"\n                      : \"bg-gray-50 border-gray-200\"\n                  }`}\n                >\n                  <div className=\"text-center\">\n                    <div className={`w-12 h-12 mx-auto mb-3 rounded-full flex items-center justify-center ${\n                      status === \"completed\" \n                        ? \"bg-green-500 text-white\" \n                        : status === \"almost\"\n                        ? \"bg-yellow-500 text-white\"\n                        : \"bg-gray-300 text-gray-600\"\n                    }`}>\n                      {status === \"completed\" ? (\n                        <CheckCircle className=\"h-6 w-6\" />\n                      ) : (\n                        <span className=\"font-bold\">{milestone.members}</span>\n                      )}\n                    </div>\n                    <h4 className=\"font-semibold\">{milestone.label}</h4>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {milestone.members} membros\n                    </p>\n                    <p className=\"text-lg font-bold text-green-600\">\n                      {formatCurrency(milestone.reward)}\n                    </p>\n                    {status === \"completed\" && (\n                      <Badge variant=\"default\" className=\"mt-2 text-xs\">\n                        ✓ Conquistado\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Referral Tools */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"h-5 w-5\" />\n            Ferramentas de Indicação\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Referral Link */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Seu Link de Indicação</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={referralLink}\n                readOnly\n                className=\"font-mono text-sm\"\n              />\n              <Button variant=\"outline\" onClick={copyReferralLink}>\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Copiar\n              </Button>\n              <Button onClick={shareReferralLink}>\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Compartilhar\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Compartilhe este link para que pessoas se inscrevam diretamente no seu grupo!\n            </p>\n          </div>\n\n          {/* Email Invite */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Convidar por Email</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"email\"\n                placeholder=\"email@exemplo.com\"\n                value={inviteEmail}\n                onChange={(e) => setInviteEmail(e.target.value)}\n              />\n              <Button onClick={sendInviteEmail} disabled={sendingInvite}>\n                {sendingInvite ? \"Enviando...\" : \"Enviar Convite\"}\n              </Button>\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Envie um convite personalizado direto para o email da pessoa.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Member List */}\n      {groupData && groupData.members.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Membros do Grupo\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {groupData.members.map((member, index) => (\n                <div key={member.user_id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-semibold text-green-800\">\n                        #{member.position}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">\n                        {member.user_name || member.user_email || 'Usuário'}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Entrou em {formatDate(member.joined_at)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant={member.is_validated ? \"default\" : \"secondary\"}>\n                      {member.is_validated ? \"Validado\" : \"Pendente\"}\n                    </Badge>\n                    {member.referrer_id === user?.id && (\n                      <p className=\"text-xs text-green-600 mt-1\">Sua indicação</p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Rewards Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Resumo de Ganhos\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <DollarSign className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {formatCurrency((groupData?.current_members || 0) * 25)}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Por Indicações</p>\n              <p className=\"text-xs text-blue-600\">R$ 25 × {groupData?.current_members || 0} membros</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <Star className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n              <p className=\"text-2xl font-bold text-green-600\">\n                {formatCurrency(\n                  MILESTONE_REWARDS\n                    .filter(m => (groupData?.current_members || 0) >= m.members)\n                    .reduce((sum, m) => sum + m.reward, 0)\n                )}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Por Marcos</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <Gift className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {formatCurrency(\n                  ((groupData?.current_members || 0) * 25) +\n                  MILESTONE_REWARDS\n                    .filter(m => (groupData?.current_members || 0) >= m.members)\n                    .reduce((sum, m) => sum + m.reward, 0)\n                )}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Total Ganho</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/UserGroupsHistory.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserParticipations'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserParticipations, user]","fix":{"range":[1278,1284],"text":"[loadUserParticipations, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Users, Calendar, DollarSign, Clock, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface GroupParticipation {\n  id: string;\n  groupName: string;\n  productName: string;\n  joinDate: string;\n  amountPaid: number;\n  totalValue: number;\n  status: \"active\" | \"contemplated\" | \"completed\" | \"pending_payment\";\n  members: number;\n  maxMembers: number;\n  nextDrawDate?: string;\n  position?: number;\n  groupId?: string;\n}\n\nexport const UserGroupsHistory = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [participations, setParticipations] = useState<GroupParticipation[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadUserParticipations();\n    }\n  }, [user]);\n\n  const loadUserParticipations = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase\n        .from('group_participants')\n        .select(`\n          *,\n          plan_groups(\n            *,\n            service_id\n          )\n        `)\n        .eq('user_id', user?.id)\n        .order('joined_at', { ascending: false });\n\n      if (error) throw error;\n\n      if (data) {\n        const formattedParticipations: GroupParticipation[] = data.map((participation, index) => ({\n          id: participation.id,\n          groupId: participation.group_id,\n          groupName: `Grupo ${participation.plan_groups?.group_number || (index + 1)}`,\n          productName: `Plano ${participation.plan_groups?.group_number || (index + 1)}`,\n          joinDate: new Date(participation.joined_at).toLocaleDateString('pt-BR'),\n          amountPaid: participation.amount_paid || 0,\n          totalValue: participation.plan_groups?.target_amount || 0,\n          status: participation.status === 'contemplated' ? 'contemplated' : \n                  participation.plan_groups?.status === 'complete' ? 'completed' :\n                  participation.amount_paid > 0 ? 'active' : 'pending_payment',\n          members: participation.plan_groups?.current_participants || 0,\n          maxMembers: participation.plan_groups?.max_participants || 10,\n          position: index + 1,\n          nextDrawDate: participation.plan_groups?.status === 'forming' ? \n            new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString('pt-BR') : \n            undefined\n        }));\n        \n        setParticipations(formattedParticipations);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar participações:', error);\n      toast({\n        title: \"Erro ao carregar dados\",\n        description: \"Não foi possível carregar seu histórico de grupos.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewDetails = (groupId: string) => {\n    navigate(`/usuario/grupo/${groupId}`);\n  };\n\n  const handleMakePayment = (participationId: string) => {\n    navigate(`/usuario/pagamento/${participationId}`);\n  };\n\n  const handleScheduleAppointment = (groupId: string) => {\n    toast({\n      title: \"Agendamento\",\n      description: \"Em breve você poderá agendar seu procedimento!\",\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n  const getStatusColor = (status: GroupParticipation[\"status\"]) => {\n    switch (status) {\n      case \"active\": return \"bg-blue-50 text-blue-700 border-blue-200\";\n      case \"contemplated\": return \"bg-green-50 text-green-700 border-green-200\";\n      case \"completed\": return \"bg-gray-50 text-gray-700 border-gray-200\";\n      case \"pending_payment\": return \"bg-yellow-50 text-yellow-700 border-yellow-200\";\n      default: return \"bg-gray-50 text-gray-700 border-gray-200\";\n    }\n  };\n\n  const getStatusText = (status: GroupParticipation[\"status\"]) => {\n    switch (status) {\n      case \"active\": return \"Ativo\";\n      case \"contemplated\": return \"Contemplado\";\n      case \"completed\": return \"Finalizado\";\n      case \"pending_payment\": return \"Pagamento Pendente\";\n      default: return \"Desconhecido\";\n    }\n  };\n\n  // Remover função duplicada - já importada do utils\n  const totalInvested = participations.reduce((sum, p) => sum + p.amountPaid, 0);\n  const activeGroups = participations.filter(p => p.status === \"active\").length;\n  const contemplatedGroups = participations.filter(p => p.status === \"contemplated\").length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Total Investido\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{formatCurrency(totalInvested)}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Em {participations.length} grupos\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Grupos Ativos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeGroups}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Participações ativas\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Contemplações\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contemplatedGroups}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Procedimentos ganhos\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Groups List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Meus Grupos</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {participations.map((group) => (\n              <div key={group.id} className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium\">{group.groupName}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{group.productName}</p>\n                  </div>\n                  <Badge variant=\"outline\" className={`${getStatusColor(group.status)} border`}>\n                    {getStatusText(group.status)}\n                  </Badge>\n                </div>\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Posição:</span>\n                    <div className=\"font-medium\">#{group.position}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Membros:</span>\n                    <div className=\"font-medium\">{group.members}/{group.maxMembers}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Pago:</span>\n                    <div className=\"font-medium\">{formatCurrency(group.amountPaid)}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Entrada em:</span>\n                    <div className=\"font-medium\">{group.joinDate}</div>\n                  </div>\n                </div>\n\n                {/* Progress Bar for Active Groups */}\n                {group.status === \"active\" && (\n                  <div className=\"mb-4\">\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Progresso do grupo</span>\n                      <span>{Math.round((group.members / group.maxMembers) * 100)}%</span>\n                    </div>\n                    <Progress value={(group.members / group.maxMembers) * 100} className=\"h-2\" />\n                  </div>\n                )}\n\n                {/* Next Draw Date */}\n                {group.nextDrawDate && group.status === \"active\" && (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-3\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>Próximo sorteio: {group.nextDrawDate}</span>\n                  </div>\n                )}\n\n                {/* Contemplated Message */}\n                {group.status === \"contemplated\" && (\n                  <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg mb-3\">\n                    <div className=\"flex items-center gap-2 text-green-800 text-sm font-medium\">\n                      <Users className=\"h-4 w-4\" />\n                      Parabéns! Você foi contemplado neste grupo!\n                    </div>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      Entre em contato conosco para agendar seu procedimento.\n                    </p>\n                  </div>\n                )}\n\n                {/* Pending Payment Warning */}\n                {group.status === \"pending_payment\" && (\n                  <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg mb-3\">\n                    <div className=\"flex items-center gap-2 text-yellow-800 text-sm font-medium\">\n                      <Clock className=\"h-4 w-4\" />\n                      Pagamento pendente\n                    </div>\n                    <p className=\"text-sm text-yellow-600 mt-1\">\n                      Complete seu pagamento para participar dos sorteios.\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => handleViewDetails(group.groupId || group.id)}\n                  >\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    Ver Detalhes\n                  </Button>\n                  {group.status === \"pending_payment\" && (\n                    <Button \n                      size=\"sm\" \n                      className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                      onClick={() => handleMakePayment(group.id)}\n                    >\n                      Fazer Pagamento\n                    </Button>\n                  )}\n                  {group.status === \"contemplated\" && (\n                    <Button \n                      size=\"sm\" \n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      onClick={() => handleScheduleAppointment(group.groupId || group.id)}\n                    >\n                      Agendar Procedimento\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {participations.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>Você ainda não participou de nenhum grupo.</p>\n              <p className=\"text-sm\">Comece agora e concorra a procedimentos incríveis!</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/UserProfile.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfileData'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfileData, user]","fix":{"range":[1789,1795],"text":"[loadProfileData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { UserAvatar } from \"@/components/ui/user-avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { User, Mail, Phone, MapPin, Calendar, Edit, CreditCard } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatCpf, validateCpf } from \"@/utils/cpfValidator\";\n\ninterface UserProfile {\n  name: string;\n  email: string;\n  phone: string;\n  cpf: string;\n  address: string;\n  city: string;\n  joinDate: string;\n  avatar?: string;\n  preferences: string[];\n  notifications: {\n    email: boolean;\n    sms: boolean;\n    push: boolean;\n  };\n}\n\nexport const UserProfile = () => {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<UserProfile>({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    cpf: \"\",\n    address: \"\",\n    city: \"\",\n    joinDate: \"\",\n    preferences: [],\n    notifications: {\n      email: true,\n      sms: false,\n      push: true\n    }\n  });\n\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [editedProfile, setEditedProfile] = useState<UserProfile>(profile);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  // Load user profile data\n  useEffect(() => {\n    if (user) {\n      loadProfileData();\n    }\n  }, [user]);\n\n  const loadProfileData = async () => {\n    try {\n      setLoading(true);\n      if (!user) return;\n      \n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error) throw error;\n\n      if (data) {\n        setProfile(prev => ({\n          ...prev,\n          name: data.full_name || \"\",\n          email: data.email || \"\",\n          phone: data.phone || \"\",\n          cpf: data.cpf || \"\",\n          joinDate: data.created_at ? new Date(data.created_at).toLocaleDateString('pt-BR') : \"\",\n          avatar: data.avatar_url\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAvatarUpdate = (avatarUrl: string | null) => {\n    // Esta função será implementada futuramente com upload de imagens\n    console.log('Avatar update:', avatarUrl);\n  };\n\n  const handleSaveProfile = async () => {\n    try {\n      if (!user) return;\n\n      // Validar CPF se preenchido\n      if (editedProfile.cpf && !validateCpf(editedProfile.cpf)) {\n        toast({\n          title: \"CPF inválido\",\n          description: \"Por favor, insira um CPF válido no formato XXX.XXX.XXX-XX\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      console.log('Salvando perfil para usuário:', user.id);\n      console.log('Dados a serem salvos:', {\n        full_name: editedProfile.name,\n        phone: editedProfile.phone,\n        cpf: editedProfile.cpf\n      });\n\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          full_name: editedProfile.name,\n          phone: editedProfile.phone,\n          cpf: editedProfile.cpf\n        })\n        .eq('user_id', user.id);\n\n      if (error) {\n        console.error('Erro ao salvar perfil:', error);\n        throw error;\n      }\n\n      setProfile(editedProfile);\n      setIsEditingProfile(false);\n      \n      console.log('Perfil salvo com sucesso');\n      toast({\n        title: \"Perfil atualizado!\",\n        description: \"Suas informações foram salvas com sucesso.\",\n      });\n    } catch (error) {\n      console.error('Erro ao salvar perfil:', error);\n      toast({\n        title: \"Erro ao salvar\",\n        description: \"Não foi possível salvar as alterações. Tente novamente.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleNotificationChange = (type: keyof UserProfile[\"notifications\"]) => {\n    setProfile(prev => ({\n      ...prev,\n      notifications: {\n        ...prev.notifications,\n        [type]: !prev.notifications[type]\n      }\n    }));\n    \n    toast({\n      title: \"Preferências atualizadas\",\n      description: `Notificações por ${type === 'email' ? 'email' : type === 'sms' ? 'SMS' : 'push'} ${profile.notifications[type] ? 'desativadas' : 'ativadas'}.`,\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Profile Header */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center gap-6\">\n            <UserAvatar size=\"lg\" />\n            \n            <div className=\"flex-1\">\n              <h2 className=\"text-2xl font-bold\">{profile.name}</h2>\n              <p className=\"text-muted-foreground\">{profile.email}</p>\n              <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Membro desde {profile.joinDate}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{profile.city}</span>\n                </div>\n              </div>\n            </div>\n            \n            <Dialog open={isEditingProfile} onOpenChange={setIsEditingProfile}>\n              <DialogTrigger asChild>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => setEditedProfile(profile)}\n                >\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Editar Perfil\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Editar Perfil</DialogTitle>\n                  <DialogDescription>\n                    Atualize suas informações pessoais.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Nome Completo</Label>\n                    <Input\n                      id=\"name\"\n                      value={editedProfile.name}\n                      onChange={(e) => setEditedProfile(prev => ({ ...prev, name: e.target.value }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Telefone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={editedProfile.phone}\n                      onChange={(e) => setEditedProfile(prev => ({ ...prev, phone: e.target.value }))}\n                      placeholder=\"(11) 99999-9999\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cpf\">CPF</Label>\n                    <Input\n                      id=\"cpf\"\n                      value={editedProfile.cpf}\n                      onChange={(e) => {\n                        const formattedCpf = formatCpf(e.target.value);\n                        setEditedProfile(prev => ({ ...prev, cpf: formattedCpf }));\n                      }}\n                      placeholder=\"000.000.000-00\"\n                      maxLength={14}\n                    />\n                    {editedProfile.cpf && !validateCpf(editedProfile.cpf) && editedProfile.cpf.length === 14 && (\n                      <p className=\"text-sm text-destructive mt-1\">CPF inválido</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"address\">Endereço</Label>\n                    <Input\n                      id=\"address\"\n                      value={editedProfile.address}\n                      onChange={(e) => setEditedProfile(prev => ({ ...prev, address: e.target.value }))}\n                      placeholder=\"Rua, número, bairro\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"city\">Cidade/Estado</Label>\n                    <Input\n                      id=\"city\"\n                      value={editedProfile.city}\n                      onChange={(e) => setEditedProfile(prev => ({ ...prev, city: e.target.value }))}\n                      placeholder=\"São Paulo, SP\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"preferences\">Interesses (separados por vírgula)</Label>\n                    <Textarea\n                      id=\"preferences\"\n                      value={editedProfile.preferences.join(', ')}\n                      onChange={(e) => setEditedProfile(prev => ({ \n                        ...prev, \n                        preferences: e.target.value.split(',').map(p => p.trim()).filter(p => p)\n                      }))}\n                      placeholder=\"Procedimentos estéticos, Promoções especiais...\"\n                      rows={3}\n                    />\n                  </div>\n                  <Button onClick={handleSaveProfile} className=\"w-full\">\n                    Salvar Alterações\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Informações de Contato\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <Mail className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-medium\">{profile.email}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Phone className=\"h-5 w-5 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Telefone</p>\n                <p className=\"font-medium\">{profile.phone || \"Não informado\"}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <CreditCard className=\"h-5 w-5 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">CPF</p>\n              <p className=\"font-medium\">{profile.cpf || \"Não informado\"}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Endereço</p>\n              <p className=\"font-medium\">{profile.address}, {profile.city}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Preferences */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Interesses e Preferências</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {profile.preferences.map((preference, index) => (\n              <Badge key={index} variant=\"secondary\">\n                {preference}\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notification Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Configurações de Notificação</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Notificações por Email</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Receba atualizações sobre grupos e promoções\n              </p>\n            </div>\n            <Button\n              variant={profile.notifications.email ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => handleNotificationChange('email')}\n            >\n              {profile.notifications.email ? \"Ativado\" : \"Desativado\"}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Notificações por SMS</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Receba lembretes de agendamentos e contemplações\n              </p>\n            </div>\n            <Button\n              variant={profile.notifications.sms ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => handleNotificationChange('sms')}\n            >\n              {profile.notifications.sms ? \"Ativado\" : \"Desativado\"}\n            </Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Notificações Push</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Receba notificações instantâneas no navegador\n              </p>\n            </div>\n            <Button\n              variant={profile.notifications.push ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => handleNotificationChange('push')}\n            >\n              {profile.notifications.push ? \"Ativado\" : \"Desativado\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/WithdrawalInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/user/WithdrawalRequest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/components/voucher/VoucherGenerator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/config/reactQuery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[436,439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[436,439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Stale time: How long data stays fresh\n      staleTime: 5 * 60 * 1000, // 5 minutes default\n      \n      // GC time: How long data stays in cache after components unmount\n      gcTime: 10 * 60 * 1000, // 10 minutes default\n      \n      // Retry configuration\n      retry: (failureCount, error: any) => {\n        // Don't retry 4xx errors except 408 (timeout)\n        if (error?.status >= 400 && error?.status < 500 && error?.status !== 408) {\n          return false;\n        }\n        // Retry up to 3 times for other errors\n        return failureCount < 3;\n      },\n      \n      // Retry delay with exponential backoff\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      \n      // Background refetch configuration\n      refetchOnWindowFocus: false, // Disable refetch on window focus\n      refetchOnReconnect: true,    // Refetch when reconnecting\n      refetchOnMount: true,        // Refetch when component mounts\n      \n      // Network mode\n      networkMode: 'online',\n    },\n    mutations: {\n      // Retry mutations only once\n      retry: 1,\n      \n      // Network mode for mutations\n      networkMode: 'online',\n    },\n  },\n});\n\n// Performance monitoring for React Query\nif (process.env.NODE_ENV === 'development') {\n  queryClient.getQueryCache().subscribe((event) => {\n    if (event?.type === 'observerResultsUpdated') {\n      const queryKey = event.query.queryKey;\n      const dataUpdateTime = event.query.state.dataUpdateCount;\n      \n      // Log slow queries\n      if (dataUpdateTime > 1000) {\n        console.warn(`🐌 Slow query detected:`, {\n          queryKey,\n          dataUpdateTime: `${dataUpdateTime}ms`,\n          state: event.query.state.status\n        });\n      }\n    }\n  });\n}\n\n// Clear all queries on auth state change\nexport const clearAllQueries = () => {\n  queryClient.clear();\n};\n\n// Invalidate specific query patterns\nexport const invalidateQueriesByPattern = (pattern: string[]) => {\n  queryClient.invalidateQueries({ queryKey: pattern });\n};\n\n// Prefetch commonly used queries\nexport const prefetchCommonQueries = async () => {\n  // Prefetch plans for faster loading\n  queryClient.prefetchQuery({\n    queryKey: ['plans'],\n    queryFn: async () => {\n      const { supabase } = await import('@/integrations/supabase/client');\n      const { data } = await supabase.functions.invoke('unified-plans-loader');\n      return data?.plans || [];\n    },\n    staleTime: 5 * 60 * 1000,\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1005,1008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1005,1008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserProfile'. Either include it or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserProfile]","fix":{"range":[5002,5004],"text":"[loadUserProfile]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10151,10154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10151,10154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10401,10404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10401,10404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12412,12415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12412,12415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14825,14828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14825,14828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":451,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":451,"endColumn":21}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport type { User as SupabaseUser, Session } from \"@supabase/supabase-js\";\nimport { getDashboardRoute, shouldRedirectUser, ROUTES } from \"@/lib/routes\";\n\n// Types\nexport type UserRole = 'admin' | 'professional' | 'influencer' | 'user';\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string;\n  name?: string; // Compatibility with existing code\n  phone?: string;\n  role: UserRole;\n  avatar_url?: string;\n  category?: string; // For professionals\n  approved?: boolean; // For professionals/influencers\n}\n\ninterface AuthContextType {\n  user: User | null;\n  supabaseUser: SupabaseUser | null;\n  session: Session | null;\n  loading: boolean;\n  login: (email: string, password: string, role?: UserRole) => Promise<{ error: Error | null }>;\n  register: (email: string, password: string, userData: any, role?: UserRole) => Promise<{ error: Error | null }>;\n  adminLogin: (email: string, password: string) => Promise<{ error: Error | null }>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [supabaseUser, setSupabaseUser] = useState<SupabaseUser | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    // Set up auth state listener FIRST\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('🔄 Auth state changed:', { event, userId: session?.user?.id });\n        \n        try {\n          setSession(session);\n          setSupabaseUser(session?.user ?? null);\n          \n          // Handle OAuth sign-in events\n          if (event === 'SIGNED_IN' && session?.user) {\n            console.log('🚀 User signed in successfully');\n            \n            // Check if this is an OAuth login (Google, etc.)\n            const isOAuthLogin = session.user.app_metadata?.providers?.includes('google');\n            \n            if (isOAuthLogin) {\n              console.log('🔍 OAuth login detected, processing profile...');\n              \n              try {\n                // Check if profile exists\n                const { data: existingProfile, error: profileError } = await supabase\n                  .from('profiles')\n                  .select('*')\n                  .eq('user_id', session.user.id)\n                  .single();\n                \n                if (profileError && profileError.code !== 'PGRST116') {\n                  console.error('❌ Error checking profile:', profileError);\n                }\n                \n                if (!existingProfile) {\n                  console.log('✨ Creating new profile for OAuth user...');\n                  \n                  // Create profile automatically for OAuth users as regular users\n                  const { error: insertError } = await supabase\n                    .from('profiles')\n                    .insert({\n                      user_id: session.user.id,\n                      email: session.user.email,\n                      full_name: session.user.user_metadata?.full_name || \n                                session.user.user_metadata?.name || \n                                session.user.email?.split('@')[0] || '',\n                      role: 'user', // Default role for OAuth signups\n                    });\n                  \n                  if (insertError) {\n                    console.error('❌ Error creating profile:', insertError);\n                  } else {\n                    console.log('✅ Profile created successfully for OAuth user');\n                  }\n                } else {\n                  console.log('✅ Existing profile found for OAuth user');\n                }\n              } catch (profileErr) {\n                console.error('❌ Profile processing error:', profileErr);\n              }\n            }\n            \n            // Load profile immediately after OAuth processing\n            loadUserProfile(session.user.id);\n          } else if (!session?.user) {\n            console.log('👋 User signed out');\n            setUser(null);\n          }\n        } catch (error) {\n          console.error('❌ Auth state change error:', error);\n        }\n        \n        setLoading(false);\n      }\n    );\n\n    // THEN check for existing session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setSupabaseUser(session?.user ?? null);\n      \n      if (session?.user) {\n        loadUserProfile(session.user.id);\n      }\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const loadUserProfile = async (userId: string) => {\n    try {\n      console.log('🔍 Loading user profile for:', userId);\n      \n      // Buscar perfil na nova tabela centralizada\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error) {\n        console.error('❌ Error loading profile:', error);\n        \n        // If profile doesn't exist and user is authenticated, create a basic one\n        if (error.code === 'PGRST116' && supabaseUser) {\n          console.log('🔧 Profile not found, creating basic profile...');\n          \n          const { error: createError } = await supabase\n            .from('profiles')\n            .insert({\n              user_id: userId,\n              email: supabaseUser.email || '',\n              full_name: supabaseUser.user_metadata?.full_name || \n                        supabaseUser.user_metadata?.name || \n                        supabaseUser.email?.split('@')[0] || '',\n              role: 'user',\n            });\n          \n          if (createError) {\n            console.error('❌ Error creating basic profile:', createError);\n            return;\n          }\n          \n          // Retry loading after creation\n          return loadUserProfile(userId);\n        }\n        return;\n      }\n\n      if (profileData) {\n        console.log('✅ Profile loaded successfully:', profileData);\n        \n        // Para profissionais, buscar dados adicionais\n        let additionalData = {};\n        if (profileData.role === 'professional') {\n          // Get additional professional data from profiles table\n          additionalData = { \n            category: 'professional', \n            approved: profileData.approved \n          };\n        }\n\n        setUser({\n          id: userId,\n          email: profileData.email || supabaseUser?.email || '',\n          full_name: profileData.full_name,\n          name: profileData.full_name, // Compatibility\n          phone: profileData.phone,\n          role: profileData.role as UserRole,\n          avatar_url: profileData.avatar_url, // Now available\n          ...additionalData\n        });\n        \n        // Handle automatic redirection with plan verification for users\n        const currentPath = location.pathname;\n        const shouldRedirect = currentPath === '/' || currentPath === '/auth' || currentPath.includes('login');\n        \n        if (shouldRedirect) {\n          // Para usuários comuns, verificar plano ativo antes de redirecionar\n          if (profileData.role === 'user') {\n            console.log('👤 Usuário comum detectado, verificando planos ativos...');\n            \n            // Usar setTimeout para evitar problemas de concorrência\n            setTimeout(async () => {\n              const { checkUserActivePlan, redirectBasedOnPlanStatus } = await import('@/lib/planUtils');\n              \n              const planStatus = await checkUserActivePlan(userId);\n              console.log('📋 Status do plano:', planStatus);\n              \n              redirectBasedOnPlanStatus(planStatus.hasActivePlan, profileData.role, navigate);\n            }, 100);\n            \n          } else {\n            // Outros tipos de usuário seguem fluxo normal\n            const targetRoute = profileData.role === 'admin' ? '/admin/dashboard' :\n                               profileData.role === 'professional' ? '/profissional/dashboard' :\n                               profileData.role === 'influencer' ? '/influenciador/dashboard' :\n                               '/usuario/dashboard';\n            \n            console.log('🎯 Redirecting user to:', targetRoute);\n            navigate(targetRoute, { replace: true });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('❌ Unexpected error loading profile:', error);\n    }\n  };\n\n  // Handle user redirection based on role and current location\n  const handleUserRedirection = (userRole: UserRole) => {\n    const currentPath = location.pathname;\n    \n    // Skip redirection if user is already on the correct dashboard or public pages\n    if (!shouldRedirectUser(currentPath, userRole)) {\n      return;\n    }\n    \n    const dashboardRoute = getDashboardRoute(userRole);\n    console.log(`🔄 Redirecting ${userRole} user to:`, dashboardRoute);\n    \n    navigate(dashboardRoute, { replace: true });\n  };\n\n  const login = async (email: string, password: string, role?: UserRole) => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        // Tratamento especial para erro de email não confirmado\n        if (error.message.includes('Email not confirmed')) {\n          throw new Error('Email não confirmado. Verifique sua caixa de entrada ou entre em contato com o suporte para ativar sua conta.');\n        }\n        throw error;\n      }\n\n      // Success - redirection will be handled by loadUserProfile\n      console.log('✅ Login successful, user profile will be loaded and redirected');\n      \n      return { error: null };\n    } catch (error: any) {\n      console.error('Erro no login:', error);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Google OAuth removido - sistema simplificado\n\n  const register = async (email: string, password: string, userData: any, role: UserRole = 'user') => {\n    try {\n      setLoading(true);\n      \n      // Cadastro com configuração personalizada\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: `${window.location.origin}/`,\n          data: {\n            full_name: userData.fullName || userData.nome || 'Usuário',\n            phone: userData.phone || userData.telefone || '',\n            role: role\n          }\n        }\n      });\n\n      if (error) throw error;\n\n      // Se o usuário foi criado, confirmar email automaticamente\n      if (data.user) {\n        console.log('✅ User registered, confirming email automatically...');\n        \n        try {\n          // Chamar função para confirmar email automaticamente\n          const { data: confirmData, error: confirmError } = await supabase.functions.invoke('auto-confirm-email', {\n            body: { email }\n          });\n\n          if (confirmError) {\n            console.warn('⚠️ Email confirmation failed:', confirmError);\n          } else {\n            console.log('✅ Email confirmed automatically');\n          }\n        } catch (confirmError) {\n          console.warn('⚠️ Email confirmation failed:', confirmError);\n        }\n\n        // Se não há sessão ainda, tentar fazer login\n        if (!data.session) {\n          console.log('🔄 No session after signup, attempting automatic login...');\n          \n          // Aguardar um momento para o email ser confirmado\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Tentar fazer login automaticamente\n          const loginResult = await login(email, password);\n          if (loginResult.error) {\n            console.warn('⚠️ Auto-login failed, user will need to login manually');\n            navigate('/confirmacao-email');\n          }\n        } else {\n          console.log('✅ User registered and logged in successfully');\n        }\n      }\n\n      return { error: null };\n    } catch (error: any) {\n      console.error('Erro durante cadastro:', error);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const adminLogin = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      console.log('🔐 Starting admin login process for:', email);\n      \n      // First, validate admin credentials using our custom function\n      const { data: adminData, error: validationError } = await supabase\n        .rpc('admin_login_validation', {\n          login_email: email,\n          login_password: password\n        });\n\n      console.log('🔍 Admin validation result:', { adminData, validationError });\n\n      if (validationError) {\n        console.error('❌ Admin validation error:', validationError);\n        throw new Error('Erro na validação: ' + validationError.message);\n      }\n\n      if (!adminData || adminData.length === 0) {\n        console.log('❌ No admin data returned - invalid credentials');\n        throw new Error('Email ou senha incorretos para administrador');\n      }\n\n      const adminProfile = adminData[0];\n      console.log('✅ Admin validated successfully:', adminProfile);\n      \n      // Now perform actual Supabase authentication to create a valid session\n      console.log('🔑 Performing Supabase authentication...');\n      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (authError) {\n        console.error('❌ Supabase auth error:', authError);\n        throw new Error('Erro na autenticação: ' + authError.message);\n      }\n\n      console.log('🎯 Authentication successful, setting session and user data');\n\n      // Set session and user state\n      setSession(authData.session);\n      setSupabaseUser(authData.user);\n      \n      // Set user state with admin profile data\n      const adminUser: User = {\n        id: adminProfile.profile_id,\n        email: adminProfile.profile_email,\n        full_name: adminProfile.profile_name,\n        name: adminProfile.profile_name,\n        phone: '',\n        role: adminProfile.profile_role as UserRole,\n        avatar_url: null,\n      };\n      \n      setUser(adminUser);\n      \n      \n      // Use setTimeout to ensure state is updated before navigation\n      setTimeout(() => {\n        navigate('/admin/dashboard', { replace: true });\n      }, 200);\n\n      return { error: null };\n    } catch (error: any) {\n      console.error('❌ Erro no login admin:', error);\n      return { error };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Clean up auth state\n      setUser(null);\n      setSupabaseUser(null);\n      setSession(null);\n      \n      // Sign out from Supabase\n      await supabase.auth.signOut({ scope: 'global' });\n      \n      // Force page reload for clean state\n      window.location.href = ROUTES.HOME;\n    } catch (error) {\n      console.error('Erro no logout:', error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user, \n        supabaseUser, \n        session, \n        login,\n        register,\n        adminLogin, \n        logout, \n        loading \n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, ReactNode } from 'react';\nimport { useNotifications } from '@/hooks/useNotifications';\n\nconst NotificationContext = createContext<ReturnType<typeof useNotifications> | undefined>(undefined);\n\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const notificationData = useNotifications();\n\n  return (\n    <NotificationContext.Provider value={notificationData}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport const useNotificationContext = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotificationContext must be used within a NotificationProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":32,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":32,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect } from 'react';\nimport { applyGlobalTheme } from '@/lib/theme';\n\ninterface ThemeContextType {\n  theme: 'dark';\n  isDarkMode: true;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  theme: 'dark',\n  isDarkMode: true,\n});\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  useEffect(() => {\n    // Apply theme once on mount - NO aggressive polling\n    applyGlobalTheme();\n  }, []);\n\n  const contextValue: ThemeContextType = {\n    theme: 'dark',\n    isDarkMode: true,\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useCredits.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserCredits'. Either include it or remove the dependency array.","line":305,"column":6,"nodeType":"ArrayExpression","endLine":305,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserCredits, user]","fix":{"range":[8587,8593],"text":"[loadUserCredits, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\n\nexport interface CreditTransaction {\n  id: string;\n  userId: string;\n  amount: number;\n  type: 'credit' | 'debit';\n  source: 'initial_payment' | 'referral_bonus' | 'marketplace_purchase' | 'withdrawal' | 'admin_adjustment';\n  description: string;\n  relatedOrderId?: string;\n  createdAt: string;\n}\n\nexport interface CreditBalance {\n  userId: string;\n  totalCredits: number;\n  availableCredits: number;\n  pendingWithdrawal: number;\n  lastUpdated: string;\n}\n\nexport const useCredits = () => {\n  const [balance, setBalance] = useState<CreditBalance | null>(null);\n  const [transactions, setTransactions] = useState<CreditTransaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Carregar saldo e transações do usuário\n  const loadUserCredits = async () => {\n    if (!user) return;\n    \n    try {\n      setLoading(true);\n      \n      // Carregar saldo atual\n      const { data: balanceData, error: balanceError } = await supabase\n        .from('user_credits')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (balanceError && balanceError.code !== 'PGRST116') {\n        console.error('Erro ao carregar saldo:', balanceError);\n      } else if (balanceData) {\n        setBalance({\n          userId: balanceData.user_id,\n          totalCredits: balanceData.total_credits,\n          availableCredits: balanceData.available_credits,\n          pendingWithdrawal: balanceData.pending_credits,\n          lastUpdated: balanceData.updated_at\n        });\n      } else {\n        // Criar registro inicial de créditos\n        const { data: newBalance, error: createError } = await supabase\n          .from('user_credits')\n          .insert({\n            user_id: user.id,\n            total_credits: 0,\n            available_credits: 0,\n            pending_credits: 0\n          })\n          .select()\n          .single();\n\n        if (createError) {\n          console.error('Erro ao criar saldo inicial:', createError);\n        } else if (newBalance) {\n          setBalance({\n            userId: newBalance.user_id,\n            totalCredits: newBalance.total_credits,\n            availableCredits: newBalance.available_credits,\n            pendingWithdrawal: newBalance.pending_credits,\n            lastUpdated: newBalance.updated_at\n          });\n        }\n      }\n\n      // Carregar histórico de transações\n      const { data: transactionsData, error: transactionsError } = await supabase\n        .from('credit_transactions')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (transactionsError) {\n        console.error('Erro ao carregar transações:', transactionsError);\n      } else if (transactionsData) {\n        const formattedTransactions: CreditTransaction[] = transactionsData.map(t => ({\n          id: t.id,\n          userId: t.user_id,\n          amount: t.amount,\n          type: (t.type as 'credit' | 'debit'),\n          source: (t.source_type as 'initial_payment' | 'referral_bonus' | 'marketplace_purchase' | 'withdrawal' | 'admin_adjustment'),\n          description: t.description,\n          relatedOrderId: t.reference_id || '',\n          createdAt: t.created_at\n        }));\n        setTransactions(formattedTransactions);\n      }\n\n    } catch (error) {\n      console.error('Erro ao carregar dados de créditos:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Adicionar créditos (para pagamentos, bônus, etc.)\n  const addCredits = async (amount: number, source: CreditTransaction['source'], description: string, relatedOrderId?: string) => {\n    if (!user) return false;\n\n    try {\n      const { data, error } = await supabase.functions.invoke('add-user-credits', {\n        body: {\n          userId: user.id,\n          amount,\n          source,\n          description,\n          relatedOrderId\n        }\n      });\n\n      if (error) {\n        console.error('Erro ao adicionar créditos:', error);\n        toast({\n          title: \"Erro ao adicionar créditos\",\n          description: \"Tente novamente em alguns instantes.\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Recarregar dados\n      await loadUserCredits();\n      \n      toast({\n        title: \"Créditos adicionados!\",\n        description: `R$ ${amount.toFixed(2)} foi adicionado ao seu saldo.`,\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao adicionar créditos:', error);\n      return false;\n    }\n  };\n\n  // Usar créditos (para marketplace, etc.)\n  const useCredits = async (amount: number, source: CreditTransaction['source'], description: string, relatedOrderId?: string) => {\n    if (!user || !balance) return false;\n\n    if (balance.availableCredits < amount) {\n      toast({\n        title: \"Saldo insuficiente\",\n        description: \"Você não tem créditos suficientes para esta transação.\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    try {\n      const { data, error } = await supabase.functions.invoke('use-user-credits', {\n        body: {\n          userId: user.id,\n          amount,\n          source,\n          description,\n          relatedOrderId\n        }\n      });\n\n      if (error) {\n        console.error('Erro ao usar créditos:', error);\n        toast({\n          title: \"Erro ao processar transação\",\n          description: \"Tente novamente em alguns instantes.\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Recarregar dados\n      await loadUserCredits();\n      \n      toast({\n        title: \"Créditos utilizados!\",\n        description: `R$ ${amount.toFixed(2)} foi debitado do seu saldo.`,\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao usar créditos:', error);\n      return false;\n    }\n  };\n\n  // Solicitar saque\n  const requestWithdrawal = async (amount: number) => {\n    if (!user || !balance) return false;\n\n    if (balance.availableCredits < amount) {\n      toast({\n        title: \"Saldo insuficiente\",\n        description: \"Você não tem créditos suficientes para este saque.\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    if (amount < 50) {\n      toast({\n        title: \"Valor mínimo\",\n        description: \"O valor mínimo para saque é R$ 50,00.\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    try {\n      const { data, error } = await supabase.functions.invoke('request-withdrawal', {\n        body: {\n          userId: user.id,\n          amount\n        }\n      });\n\n      if (error) {\n        console.error('Erro ao solicitar saque:', error);\n        toast({\n          title: \"Erro ao solicitar saque\",\n          description: \"Tente novamente em alguns instantes.\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Recarregar dados\n      await loadUserCredits();\n      \n      toast({\n        title: \"Saque solicitado!\",\n        description: `Sua solicitação de saque de R$ ${amount.toFixed(2)} está em análise.`,\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Erro ao solicitar saque:', error);\n      return false;\n    }\n  };\n\n  // Converter valor de entrada para créditos (quando usuário paga mas grupo não completa)\n  const convertPaymentToCredits = async (paymentAmount: number, orderId: string) => {\n    return await addCredits(\n      paymentAmount,\n      'initial_payment',\n      `Conversão de pagamento em créditos - Pedido #${orderId}`,\n      orderId\n    );\n  };\n\n  // Listener para atualizações em tempo real\n  useEffect(() => {\n    if (!user) return;\n\n    loadUserCredits();\n\n    // Configurar listener para mudanças em tempo real\n    const channel = supabase\n      .channel('user-credits')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'user_credits',\n          filter: `user_id=eq.${user.id}`\n        },\n        () => {\n          loadUserCredits();\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'credit_transactions',\n          filter: `user_id=eq.${user.id}`\n        },\n        () => {\n          loadUserCredits();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [user]);\n\n  return {\n    balance,\n    transactions,\n    loading,\n    addCredits,\n    useCredits,\n    requestWithdrawal,\n    convertPaymentToCredits,\n    refreshData: loadUserCredits\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useFileUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useMobileOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useNotificationTriggers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3248,3251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3248,3251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkAndExecuteTriggers' and 'loadUserTriggers'. Either include them or remove the dependency array.","line":155,"column":6,"nodeType":"ArrayExpression","endLine":155,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [checkAndExecuteTriggers, loadUserTriggers, user]","fix":{"range":[4678,4684],"text":"[checkAndExecuteTriggers, loadUserTriggers, user]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useAuth } from '@/contexts/AuthContext';\n\nexport interface AutomatedTrigger {\n  userId: string;\n  triggerType: '15_days' | '30_days' | '60_days' | '90_days' | '180_days';\n  executed: boolean;\n  executedAt?: string;\n  scheduledFor: string;\n  groupId: string;\n}\n\nexport const useNotificationTriggers = () => {\n  const [triggers, setTriggers] = useState<AutomatedTrigger[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { user } = useAuth();\n\n  // Verificar e executar gatilhos pendentes\n  const checkAndExecuteTriggers = async () => {\n    if (!user) return;\n\n    try {\n      const { data, error } = await supabase.functions.invoke('notification-triggers', {\n        body: { userId: user.id }\n      });\n\n      if (error) {\n        console.error('Erro ao verificar gatilhos:', error);\n      } else {\n        console.log('Gatilhos verificados:', data);\n      }\n    } catch (error) {\n      console.error('Erro ao executar gatilhos:', error);\n    }\n  };\n\n  // Agendar próximos gatilhos para um usuário\n  const scheduleTriggersForUser = async (userId: string, groupId: string, initialDate: Date) => {\n    const triggerDays = [15, 30, 60, 90, 180];\n    const triggers = triggerDays.map(days => {\n      const scheduledDate = new Date(initialDate);\n      scheduledDate.setDate(scheduledDate.getDate() + days);\n      \n      return {\n        user_id: userId,\n        group_id: groupId,\n        trigger_type: `${days}_days` as AutomatedTrigger['triggerType'],\n        scheduled_for: scheduledDate.toISOString(),\n        executed: false\n      };\n    });\n\n    try {\n      const triggersToInsert = triggers.map(trigger => ({\n        user_id: trigger.user_id,\n        event_type: trigger.trigger_type,\n        title: `Automated Trigger: ${trigger.trigger_type}`,\n        message: `Trigger scheduled for ${trigger.scheduled_for}`,\n        data: {\n          group_id: trigger.group_id,\n          trigger_type: trigger.trigger_type,\n          scheduled_for: trigger.scheduled_for\n        },\n        sent: trigger.executed\n      }));\n\n      const { error } = await supabase\n        .from('notification_triggers')\n        .insert(triggersToInsert);\n\n      if (error) {\n        console.error('Erro ao agendar gatilhos:', error);\n      } else {\n        console.log('Gatilhos agendados para usuário:', userId);\n      }\n    } catch (error) {\n      console.error('Erro ao agendar gatilhos:', error);\n    }\n  };\n\n  // Buscar gatilhos do usuário atual\n  const loadUserTriggers = async () => {\n    if (!user) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('notification_triggers')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('scheduled_for', { ascending: true });\n\n      if (error) {\n        console.error('Erro ao carregar gatilhos:', error);\n      } else {\n        const formattedTriggers: AutomatedTrigger[] = data?.map(t => ({\n          userId: t.user_id,\n          triggerType: (t.event_type as '15_days' | '30_days' | '60_days' | '90_days' | '180_days'),\n          executed: t.sent,\n          executedAt: t.sent_at || '',\n          scheduledFor: t.created_at,\n          groupId: (t.data as any)?.group_id || ''\n        })) || [];\n        \n        setTriggers(formattedTriggers);\n      }\n    } catch (error) {\n      console.error('Erro ao carregar gatilhos:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Executar verificação manual de gatilhos (para admins)\n  const runTriggersManually = async () => {\n    try {\n      const { data, error } = await supabase.functions.invoke('notification-triggers');\n      \n      if (error) {\n        console.error('Erro ao executar gatilhos manualmente:', error);\n        return false;\n      }\n      \n      console.log('Gatilhos executados manualmente:', data);\n      return true;\n    } catch (error) {\n      console.error('Erro ao executar gatilhos:', error);\n      return false;\n    }\n  };\n\n  // Estatísticas de gatilhos\n  const getTriggerStats = () => {\n    const total = triggers.length;\n    const executed = triggers.filter(t => t.executed).length;\n    const pending = total - executed;\n    const overdue = triggers.filter(t => \n      !t.executed && new Date(t.scheduledFor) < new Date()\n    ).length;\n\n    return { total, executed, pending, overdue };\n  };\n\n  useEffect(() => {\n    if (user) {\n      loadUserTriggers();\n      \n      // Verificar gatilhos a cada 5 minutos quando o usuário está ativo\n      const interval = setInterval(() => {\n        checkAndExecuteTriggers();\n      }, 5 * 60 * 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [user]);\n\n  return {\n    triggers,\n    loading,\n    checkAndExecuteTriggers,\n    scheduleTriggersForUser,\n    runTriggersManually,\n    getTriggerStats,\n    refreshTriggers: loadUserTriggers\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useNotifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[434,437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[434,437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [refresh]","fix":{"range":[4982,4984],"text":"[refresh]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\n\nexport type NotificationType = 'pagamento' | 'grupo_mlm' | 'comissao' | 'sistema';\n\nexport interface Notification {\n  id: string;\n  user_id: string;\n  type: NotificationType;\n  title: string;\n  message: string;\n  data?: any;\n  read: boolean;\n  actions?: string[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface UseNotificationsReturn {\n  notifications: Notification[];\n  unreadCount: number;\n  loading: boolean;\n  error: string | null;\n  currentPage: number;\n  totalPages: number;\n  hasNextPage: boolean;\n  selectedType: NotificationType | 'all';\n  markAsRead: (id: string) => Promise<void>;\n  markAsUnread: (id: string) => Promise<void>;\n  markAllAsRead: () => Promise<void>;\n  setSelectedType: (type: NotificationType | 'all') => void;\n  nextPage: () => void;\n  prevPage: () => void;\n  refresh: () => Promise<void>;\n  performAction: (notificationId: string, action: string) => Promise<void>;\n}\n\nconst ITEMS_PER_PAGE = 10;\nconst AUTO_REFRESH_INTERVAL = 30000; // 30 seconds\n\n// Mock notifications for demonstration\nconst createMockNotifications = (userId: string): Notification[] => [\n  {\n    id: '1',\n    user_id: userId,\n    type: 'pagamento',\n    title: 'Pagamento Confirmado',\n    message: 'Seu pagamento de R$ 150,00 foi confirmado com sucesso.',\n    read: false,\n    created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n    updated_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: '2',\n    user_id: userId,\n    type: 'grupo_mlm',\n    title: 'Novo Grupo Formado',\n    message: 'Parabéns! Você foi contemplado no grupo \"Procedimento Premium\".',\n    read: false,\n    actions: ['aceitar', 'recusar'],\n    created_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago\n    updated_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: '3',\n    user_id: userId,\n    type: 'comissao',\n    title: 'Comissão Recebida',\n    message: 'Você recebeu R$ 25,00 de comissão por indicação.',\n    read: true,\n    created_at: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(), // 8 hours ago\n    updated_at: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: '4',\n    user_id: userId,\n    type: 'sistema',\n    title: 'Atualização do Sistema',\n    message: 'Nova funcionalidade de saque disponível!',\n    read: false,\n    created_at: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 hours ago\n    updated_at: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: '5',\n    user_id: userId,\n    type: 'grupo_mlm',\n    title: 'Grupo Quase Completo',\n    message: 'Faltam apenas 2 participantes para o grupo \"Tratamento Facial\".',\n    read: true,\n    created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago\n    updated_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: '6',\n    user_id: userId,\n    type: 'pagamento',\n    title: 'PIX Expirado',\n    message: 'Seu PIX de R$ 200,00 expirou. Gere um novo código.',\n    read: false,\n    actions: ['gerar_novo_pix'],\n    created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n    updated_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  }\n];\n\nexport const useNotifications = (): UseNotificationsReturn => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedType, setSelectedType] = useState<NotificationType | 'all'>('all');\n\n  // Generate mock notifications when user is available\n  useEffect(() => {\n    if (user) {\n      const mockNotifications = createMockNotifications(user.id);\n      setNotifications(mockNotifications);\n      setLoading(false);\n    }\n  }, [user]);\n\n  // Filter notifications by type\n  const filteredNotifications = notifications.filter(\n    notification => selectedType === 'all' || notification.type === selectedType\n  );\n\n  // Pagination calculations\n  const totalPages = Math.ceil(filteredNotifications.length / ITEMS_PER_PAGE);\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const endIndex = startIndex + ITEMS_PER_PAGE;\n  const paginatedNotifications = filteredNotifications.slice(startIndex, endIndex);\n  const hasNextPage = currentPage < totalPages;\n\n  // Count unread notifications\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  // Auto-refresh notifications\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refresh();\n    }, AUTO_REFRESH_INTERVAL);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Reset to first page when filter changes\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [selectedType]);\n\n  const markAsRead = useCallback(async (id: string) => {\n    try {\n      // In a real implementation, this would call Supabase\n      // const { error } = await supabase\n      //   .from('notifications')\n      //   .update({ read: true, updated_at: new Date().toISOString() })\n      //   .eq('id', id);\n\n      // if (error) throw error;\n\n      setNotifications(prev => \n        prev.map(n => n.id === id ? { ...n, read: true } : n)\n      );\n\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível marcar a notificação como lida.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [toast]);\n\n  const markAsUnread = useCallback(async (id: string) => {\n    try {\n      setNotifications(prev => \n        prev.map(n => n.id === id ? { ...n, read: false } : n)\n      );\n    } catch (error) {\n      console.error('Error marking notification as unread:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível marcar a notificação como não lida.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [toast]);\n\n  const markAllAsRead = useCallback(async () => {\n    try {\n      setNotifications(prev => \n        prev.map(n => ({ ...n, read: true }))\n      );\n\n      toast({\n        title: \"Sucesso\",\n        description: \"Todas as notificações foram marcadas como lidas.\",\n      });\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível marcar todas as notificações como lidas.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [toast]);\n\n  const performAction = useCallback(async (notificationId: string, action: string) => {\n    try {\n      // In a real implementation, this would handle different actions\n      console.log(`Performing action \"${action}\" on notification ${notificationId}`);\n      \n      toast({\n        title: \"Ação realizada\",\n        description: `Ação \"${action}\" executada com sucesso.`,\n      });\n      \n      // Mark notification as read after action\n      await markAsRead(notificationId);\n      \n    } catch (error) {\n      console.error('Error performing action:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível executar a ação.\",\n        variant: \"destructive\"\n      });\n    }\n  }, [markAsRead, toast]);\n\n  const refresh = useCallback(async () => {\n    try {\n      setLoading(true);\n      // In a real implementation, this would fetch fresh data from Supabase\n      // For now, we'll just simulate a refresh\n      if (user) {\n        const mockNotifications = createMockNotifications(user.id);\n        setNotifications(mockNotifications);\n      }\n    } catch (error) {\n      console.error('Error refreshing notifications:', error);\n      setError('Erro ao carregar notificações');\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  const nextPage = useCallback(() => {\n    if (hasNextPage) {\n      setCurrentPage(prev => prev + 1);\n    }\n  }, [hasNextPage]);\n\n  const prevPage = useCallback(() => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  }, [currentPage]);\n\n  return {\n    notifications: paginatedNotifications,\n    unreadCount,\n    loading,\n    error,\n    currentPage,\n    totalPages,\n    hasNextPage,\n    selectedType,\n    markAsRead,\n    markAsUnread,\n    markAllAsRead,\n    setSelectedType,\n    nextPage,\n    prevPage,\n    refresh,\n    performAction\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useOptimizedData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number; // Time to live in milliseconds\n}\n\n// Cache global para dados reutilizáveis\nconst globalCache = new Map<string, CacheEntry<any>>();\n\n// Hook otimizado para carregar dados com cache\nexport const useOptimizedData = <T>(\n  key: string,\n  fetcher: () => Promise<T>,\n  options: {\n    ttl?: number; // Cache TTL em ms (padrão: 5 minutos)\n    immediate?: boolean; // Carregar imediatamente (padrão: true)\n    refetchOnMount?: boolean; // Recarregar ao montar (padrão: false)\n  } = {}\n) => {\n  const {\n    ttl = 5 * 60 * 1000, // 5 minutos\n    immediate = true,\n    refetchOnMount = false\n  } = options;\n\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const mountedRef = useRef(true);\n\n  // Verificar cache\n  const getCachedData = useCallback(() => {\n    const cached = globalCache.get(key);\n    if (cached && Date.now() - cached.timestamp < cached.ttl) {\n      return cached.data;\n    }\n    return null;\n  }, [key]);\n\n  // Salvar no cache\n  const setCachedData = useCallback((newData: T) => {\n    globalCache.set(key, {\n      data: newData,\n      timestamp: Date.now(),\n      ttl\n    });\n  }, [key, ttl]);\n\n  // Função para buscar dados\n  const fetchData = useCallback(async (force = false) => {\n    // Verificar cache primeiro se não for forçado\n    if (!force) {\n      const cached = getCachedData();\n      if (cached) {\n        setData(cached);\n        return cached;\n      }\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await fetcher();\n      if (mountedRef.current) {\n        setData(result);\n        setCachedData(result);\n      }\n      return result;\n    } catch (err) {\n      const error = err as Error;\n      if (mountedRef.current) {\n        setError(error);\n        console.error(`Error fetching data for key \"${key}\":`, error);\n      }\n      throw error;\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n    }\n  }, [key, fetcher, getCachedData, setCachedData]);\n\n  // Carregar dados iniciais\n  useEffect(() => {\n    if (immediate || refetchOnMount) {\n      const cached = getCachedData();\n      if (cached && !refetchOnMount) {\n        setData(cached);\n      } else {\n        fetchData();\n      }\n    }\n\n    return () => {\n      mountedRef.current = false;\n    };\n  }, [immediate, refetchOnMount, fetchData, getCachedData]);\n\n  // Função para invalidar cache\n  const invalidateCache = useCallback(() => {\n    globalCache.delete(key);\n  }, [key]);\n\n  // Função para refetch\n  const refetch = useCallback(() => {\n    return fetchData(true);\n  }, [fetchData]);\n\n  return {\n    data,\n    loading,\n    error,\n    refetch,\n    invalidateCache,\n    fetchData: () => fetchData(false)\n  };\n};\n\n// Hook específico para dados de marketplace - APENAS PRODUTOS REAIS\nexport const useMarketplaceProducts = () => {\n  return useOptimizedData(\n    'marketplace-products-real',\n    async () => {\n      const { data, error } = await supabase\n        .from('products')\n        .select('*')\n        .eq('active', true)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Se não há produtos reais, retornar array vazio\n      if (!data || data.length === 0) {\n        return [];\n      }\n\n      return data.map(product => ({\n        id: product.id,\n        title: product.name,\n        description: product.description || '',\n        full_price: Number(product.price),\n        down_payment: Number(product.price), // Preço total para marketplace\n        category: product.category || 'Produtos',\n        professional_name: 'Profissional Certificado',\n        professional_id: product.professional_id,\n        professional_avatar: null,\n        image_url: product.image_url,\n        external_link: product.external_link,\n        visibility: 'both' as 'client' | 'professional' | 'both',\n        is_active: product.active,\n        created_at: product.created_at,\n        total_sales: 0,\n        rating: 5.0 // Produtos certificados\n      }));\n    },\n    { ttl: 10 * 1000, immediate: true, refetchOnMount: true } // Cache muito curto + refetch obrigatório\n  );\n};\n\n// Hook específico para estatísticas de admin\nexport const useAdminStats = () => {\n  return useOptimizedData(\n    'admin-stats',\n    async () => {\n      // Buscar estatísticas reais\n      const [profilesResult, productsResult, creditsResult] = await Promise.all([\n        supabase.from('profiles').select('count', { count: 'exact', head: true }),\n        supabase.from('products').select('count', { count: 'exact', head: true }),\n        supabase.from('user_credits').select('count', { count: 'exact', head: true })\n      ]);\n\n      return {\n        totalParticipants: profilesResult.count || 0,\n        totalProfessionals: profilesResult.count || 0,\n        totalProducts: productsResult.count || 0,\n        activeGroups: 12, // Mock data\n        monthlyRevenue: 45000,\n        contemplatedThisMonth: 8\n      };\n    },\n    { ttl: 10 * 60 * 1000 } // Cache por 10 minutos\n  );\n};\n\n// Limpar cache expirado periodicamente\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, entry] of globalCache.entries()) {\n    if (now - entry.timestamp > entry.ttl) {\n      globalCache.delete(key);\n    }\n  }\n}, 60000); // Verificar a cada minuto","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useOptimizedState.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1416,1419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1416,1419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useMemo, useRef } from 'react';\n\n// Optimized state hook for async operations\nexport function useAsyncState<T>(initialValue: T) {\n  const [data, setData] = useState<T>(initialValue);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const mountedRef = useRef(true);\n\n  const setAsyncData = useCallback(async (asyncAction: () => Promise<T>) => {\n    if (!mountedRef.current) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await asyncAction();\n      if (mountedRef.current) {\n        setData(result);\n      }\n    } catch (err) {\n      if (mountedRef.current) {\n        setError(err instanceof Error ? err.message : 'An error occurred');\n      }\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    if (mountedRef.current) {\n      setData(initialValue);\n      setError(null);\n      setLoading(false);\n    }\n  }, [initialValue]);\n\n  // Cleanup on unmount\n  const cleanup = useCallback(() => {\n    mountedRef.current = false;\n  }, []);\n\n  return useMemo(() => ({\n    data,\n    loading,\n    error,\n    setData,\n    setAsyncData,\n    reset,\n    cleanup\n  }), [data, loading, error, setAsyncData, reset, cleanup]);\n}\n\n// Optimized form state hook\nexport function useFormState<T extends Record<string, any>>(initialState: T) {\n  const [state, setState] = useState<T>(initialState);\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n  const [touched, setTouched] = useState<Partial<Record<keyof T, boolean>>>({});\n\n  const updateField = useCallback(<K extends keyof T>(field: K, value: T[K]) => {\n    setState(prev => ({ ...prev, [field]: value }));\n    setTouched(prev => ({ ...prev, [field]: true }));\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  }, [errors]);\n\n  const setFieldError = useCallback(<K extends keyof T>(field: K, error: string) => {\n    setErrors(prev => ({ ...prev, [field]: error }));\n  }, []);\n\n  const reset = useCallback(() => {\n    setState(initialState);\n    setErrors({});\n    setTouched({});\n  }, [initialState]);\n\n  const hasErrors = useMemo(() => Object.values(errors).some(Boolean), [errors]);\n\n  return useMemo(() => ({\n    state,\n    errors,\n    touched,\n    hasErrors,\n    updateField,\n    setFieldError,\n    setState,\n    setErrors,\n    reset\n  }), [state, errors, touched, hasErrors, updateField, setFieldError, reset]);\n}\n\n// Optimized pagination hook\nexport function usePagination<T>(\n  items: T[],\n  itemsPerPage: number = 10\n) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const totalPages = useMemo(() => \n    Math.ceil(items.length / itemsPerPage), \n    [items.length, itemsPerPage]\n  );\n\n  const paginatedItems = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return items.slice(startIndex, startIndex + itemsPerPage);\n  }, [items, currentPage, itemsPerPage]);\n\n  const goToPage = useCallback((page: number) => {\n    setCurrentPage(Math.max(1, Math.min(page, totalPages)));\n  }, [totalPages]);\n\n  const nextPage = useCallback(() => {\n    goToPage(currentPage + 1);\n  }, [currentPage, goToPage]);\n\n  const prevPage = useCallback(() => {\n    goToPage(currentPage - 1);\n  }, [currentPage, goToPage]);\n\n  const reset = useCallback(() => {\n    setCurrentPage(1);\n  }, []);\n\n  return useMemo(() => ({\n    currentPage,\n    totalPages,\n    paginatedItems,\n    goToPage,\n    nextPage,\n    prevPage,\n    reset,\n    hasNext: currentPage < totalPages,\n    hasPrev: currentPage > 1\n  }), [currentPage, totalPages, paginatedItems, goToPage, nextPage, prevPage, reset]);\n}\n\n// Optimized toggle hook\nexport function useToggle(initialValue: boolean = false) {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() => setValue(prev => !prev), []);\n  const setTrue = useCallback(() => setValue(true), []);\n  const setFalse = useCallback(() => setValue(false), []);\n\n  return useMemo(() => ({\n    value,\n    toggle,\n    setTrue,\n    setFalse,\n    setValue\n  }), [value, toggle, setTrue, setFalse]);\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/usePerformanceMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/usePerformanceOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":88,"column":6,"nodeType":"Identifier","endLine":88,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'importFunc'. Either include it or remove the dependency array. If 'importFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":88,"column":6,"nodeType":"Identifier","endLine":88,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [importFunc]","fix":{"range":[2213,2217],"text":"[importFunc]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":97,"column":6,"nodeType":"Identifier","endLine":97,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cleanup'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"Identifier","endLine":97,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [cleanup]","fix":{"range":[2424,2428],"text":"[cleanup]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'options'. Either include it or remove the dependency array.","line":169,"column":6,"nodeType":"ArrayExpression","endLine":169,"endColumn":36,"suggestions":[{"desc":"Update the dependencies array to be: [options, url]","fix":{"range":[4378,4408],"text":"[options, url]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":169,"column":12,"nodeType":"CallExpression","endLine":169,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useMemo } from 'react';\n\n// Debounce hook otimizado\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = React.useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n// Throttle hook para eventos de scroll\nexport function useThrottle<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number\n): T {\n  const lastRun = React.useRef(Date.now());\n\n  return useCallback(\n    ((...args) => {\n      if (Date.now() - lastRun.current >= delay) {\n        callback(...args);\n        lastRun.current = Date.now();\n      }\n    }) as T,\n    [callback, delay]\n  );\n}\n\n// Hook para lazy loading de imagens\nexport function useLazyImage(src: string, threshold = 0.1) {\n  const [imageSrc, setImageSrc] = React.useState<string | null>(null);\n  const [imageRef, setImageRef] = React.useState<HTMLImageElement | null>(null);\n\n  useEffect(() => {\n    if (!imageRef || !src) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setImageSrc(src);\n          observer.disconnect();\n        }\n      },\n      { threshold }\n    );\n\n    observer.observe(imageRef);\n\n    return () => observer.disconnect();\n  }, [imageRef, src, threshold]);\n\n  return [imageSrc, setImageRef] as const;\n}\n\n// Hook para componentes lazy loading\nexport function useLazyComponent<T extends React.ComponentType<any>>(\n  importFunc: () => Promise<{ default: T }>,\n  deps: React.DependencyList = []\n) {\n  const [Component, setComponent] = React.useState<T | null>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<Error | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n\n    importFunc()\n      .then(module => {\n        setComponent(() => module.default);\n      })\n      .catch(err => {\n        console.error('Failed to load component:', err);\n        setError(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, deps);\n\n  return { Component, loading, error };\n}\n\n// Hook para cleanup automático\nexport function useCleanup(cleanup: () => void, deps: React.DependencyList = []) {\n  useEffect(() => {\n    return cleanup;\n  }, deps);\n}\n\n// Hook para performance monitoring\nexport function usePerformanceMonitor(componentName: string, enabled = false) {\n  const startTime = useMemo(() => performance.now(), []);\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n\n    // Log apenas se for mais lento que 16ms (60fps)\n    if (renderTime > 16) {\n      console.warn(`Performance warning: ${componentName} took ${renderTime.toFixed(2)}ms to render`);\n    }\n  });\n\n  return {\n    mark: useCallback((label: string) => {\n      if (enabled) {\n        performance.mark(`${componentName}-${label}`);\n      }\n    }, [componentName, enabled]),\n\n    measure: useCallback((startMark: string, endMark: string) => {\n      if (enabled) {\n        try {\n          performance.measure(\n            `${componentName}-duration`,\n            `${componentName}-${startMark}`,\n            `${componentName}-${endMark}`\n          );\n        } catch (error) {\n          console.warn('Performance measurement failed:', error);\n        }\n      }\n    }, [componentName, enabled])\n  };\n}\n\n// Hook otimizado para API calls\nexport function useOptimizedFetch<T>(\n  url: string | null,\n  options: RequestInit = {}\n) {\n  const [data, setData] = React.useState<T | null>(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState<Error | null>(null);\n\n  const fetchData = useCallback(async () => {\n    if (!url) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(url, options);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      setData(result);\n    } catch (err) {\n      console.error('Fetch error:', err);\n      setError(err instanceof Error ? err : new Error('Unknown error'));\n    } finally {\n      setLoading(false);\n    }\n  }, [url, JSON.stringify(options)]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return { data, loading, error, refetch: fetchData };\n}\n\nimport React from 'react';","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useReferralTracking.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":95,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":95,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2913,2926],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2967,2970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2967,2970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3009,3012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3009,3012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":97,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":97,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3047,3060],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3101,3104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3101,3104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3148,3151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3148,3151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\ninterface ReferralTracking {\n  referralCode: string | null;\n  isReferred: boolean;\n  setReferralCode: (code: string) => void;\n  clearReferralCode: () => void;\n  validateReferralCode: (code: string) => boolean;\n}\n\n// Enhanced security validation for referral codes\nconst validateReferralCodeFormat = (code: string): boolean => {\n  // Check format: Must be alphanumeric, 3-16 characters\n  const formatRegex = /^[A-Z0-9]{3,16}$/;\n  if (!formatRegex.test(code)) {\n    return false;\n  }\n  \n  // Check for common patterns that might indicate malicious input\n  const suspiciousPatterns = [\n    /script/i,\n    /javascript/i,\n    /eval/i,\n    /onclick/i,\n    /onerror/i,\n    /<|>|&lt;|&gt;/,\n    /['\"]/,\n    /\\\\/\n  ];\n  \n  return !suspiciousPatterns.some(pattern => pattern.test(code));\n};\n\n// Secure storage with validation and encryption-like obfuscation\nconst secureStorage = {\n  setItem: (key: string, value: string) => {\n    if (!validateReferralCodeFormat(value)) {\n      console.warn('Invalid referral code format, not storing');\n      return;\n    }\n    \n    // Simple obfuscation (not real encryption, but adds a layer)\n    const obfuscated = btoa(value + '|' + Date.now());\n    localStorage.setItem(key, obfuscated);\n  },\n  \n  getItem: (key: string): string | null => {\n    try {\n      const stored = localStorage.getItem(key);\n      if (!stored) return null;\n      \n      const decoded = atob(stored);\n      const [code, timestamp] = decoded.split('|');\n      \n      // Check if stored referral is not too old (24 hours)\n      const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n      if (Date.now() - parseInt(timestamp) > maxAge) {\n        localStorage.removeItem(key);\n        return null;\n      }\n      \n      return validateReferralCodeFormat(code) ? code : null;\n    } catch {\n      // Invalid stored data, remove it\n      localStorage.removeItem(key);\n      return null;\n    }\n  },\n  \n  removeItem: (key: string) => {\n    localStorage.removeItem(key);\n  }\n};\n\nexport const useReferralTracking = (): ReferralTracking => {\n  const [searchParams] = useSearchParams();\n  const [referralCode, setReferralCodeState] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Verifica se há um código de referência na URL\n    const urlReferralCode = searchParams.get('ref');\n    \n    // Verifica se há um código salvo no localStorage\n    const savedReferralCode = secureStorage.getItem('pendingReferralCode');\n\n    if (urlReferralCode && validateReferralCodeFormat(urlReferralCode)) {\n      // Prioriza o código da URL se for válido\n      setReferralCodeState(urlReferralCode);\n      secureStorage.setItem('pendingReferralCode', urlReferralCode);\n\n      // Disparar tracking de clique de forma best-effort\n      try {\n        // Using window.env fallback to avoid TS import.meta typing issues in some setups\n        // @ts-ignore\n        const baseUrl = (import.meta as any).env?.VITE_SUPABASE_URL || (window as any)?.ENV?.VITE_SUPABASE_URL;\n        // @ts-ignore\n        const anonKey = (import.meta as any).env?.VITE_SUPABASE_ANON_KEY || (window as any)?.ENV?.VITE_SUPABASE_ANON_KEY;\n        fetch(`${baseUrl}/rest/v1/rpc/record_influencer_click`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'apikey': anonKey,\n            'Authorization': `Bearer ${anonKey}`\n          },\n          body: JSON.stringify({\n            p_referral_code: urlReferralCode,\n            p_user_id: null,\n            p_user_agent: navigator.userAgent,\n            p_ip_hash: null,\n            p_context: { path: window.location.pathname }\n          })\n        });\n      } catch (e) {\n        // best-effort, ignore errors\n      }\n    } else if (savedReferralCode) {\n      // Usa o código salvo se não houver na URL\n      setReferralCodeState(savedReferralCode);\n    }\n  }, [searchParams]);\n\n  const setReferralCode = (code: string) => {\n    if (!validateReferralCodeFormat(code)) {\n      console.warn('Invalid referral code format');\n      return;\n    }\n    \n    setReferralCodeState(code);\n    secureStorage.setItem('pendingReferralCode', code);\n  };\n\n  const clearReferralCode = () => {\n    setReferralCodeState(null);\n    secureStorage.removeItem('pendingReferralCode');\n  };\n\n  return {\n    referralCode,\n    isReferred: !!referralCode,\n    setReferralCode,\n    clearReferralCode,\n    validateReferralCode: validateReferralCodeFormat\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useResponsiveDesign.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useStripeAccount.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useSupabaseQueries.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4317,4320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4317,4320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4869,4872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4869,4872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\n\n// Plans queries\nexport function usePlans() {\n  return useQuery({\n    queryKey: ['plans'],\n    queryFn: async () => {\n      const { data, error } = await supabase.functions.invoke('unified-plans-loader');\n      if (error) throw error;\n      return data.plans || [];\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n}\n\nexport function useCustomPlans() {\n  return useQuery({\n    queryKey: ['custom-plans'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('custom_plans')\n        .select('*')\n        .eq('active', true)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n}\n\n// Users queries\nexport function useUsers() {\n  return useQuery({\n    queryKey: ['users'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useUserProfile(userId?: string) {\n  return useQuery({\n    queryKey: ['user-profile', userId],\n    queryFn: async () => {\n      if (!userId) return null;\n      \n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: !!userId,\n    staleTime: 5 * 60 * 1000,\n    gcTime: 10 * 60 * 1000,\n  });\n}\n\n// Groups queries\nexport function usePlanGroups() {\n  return useQuery({\n    queryKey: ['plan-groups'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('plan_groups')\n        .select(`\n          *,\n          custom_plans (name, price, description),\n          group_participants (\n            id,\n            user_id,\n            amount_paid,\n            status,\n            joined_at,\n            profiles (full_name, email)\n          )\n        `)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 30 * 1000, // 30 seconds (groups change frequently)\n    gcTime: 2 * 60 * 1000,\n  });\n}\n\n// Payment queries\nexport function usePayments() {\n  return useQuery({\n    queryKey: ['payments'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('payments')\n        .select(`\n          *,\n          profiles (full_name, email)\n        `)\n        .order('created_at', { ascending: false })\n        .limit(100);\n      \n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 1 * 60 * 1000, // 1 minute\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Marketplace queries\nexport function useMarketplaceSales() {\n  return useQuery({\n    queryKey: ['marketplace-sales'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('marketplace_sales')\n        .select(`\n          *,\n          buyer:buyer_id (full_name, email),\n          seller:seller_id (full_name, email),\n          referrer:referrer_id (full_name, email)\n        `)\n        .order('created_at', { ascending: false })\n        .limit(100);\n      \n      if (error) throw error;\n      return data || [];\n    },\n    staleTime: 1 * 60 * 1000,\n    gcTime: 5 * 60 * 1000,\n  });\n}\n\n// Credit queries\nexport function useUserCredits(userId?: string) {\n  return useQuery({\n    queryKey: ['user-credits', userId],\n    queryFn: async () => {\n      if (!userId) return null;\n      \n      const { data, error } = await supabase\n        .from('user_credits')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    enabled: !!userId,\n    staleTime: 30 * 1000, // 30 seconds (credits change frequently)\n    gcTime: 2 * 60 * 1000,\n  });\n}\n\n// Mutation hooks\nexport function useCreatePlan() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (planData: any) => {\n      const { data, error } = await supabase\n        .from('custom_plans')\n        .insert(planData)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['plans'] });\n      queryClient.invalidateQueries({ queryKey: ['custom-plans'] });\n    },\n  });\n}\n\nexport function useUpdateUser() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: any }) => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .update(updates)\n        .eq('user_id', userId)\n        .select()\n        .single();\n      \n      if (error) throw error;\n      return data;\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      queryClient.invalidateQueries({ queryKey: ['user-profile', variables.userId] });\n    },\n  });\n}\n\nexport function useDeletePlan() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (planId: string) => {\n      const { error } = await supabase\n        .from('custom_plans')\n        .update({ active: false })\n        .eq('id', planId);\n      \n      if (error) throw error;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['plans'] });\n      queryClient.invalidateQueries({ queryKey: ['custom-plans'] });\n    },\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/hooks/useUserHistory.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[681,684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[681,684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'filtered' is never reassigned. Use 'const' instead.","line":149,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":149,"endColumn":17,"fix":{"range":[4870,5379],"text":"const filtered = items.filter(item => {\n      // Type filter\n      if (selectedType !== 'all' && item.type !== selectedType) return false;\n      \n      // Date range filter\n      if (dateRange.start && new Date(item.date) < dateRange.start) return false;\n      if (dateRange.end && new Date(item.date) > dateRange.end) return false;\n      \n      // Amount filter\n      const amount = Math.abs(item.amount || 0);\n      if (amount < minAmount || amount > maxAmount) return false;\n      \n      return true;\n    });"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport { format, subMonths, startOfMonth, endOfMonth } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\nexport type HistoryType = 'compras' | 'creditos' | 'grupos' | 'comissoes' | 'all';\nexport type SortField = 'date' | 'amount' | 'type' | 'status';\nexport type SortOrder = 'asc' | 'desc';\n\nexport interface HistoryItem {\n  id: string;\n  type: HistoryType;\n  title: string;\n  description: string;\n  amount?: number;\n  status: string;\n  date: string;\n  metadata?: any;\n}\n\ninterface UseUserHistoryReturn {\n  items: HistoryItem[];\n  loading: boolean;\n  error: string | null;\n  totalItems: number;\n  totalPages: number;\n  currentPage: number;\n  itemsPerPage: number;\n  selectedType: HistoryType;\n  sortField: SortField;\n  sortOrder: SortOrder;\n  dateRange: { start: Date | null; end: Date | null };\n  minAmount: number;\n  maxAmount: number;\n  monthlyData: Array<{ month: string; total: number; count: number }>;\n  setSelectedType: (type: HistoryType) => void;\n  setSortField: (field: SortField) => void;\n  setSortOrder: (order: SortOrder) => void;\n  setDateRange: (range: { start: Date | null; end: Date | null }) => void;\n  setAmountRange: (min: number, max: number) => void;\n  setCurrentPage: (page: number) => void;\n  setItemsPerPage: (items: number) => void;\n  refresh: () => Promise<void>;\n  exportToPDF: () => void;\n  exportToCSV: () => void;\n  clearFilters: () => void;\n}\n\nconst MOCK_HISTORY_ITEMS: HistoryItem[] = [\n  {\n    id: '1',\n    type: 'compras',\n    title: 'Procedimento Estético Premium',\n    description: 'Tratamento facial completo - Dr. Silva',\n    amount: 450.00,\n    status: 'concluido',\n    date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { professional: 'Dr. Silva', location: 'São Paulo' }\n  },\n  {\n    id: '2',\n    type: 'creditos',\n    title: 'Crédito Adicionado',\n    description: 'Pagamento via PIX confirmado',\n    amount: 200.00,\n    status: 'confirmado',\n    date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { paymentMethod: 'PIX', transactionId: 'TX123456' }\n  },\n  {\n    id: '3',\n    type: 'grupos',\n    title: 'Grupo \"Harmonização Facial\"',\n    description: 'Participação contemplada - 3ª posição',\n    amount: 800.00,\n    status: 'contemplado',\n    date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { position: 3, totalMembers: 10, groupId: 'G001' }\n  },\n  {\n    id: '4',\n    type: 'comissoes',\n    title: 'Comissão por Indicação',\n    description: 'João Silva se cadastrou usando seu link',\n    amount: 25.00,\n    status: 'pago',\n    date: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { referredName: 'João Silva', level: 1 }\n  },\n  {\n    id: '5',\n    type: 'compras',\n    title: 'Consulta Dermatológica',\n    description: 'Avaliação inicial - Dra. Santos',\n    amount: 120.00,\n    status: 'agendado',\n    date: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { professional: 'Dra. Santos', scheduledFor: '2024-02-15' }\n  },\n  {\n    id: '6',\n    type: 'grupos',\n    title: 'Grupo \"Botox Premium\"',\n    description: 'Aguardando contemplação - 8º na fila',\n    amount: 600.00,\n    status: 'aguardando',\n    date: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { position: 8, totalMembers: 12, groupId: 'G002' }\n  },\n  {\n    id: '7',\n    type: 'creditos',\n    title: 'Débito por Compra',\n    description: 'Pagamento do procedimento',\n    amount: -450.00,\n    status: 'processado',\n    date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    metadata: { relatedPurchase: '1' }\n  }\n];\n\nexport const useUserHistory = (): UseUserHistoryReturn => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [items, setItems] = useState<HistoryItem[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [selectedType, setSelectedType] = useState<HistoryType>('all');\n  const [sortField, setSortField] = useState<SortField>('date');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\n  const [dateRange, setDateRange] = useState<{ start: Date | null; end: Date | null }>({ start: null, end: null });\n  const [minAmount, setMinAmount] = useState(0);\n  const [maxAmount, setMaxAmount] = useState(10000);\n\n  // Load mock data on component mount\n  useEffect(() => {\n    if (user) {\n      setItems(MOCK_HISTORY_ITEMS);\n    }\n  }, [user]);\n\n  // Filter and sort items\n  const filteredAndSortedItems = useMemo(() => {\n    let filtered = items.filter(item => {\n      // Type filter\n      if (selectedType !== 'all' && item.type !== selectedType) return false;\n      \n      // Date range filter\n      if (dateRange.start && new Date(item.date) < dateRange.start) return false;\n      if (dateRange.end && new Date(item.date) > dateRange.end) return false;\n      \n      // Amount filter\n      const amount = Math.abs(item.amount || 0);\n      if (amount < minAmount || amount > maxAmount) return false;\n      \n      return true;\n    });\n\n    // Sort items\n    filtered.sort((a, b) => {\n      let aVal, bVal;\n      \n      switch (sortField) {\n        case 'date':\n          aVal = new Date(a.date).getTime();\n          bVal = new Date(b.date).getTime();\n          break;\n        case 'amount':\n          aVal = Math.abs(a.amount || 0);\n          bVal = Math.abs(b.amount || 0);\n          break;\n        case 'type':\n          aVal = a.type;\n          bVal = b.type;\n          break;\n        case 'status':\n          aVal = a.status;\n          bVal = b.status;\n          break;\n        default:\n          return 0;\n      }\n      \n      if (sortOrder === 'asc') {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    });\n\n    return filtered;\n  }, [items, selectedType, sortField, sortOrder, dateRange, minAmount, maxAmount]);\n\n  // Pagination\n  const totalItems = filteredAndSortedItems.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedItems = filteredAndSortedItems.slice(startIndex, startIndex + itemsPerPage);\n\n  // Monthly data for charts\n  const monthlyData = useMemo(() => {\n    const monthlyStats = new Map();\n    \n    items.forEach(item => {\n      if (item.amount) {\n        const month = format(new Date(item.date), 'MMM yyyy', { locale: ptBR });\n        const current = monthlyStats.get(month) || { total: 0, count: 0 };\n        monthlyStats.set(month, {\n          total: current.total + Math.abs(item.amount),\n          count: current.count + 1\n        });\n      }\n    });\n\n    return Array.from(monthlyStats.entries())\n      .map(([month, data]) => ({ month, ...data }))\n      .sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime())\n      .slice(-6); // Last 6 months\n  }, [items]);\n\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In a real implementation, fetch from Supabase\n      // For now, just simulate refresh\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      if (user) {\n        setItems(MOCK_HISTORY_ITEMS);\n      }\n    } catch (err) {\n      setError('Erro ao carregar histórico');\n      console.error('Error loading history:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportToPDF = () => {\n    try {\n      // This would be implemented with jsPDF\n      toast({\n        title: \"Export realizado\",\n        description: \"Relatório PDF foi gerado com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no export\",\n        description: \"Não foi possível gerar o PDF.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const exportToCSV = () => {\n    try {\n      const headers = ['Data', 'Tipo', 'Descrição', 'Valor', 'Status'];\n      const csvData = filteredAndSortedItems.map(item => [\n        format(new Date(item.date), 'dd/MM/yyyy'),\n        item.type,\n        item.description,\n        item.amount ? `R$ ${item.amount.toFixed(2)}` : '-',\n        item.status\n      ]);\n\n      const csvContent = [headers, ...csvData]\n        .map(row => row.map(field => `\"${field}\"`).join(','))\n        .join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = `historico-${format(new Date(), 'yyyy-MM-dd')}.csv`;\n      link.click();\n\n      toast({\n        title: \"Export realizado\",\n        description: \"Arquivo CSV foi baixado com sucesso.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro no export\",\n        description: \"Não foi possível gerar o CSV.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const clearFilters = () => {\n    setSelectedType('all');\n    setDateRange({ start: null, end: null });\n    setMinAmount(0);\n    setMaxAmount(10000);\n    setSortField('date');\n    setSortOrder('desc');\n    setCurrentPage(1);\n  };\n\n  // Set amount range helper\n  const setAmountRange = (min: number, max: number) => {\n    setMinAmount(min);\n    setMaxAmount(max);\n  };\n\n  return {\n    items: paginatedItems,\n    loading,\n    error,\n    totalItems,\n    totalPages,\n    currentPage,\n    itemsPerPage,\n    selectedType,\n    sortField,\n    sortOrder,\n    dateRange,\n    minAmount,\n    maxAmount,\n    monthlyData,\n    setSelectedType,\n    setSortField,\n    setSortOrder,\n    setDateRange,\n    setAmountRange,\n    setCurrentPage,\n    setItemsPerPage,\n    refresh,\n    exportToPDF,\n    exportToCSV,\n    clearFilters\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/integrations/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/integrations/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/activityLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[183,186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[183,186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2188,2191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2188,2191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\ninterface ActivityLogData {\n  action: string;\n  resource_type?: string;\n  resource_id?: string;\n  details?: Record<string, any>;\n}\n\nclass ActivityLogger {\n  private async getUserInfo() {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      return {\n        user_id: user?.id || null,\n        ip_address: await this.getClientIP(),\n        user_agent: navigator.userAgent,\n      };\n    } catch (error) {\n      console.error(\"Failed to get user info:\", error);\n      return {\n        user_id: null,\n        ip_address: \"unknown\",\n        user_agent: navigator.userAgent,\n      };\n    }\n  }\n\n  private async getClientIP(): Promise<string> {\n    try {\n      const response = await fetch(\"https://api.ipify.org?format=json\");\n      const data = await response.json();\n      return data.ip || \"unknown\";\n    } catch {\n      return \"unknown\";\n    }\n  }\n\n  async log(data: ActivityLogData) {\n    try {\n      const userInfo = await this.getUserInfo();\n      \n      // Log to console instead of edge function for now to avoid failures\n      console.log('📊 Activity Log:', {\n        ...data,\n        ...userInfo,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Optionally try edge function but don't fail if it doesn't work\n      try {\n        const { error } = await supabase.functions.invoke(\"log-activity\", {\n          body: {\n            ...data,\n            ...userInfo,\n            timestamp: new Date().toISOString(),\n          },\n        });\n\n        if (error) {\n          console.warn(\"Edge function not available for activity logging:\", error.message);\n        }\n      } catch (edgeError) {\n        console.warn(\"Edge function not available for activity logging\");\n      }\n    } catch (error) {\n      console.error(\"Activity logging error:\", error);\n    }\n  }\n\n  // Convenience methods for common actions\n  async logLogin() {\n    await this.log({\n      action: \"user_login\",\n      resource_type: \"auth\",\n    });\n  }\n\n  async logLogout() {\n    await this.log({\n      action: \"user_logout\",\n      resource_type: \"auth\",\n    });\n  }\n\n  async logPlanCreation(planId: string, planDetails: any) {\n    await this.log({\n      action: \"plan_created\",\n      resource_type: \"plan\",\n      resource_id: planId,\n      details: planDetails,\n    });\n  }\n\n  async logPayment(paymentId: string, amount: number, method: string) {\n    await this.log({\n      action: \"payment_processed\",\n      resource_type: \"payment\",\n      resource_id: paymentId,\n      details: { amount, method },\n    });\n  }\n\n  async logFileUpload(fileName: string, fileSize: number, fileType: string) {\n    await this.log({\n      action: \"file_uploaded\",\n      resource_type: \"file\",\n      details: { fileName, fileSize, fileType },\n    });\n  }\n\n  async logAdminAction(action: string, resourceType: string, resourceId?: string, details?: any) {\n    await this.log({\n      action: `admin_${action}`,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      details,\n    });\n  }\n\n  async logContemplation(planId: string, userId: string, approved: boolean) {\n    await this.log({\n      action: approved ? \"contemplation_approved\" : \"contemplation_rejected\",\n      resource_type: \"contemplation\",\n      resource_id: planId,\n      details: { userId, approved },\n    });\n  }\n\n  async logInfluencerRegistration(influencerId: string, referralCode: string) {\n    await this.log({\n      action: \"influencer_registered\",\n      resource_type: \"influencer\",\n      resource_id: influencerId,\n      details: { referralCode },\n    });\n  }\n\n  async logProfessionalService(serviceId: string, clientId: string, completed: boolean) {\n    await this.log({\n      action: completed ? \"service_completed\" : \"service_started\",\n      resource_type: \"service\",\n      resource_id: serviceId,\n      details: { clientId, completed },\n    });\n  }\n}\n\nexport const activityLogger = new ActivityLogger();","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/diagnostics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[234,237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[234,237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[739,742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[739,742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2486,2489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2486,2489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\nimport { errorLogger } from \"./errorLogger\";\nimport { activityLogger } from \"./activityLogger\";\n\ninterface DiagnosticData {\n  component: string;\n  action: string;\n  details?: any;\n  timestamp: string;\n}\n\nclass DiagnosticsManager {\n  private isDebugMode = true;\n\n  constructor() {\n    console.log(\"🔧 DIAGNOSTICS INITIALIZED - Debug Mode:\", this.isDebugMode);\n  }\n\n  log(component: string, action: string, details?: any) {\n    const timestamp = new Date().toISOString();\n    \n    if (this.isDebugMode) {\n      console.log(`🔍 [${component}] ${action}`, {\n        timestamp,\n        details,\n      });\n    }\n  }\n\n  async logError(component: string, error: Error | string, details?: any) {\n    const errorMessage = typeof error === 'string' ? error : error.message;\n    const timestamp = new Date().toISOString();\n    \n    console.error(`🔴 [${component}] ERROR: ${errorMessage}`, {\n      timestamp,\n      details,\n      stack: typeof error === 'object' ? error.stack : undefined,\n    });\n\n    if (typeof error === 'object') {\n      await errorLogger.logError(error);\n    } else {\n      await errorLogger.logCustomError(errorMessage, { component, details });\n    }\n  }\n\n  async testSupabaseConnection() {\n    try {\n      this.log(\"SUPABASE\", \"Testing connection...\");\n      \n      const { data, error } = await supabase.from(\"profiles\").select(\"count\", { count: \"exact\", head: true });\n      \n      if (error) {\n        await this.logError(\"SUPABASE\", `Connection failed: ${error.message}`, error);\n        return false;\n      }\n      \n      this.log(\"SUPABASE\", \"Connection successful\", { count: data });\n      return true;\n    } catch (error) {\n      await this.logError(\"SUPABASE\", error as Error);\n      return false;\n    }\n  }\n\n  async testTableAccess(tableName: string) {\n    try {\n      this.log(\"DATABASE\", `Testing table access: ${tableName}`);\n      \n      // Check if table name is valid - using actual table names from database\n      const validTables = [\n        \"profiles\", \n        \"products\", \n        \"plan_groups\", \n        \"credit_transactions\", \n        \"notification_triggers\",\n        \"user_credits\",\n        \"marketplace_sales\",\n        \"withdrawal_requests\"\n      ];\n      \n      if (!validTables.includes(tableName)) {\n        this.log(\"DATABASE\", `Table ${tableName} not in valid tables list`);\n        return false;\n      }\n      \n      const { data, error } = await supabase\n        .from(tableName as any)\n        .select(\"count\", { count: \"exact\", head: true });\n      \n      if (error) {\n        await this.logError(\"DATABASE\", `Table ${tableName} access failed: ${error.message}`, error);\n        return false;\n      }\n      \n      this.log(\"DATABASE\", `Table ${tableName} accessible`, { count: data });\n      return true;\n    } catch (error) {\n      await this.logError(\"DATABASE\", error as Error, { tableName });\n      return false;\n    }\n  }\n\n  async runDiagnostics() {\n    console.log(\"🚀 RUNNING COMPREHENSIVE DIAGNOSTICS...\");\n    \n    const results = {\n      supabaseConnection: false,\n      tableAccess: {} as Record<string, boolean>,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Test Supabase connection\n    results.supabaseConnection = await this.testSupabaseConnection();\n\n    // Test critical tables - using actual database table names\n    const criticalTables = [\"profiles\", \"products\", \"plan_groups\", \"credit_transactions\", \"user_credits\"];\n    \n    for (const table of criticalTables) {\n      results.tableAccess[table] = await this.testTableAccess(table);\n    }\n\n    console.log(\"📊 DIAGNOSTICS COMPLETE:\", results);\n    \n    await activityLogger.log({\n      action: \"diagnostics_run\",\n      resource_type: \"system\",\n      details: results,\n    });\n\n    return results;\n  }\n\n  enableDebugMode() {\n    this.isDebugMode = true;\n    console.log(\"🔧 DEBUG MODE ENABLED\");\n  }\n\n  disableDebugMode() {\n    this.isDebugMode = false;\n    console.log(\"🔧 DEBUG MODE DISABLED\");\n  }\n}\n\nexport const diagnostics = new DiagnosticsManager();\n\n// Auto-run diagnostics on app load\nif (typeof window !== 'undefined') {\n  window.addEventListener('load', () => {\n    setTimeout(() => {\n      diagnostics.runDiagnostics();\n    }, 2000);\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/errorLogger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1828,1831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1828,1831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\ninterface ErrorLogData {\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  errorId: string;\n  timestamp: string;\n  userAgent: string;\n  url: string;\n}\n\nclass ErrorLogger {\n  private async logToSupabase(data: ErrorLogData) {\n    try {\n      // Log to console for immediate visibility\n      console.log('🔴 Error logged:', data);\n      \n      // Try edge function but don't fail if it's not available\n      try {\n        const { error } = await supabase.functions.invoke(\"log-error\", {\n          body: data,\n        });\n        \n        if (error) {\n          console.warn(\"Edge function not available for error logging:\", error.message);\n        }\n      } catch (edgeError) {\n        console.warn(\"Edge function not available for error logging\");\n      }\n    } catch (error) {\n      console.error(\"Error logging to Supabase:\", error);\n    }\n  }\n\n  private generateErrorId(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  }\n\n  async logError(error: Error, componentStack?: string) {\n    const errorId = this.generateErrorId();\n    const timestamp = new Date().toISOString();\n    \n    const errorData: ErrorLogData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack,\n      errorId,\n      timestamp,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    // Log to console immediately\n    console.error(\"🔴 APPLICATION ERROR:\", {\n      errorId,\n      message: error.message,\n      url: window.location.href,\n      timestamp,\n      stack: error.stack,\n      componentStack,\n    });\n\n    // Log to Supabase asynchronously\n    this.logToSupabase(errorData);\n\n    return errorId;\n  }\n\n  async logCustomError(message: string, details?: any) {\n    const errorId = this.generateErrorId();\n    const timestamp = new Date().toISOString();\n    \n    const errorData: ErrorLogData = {\n      message,\n      stack: JSON.stringify(details, null, 2),\n      errorId,\n      timestamp,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    console.error(\"🔴 CUSTOM ERROR:\", {\n      errorId,\n      message,\n      details,\n      url: window.location.href,\n      timestamp,\n    });\n\n    this.logToSupabase(errorData);\n    return errorId;\n  }\n}\n\nexport const errorLogger = new ErrorLogger();","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[394,397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[394,397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1733,1736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1733,1736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1994,1997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1994,1997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2584,2587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2584,2587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2859,2862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2859,2862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3356,3359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3356,3359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4830,4833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4830,4833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4844,4847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4844,4847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5350,5353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5350,5353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\ninterface LogError {\n  error_id: string;\n  message: string;\n  stack?: string;\n  component_stack?: string;\n  timestamp?: Date;\n  user_agent?: string;\n  url?: string;\n  client_ip?: string;\n  user_id?: string;\n}\n\ninterface ActivityLog {\n  user_id?: string;\n  action: string;\n  resource_type?: string;\n  resource_id?: string;\n  details?: any;\n  ip_address?: string;\n  user_agent?: string;\n}\n\ninterface PerformanceMetric {\n  metric_name: string;\n  metric_value: number;\n  details?: any;\n}\n\nclass Logger {\n  private getUserId(): string | null {\n    try {\n      const user = supabase.auth.getUser();\n      return user ? 'current_user' : null;\n    } catch {\n      return null;\n    }\n  }\n\n  private getClientInfo() {\n    return {\n      user_agent: navigator.userAgent,\n      url: window.location.href,\n      timestamp: new Date()\n    };\n  }\n\n  async logError(error: Error, component?: string, additionalData?: any): Promise<void> {\n    try {\n      const clientInfo = this.getClientInfo();\n      const errorData: LogError = {\n        error_id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        message: error.message,\n        stack: error.stack,\n        component_stack: component,\n        user_id: this.getUserId(),\n        user_agent: clientInfo.user_agent,\n        url: clientInfo.url,\n        timestamp: clientInfo.timestamp\n      };\n\n      console.error('🔍 DIAGNOSTIC ERROR LOG:', errorData);\n\n      const { error: dbError } = await supabase\n        .from('notification_triggers')\n        .insert({\n          user_id: null,\n          event_type: 'error_log',\n          title: 'System Error',\n          message: errorData.message,\n          data: errorData as any\n        });\n\n      if (dbError) {\n        console.error('Failed to log error to database:', dbError);\n      }\n    } catch (logError) {\n      console.error('Critical: Failed to log error:', logError);\n    }\n  }\n\n  async logActivity(action: string, details?: any): Promise<void> {\n    try {\n      const clientInfo = this.getClientInfo();\n      const activityData: ActivityLog = {\n        user_id: this.getUserId(),\n        action,\n        details,\n        ip_address: 'client',\n        user_agent: clientInfo.user_agent\n      };\n\n      console.log('🔍 DIAGNOSTIC ACTIVITY LOG:', activityData);\n\n      const { error } = await supabase\n        .from('notification_triggers')\n        .insert({\n          user_id: null,\n          event_type: 'activity_log',\n          title: 'System Activity',\n          message: action,\n          data: activityData as any\n        });\n\n      if (error) {\n        console.error('Failed to log activity to database:', error);\n      }\n    } catch (logError) {\n      console.error('Failed to log activity:', logError);\n    }\n  }\n\n  async logPerformance(metricName: string, value: number, details?: any): Promise<void> {\n    try {\n      const metricData: PerformanceMetric = {\n        metric_name: metricName,\n        metric_value: value,\n        details\n      };\n\n      console.log('🔍 DIAGNOSTIC PERFORMANCE LOG:', metricData);\n\n      const { error } = await supabase\n        .from('notification_triggers')\n        .insert({\n          user_id: null,\n          event_type: 'performance_metric',\n          title: 'Performance Metric',\n          message: metricName,\n          data: metricData as any\n        });\n\n      if (error) {\n        console.error('Failed to log performance metric to database:', error);\n      }\n    } catch (logError) {\n      console.error('Failed to log performance metric:', logError);\n    }\n  }\n\n  // Método específico para diagnosticar conexão com Supabase\n  async testSupabaseConnection(): Promise<boolean> {\n    try {\n      console.log('🔍 TESTING SUPABASE CONNECTION...');\n      \n      const startTime = performance.now();\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('count(*)')\n        .limit(1);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      if (error) {\n        console.error('🔍 SUPABASE CONNECTION FAILED:', error);\n        await this.logError(new Error(`Supabase connection failed: ${error.message}`), 'SupabaseTest');\n        return false;\n      }\n\n      console.log('🔍 SUPABASE CONNECTION SUCCESS:', data);\n      console.log('🔍 SUPABASE RESPONSE TIME:', `${duration.toFixed(2)}ms`);\n      \n      await this.logPerformance('supabase_connection_test', duration, { \n        success: true, \n        response: data \n      });\n      \n      return true;\n    } catch (error) {\n      console.error('🔍 SUPABASE CONNECTION CRITICAL ERROR:', error);\n      await this.logError(error as Error, 'SupabaseConnectionTest');\n      return false;\n    }\n  }\n\n  // Método para diagnosticar queries específicas\n  async testQuery(tableName: string, query: any): Promise<any> {\n    try {\n      console.log(`🔍 TESTING QUERY ON ${tableName}:`, query);\n      \n      // Check if table name is valid\n      const validTables = [\"users\", \"products\", \"professionals\", \"groups\", \"transactions\", \"activity_logs\", \"error_logs\", \"performance_metrics\"];\n      \n      if (!validTables.includes(tableName)) {\n        throw new Error(`Invalid table name: ${tableName}`);\n      }\n      \n      const startTime = performance.now();\n      const result = await supabase\n        .from(tableName as any)\n        .select(query);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      console.log(`🔍 QUERY RESULT FOR ${tableName}:`, result);\n      console.log(`🔍 QUERY DURATION:`, `${duration.toFixed(2)}ms`);\n\n      await this.logPerformance(`query_${tableName}`, duration, {\n        query,\n        success: !result.error,\n        error: result.error?.message,\n        count: result.data?.length\n      });\n\n      return result;\n    } catch (error) {\n      console.error(`🔍 QUERY ERROR ON ${tableName}:`, error);\n      await this.logError(error as Error, `Query_${tableName}`);\n      throw error;\n    }\n  }\n}\n\nexport const logger = new Logger();\n\n// Capturar erros globais\nwindow.addEventListener('error', (event) => {\n  logger.logError(new Error(event.message), 'GlobalErrorHandler', {\n    filename: event.filename,\n    lineno: event.lineno,\n    colno: event.colno\n  });\n});\n\nwindow.addEventListener('unhandledrejection', (event) => {\n  logger.logError(new Error(event.reason), 'UnhandledPromiseRejection');\n});\n\nexport default logger;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/planUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3062,3065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3062,3065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3430,3433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3430,3433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nexport interface ActivePlan {\n  id: string;\n  status: string;\n  group_id: string;\n  amount_paid: number;\n  joined_at: string;\n  group_status?: string;\n  service_name?: string;\n}\n\n/**\n * Verifica se o usuário possui algum plano ativo usando a nova estrutura\n * Um plano é considerado ativo se:\n * - Usuário tem participação ativa em um grupo\n * - O grupo está em formação ou completo (não cancelado)\n */\nexport const checkUserActivePlan = async (userId: string): Promise<{\n  hasActivePlan: boolean;\n  activePlans: ActivePlan[];\n  error?: string;\n}> => {\n  try {\n    console.log('🔍 Verificando planos ativos para usuário:', userId);\n\n    // Usar a função do banco para verificar se tem plano ativo\n    const { data: hasActivePlan, error: checkError } = await supabase\n      .rpc('user_has_active_plan', { user_uuid: userId });\n\n    if (checkError) {\n      console.error('❌ Erro ao verificar planos:', checkError);\n      return {\n        hasActivePlan: false,\n        activePlans: [],\n        error: checkError.message\n      };\n    }\n\n    // Se não tem plano ativo, retornar vazio\n    if (!hasActivePlan) {\n      console.log('📭 Nenhum plano ativo encontrado');\n      return {\n        hasActivePlan: false,\n        activePlans: []\n      };\n    }\n\n      // Buscar detalhes das participações ativas\n      const { data: participations, error: participationError } = await supabase\n        .from('group_participants')\n        .select(`\n          id,\n          status,\n          group_id,\n          amount_paid,\n          joined_at,\n          plan_groups!inner(\n            id,\n            status,\n            service_id,\n            referral_code,\n            current_participants,\n            max_participants\n          )\n        `)\n        .eq('user_id', userId)\n        .eq('status', 'active')\n        .in('plan_groups.status', ['forming', 'complete']);\n\n      if (participationError) {\n        console.error('❌ Erro ao buscar detalhes das participações:', participationError);\n        return {\n          hasActivePlan: true,\n          activePlans: [],\n          error: participationError.message\n        };\n      }\n\n      // Para cada participação, buscar o nome do serviço\n      const activePlans: ActivePlan[] = await Promise.all(\n        (participations || []).map(async (p) => {\n          const { data: planData } = await supabase\n            .from('custom_plans')\n            .select('name')\n            .eq('id', p.plan_groups?.service_id)\n            .single();\n\n          return {\n            id: p.id,\n            status: p.status,\n            group_id: p.group_id,\n            amount_paid: p.amount_paid,\n            joined_at: p.joined_at,\n            group_status: p.plan_groups?.status,\n            service_name: planData?.name || 'Serviço não definido'\n          };\n        })\n      );\n\n    console.log('✅ Verificação concluída:', {\n      hasActivePlan: true,\n      totalPlans: activePlans.length\n    });\n\n    return {\n      hasActivePlan: true,\n      activePlans\n    };\n\n  } catch (error: any) {\n    console.error('❌ Erro inesperado ao verificar planos:', error);\n    return {\n      hasActivePlan: false,\n      activePlans: [],\n      error: error.message\n    };\n  }\n};\n\n/**\n * Redireciona o usuário baseado no status do plano\n */\nexport const redirectBasedOnPlanStatus = (\n  hasActivePlan: boolean, \n  userRole: string,\n  navigate: (path: string, options?: any) => void\n) => {\n  if (userRole !== 'user') {\n    // Outros tipos de usuário seguem fluxo normal\n    const dashboardRoute = userRole === 'admin' ? '/admin/dashboard' :\n                          userRole === 'professional' ? '/profissional/dashboard' :\n                          userRole === 'influencer' ? '/influenciador/dashboard' :\n                          '/usuario/dashboard';\n    \n    navigate(dashboardRoute, { replace: true });\n    return;\n  }\n\n  // Para usuários comuns, verificar plano ativo\n  if (hasActivePlan) {\n    console.log('✅ Usuário tem plano ativo, redirecionando para dashboard');\n    navigate('/usuario/dashboard', { replace: true });\n  } else {\n    console.log('⚠️ Usuário sem plano ativo, redirecionando para seleção de planos');\n    navigate('/plans', { replace: true });\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/storage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1500,1503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1500,1503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2961,2964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2961,2964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4361,4364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4361,4364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/integrations/supabase/client';\n\nexport interface UploadResult {\n  url: string;\n  path: string;\n  error?: string;\n}\n\nclass StorageService {\n  // Upload document (PDF, images)\n  async uploadDocument(file: File, userId: string): Promise<UploadResult> {\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `${userId}/${fileName}`;\n\n      // Validate file type\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];\n      if (!allowedTypes.includes(file.type)) {\n        return { url: '', path: '', error: 'Tipo de arquivo não permitido. Use JPG, PNG ou PDF.' };\n      }\n\n      // Validate file size (5MB max)\n      if (file.size > 5 * 1024 * 1024) {\n        return { url: '', path: '', error: 'Arquivo muito grande. Máximo 5MB.' };\n      }\n\n      const { data, error } = await supabase.storage\n        .from('documents')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        console.error('Upload error:', error);\n        return { url: '', path: '', error: error.message };\n      }\n\n      // Get public URL\n      const { data: urlData } = supabase.storage\n        .from('documents')\n        .getPublicUrl(filePath);\n\n      return {\n        url: urlData.publicUrl,\n        path: filePath,\n        error: undefined\n      };\n    } catch (error: any) {\n      console.error('Upload service error:', error);\n      return { url: '', path: '', error: 'Erro no upload. Tente novamente.' };\n    }\n  }\n\n  // Upload video\n  async uploadVideo(file: File, userId: string): Promise<UploadResult> {\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `${userId}/${fileName}`;\n\n      // Validate file type\n      const allowedTypes = ['video/mp4', 'video/mov', 'video/avi', 'video/quicktime'];\n      if (!allowedTypes.includes(file.type)) {\n        return { url: '', path: '', error: 'Tipo de vídeo não permitido. Use MP4, MOV ou AVI.' };\n      }\n\n      // Validate file size (50MB max)\n      if (file.size > 50 * 1024 * 1024) {\n        return { url: '', path: '', error: 'Vídeo muito grande. Máximo 50MB.' };\n      }\n\n      const { data, error } = await supabase.storage\n        .from('videos')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        console.error('Video upload error:', error);\n        return { url: '', path: '', error: error.message };\n      }\n\n      // Get public URL\n      const { data: urlData } = supabase.storage\n        .from('videos')\n        .getPublicUrl(filePath);\n\n      return {\n        url: urlData.publicUrl,\n        path: filePath,\n        error: undefined\n      };\n    } catch (error: any) {\n      console.error('Video upload service error:', error);\n      return { url: '', path: '', error: 'Erro no upload do vídeo. Tente novamente.' };\n    }\n  }\n\n  // Upload avatar\n  async uploadAvatar(file: File): Promise<UploadResult> {\n    try {\n      const fileExt = file.name.split('.').pop();\n      const fileName = `avatar-${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n\n      // Validate file type\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];\n      if (!allowedTypes.includes(file.type)) {\n        return { url: '', path: '', error: 'Tipo de imagem não permitido. Use JPG ou PNG.' };\n      }\n\n      // Validate file size (2MB max)\n      if (file.size > 2 * 1024 * 1024) {\n        return { url: '', path: '', error: 'Imagem muito grande. Máximo 2MB.' };\n      }\n\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .upload(fileName, file, {\n          cacheControl: '3600',\n          upsert: false\n        });\n\n      if (error) {\n        console.error('Avatar upload error:', error);\n        return { url: '', path: '', error: error.message };\n      }\n\n      // Get public URL\n      const { data: urlData } = supabase.storage\n        .from('avatars')\n        .getPublicUrl(fileName);\n\n      return {\n        url: urlData.publicUrl,\n        path: fileName,\n        error: undefined\n      };\n    } catch (error: any) {\n      console.error('Avatar upload service error:', error);\n      return { url: '', path: '', error: 'Erro no upload da imagem. Tente novamente.' };\n    }\n  }\n\n  // Delete file\n  async deleteFile(bucket: string, path: string): Promise<boolean> {\n    try {\n      const { error } = await supabase.storage\n        .from(bucket)\n        .remove([path]);\n\n      if (error) {\n        console.error('Delete error:', error);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Delete service error:', error);\n      return false;\n    }\n  }\n\n  // Get file URL\n  getFileUrl(bucket: string, path: string): string {\n    const { data } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path);\n\n    return data.publicUrl;\n  }\n}\n\nexport const storageService = new StorageService();","usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/lib/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/AdminLogin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1433,1436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1433,1436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Loader2, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { ROUTES } from \"@/lib/routes\";\n\nconst AdminLogin = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { adminLogin, loading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (!email || !password) {\n      setError(\"Por favor, preencha email e senha\");\n      return;\n    }\n\n    try {\n      const { error } = await adminLogin(email, password);\n\n      if (error) {\n        throw error;\n      }\n\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Redirecionando para o painel administrativo...\",\n      });\n\n      console.log('✅ Admin login successful, navigation will be handled by AuthContext');\n      \n    } catch (error: any) {\n      console.error(\"❌ Admin login error:\", error);\n      setError(error.message || \"Erro ao fazer login. Verifique suas credenciais.\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md bg-card border-primary/20\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Shield className=\"h-12 w-12 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-foreground\">Admin Login</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">\n            Acesso restrito ao painel administrativo\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Administrativo</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"admin@amigodopeito.com\"\n                required\n                disabled={loading}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Digite sua senha\"\n                required\n                disabled={loading}\n              />\n            </div>\n            \n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Autenticando...\n                </>\n              ) : (\n                \"Entrar\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => navigate(\"/\")}\n              className=\"text-sm text-muted-foreground hover:text-primary\"\n            >\n              ← Voltar ao site\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AdminLogin;\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Auth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Confirmation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/CreateAdmin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/CreateAdmins.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/EmailConfirmationHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/InfluencerLogin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1459,1462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1459,1462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n// Google OAuth removido - sistema simplificado\n\nconst InfluencerLogin = () => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      const result = await login(formData.email, formData.password, \"influencer\");\n      \n      if (result.error) {\n        toast({\n          title: \"Erro no login\",\n          description: result.error.message || \"Credenciais inválidas\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: \"Bem-vindo ao dashboard de influenciador.\",\n        });\n        // Redirection will be handled automatically by AuthContext\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro no login\",\n        description: error.message || \"Credenciais inválidas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-ap-light-orange to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-center\">Login de Influenciador</CardTitle>\n                <p className=\"text-center text-gray-600\">\n                  Acesse sua conta para gerenciar suas comissões\n                </p>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"email\">E-mail</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\">Senha</Label>\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-ap-light-blue hover:bg-ap-light-blue/90\"\n                    disabled={loading}\n                  >\n                    {loading ? \"Entrando...\" : \"Entrar\"}\n                  </Button>\n                  \n                  {/* Google OAuth removido - sistema simplificado */}\n                </form>\n\n                <div className=\"mt-6 text-center space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    Não tem uma conta?{\" \"}\n                    <Link to=\"/influenciador/cadastro\" className=\"text-ap-light-blue hover:underline\">\n                      Cadastre-se\n                    </Link>\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <Link to=\"/esqueci-senha\" className=\"text-ap-light-blue hover:underline\">\n                      Esqueci minha senha\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default InfluencerLogin;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/InfluencerRegister.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3714,3717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3714,3717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\nconst InfluencerRegister = () => {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    instagram: \"\",\n    followers: \"\",\n    niche: \"\",\n    description: \"\",\n    termsAccepted: false,\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { register } = useAuth();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const target = e.target as HTMLInputElement;\n    const { name, value, type, checked } = target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  const handleSelectChange = (name: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validações\n    if (!formData.fullName || !formData.email || !formData.password || \n        !formData.phone || !formData.instagram || !formData.followers || !formData.niche) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Senhas não coincidem\",\n        description: \"As senhas digitadas não são iguais.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Senha muito curta\",\n        description: \"A senha deve ter pelo menos 6 caracteres.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validar Instagram handle\n    const instagramHandle = formData.instagram.replace('@', '');\n    if (instagramHandle.length < 3) {\n      toast({\n        title: \"Instagram inválido\",\n        description: \"O nome do Instagram deve ter pelo menos 3 caracteres.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.termsAccepted) {\n      toast({\n        title: \"Termos não aceitos\",\n        description: \"Você precisa aceitar os termos e condições para continuar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const userData = {\n        full_name: formData.fullName,\n        email: formData.email,\n        phone: formData.phone,\n        instagram: instagramHandle,\n        followers_count: formData.followers,\n        niche: formData.niche,\n        description: formData.description,\n        approved: false\n      };\n\n      await register(formData.email, formData.password, userData, \"influencer\");\n      \n      toast({\n        title: \"Cadastro enviado com sucesso!\",\n        description: \"Sua conta será analisada. Aguarde aprovação por email.\",\n      });\n      \n      // Redirect to confirmation page instead of login\n      navigate(\"/confirmacao\");\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Erro ao realizar cadastro. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-ap-light-blue/20 to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-center text-ap-light-blue\">\n                  Cadastro de Influenciador\n                </CardTitle>\n                <CardDescription className=\"text-center\">\n                  Faça parte da nossa rede e ganhe comissões indicando nossos serviços\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Informações Pessoais */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 border-b pb-2\">\n                      Informações Pessoais\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"fullName\">Nome Completo *</Label>\n                        <Input\n                          id=\"fullName\"\n                          name=\"fullName\"\n                          value={formData.fullName}\n                          onChange={handleChange}\n                          placeholder=\"Seu nome completo\"\n                          required\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"email\">E-mail *</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          value={formData.email}\n                          onChange={handleChange}\n                          placeholder=\"seu@email.com\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"password\">Senha *</Label>\n                        <Input\n                          id=\"password\"\n                          name=\"password\"\n                          type=\"password\"\n                          value={formData.password}\n                          onChange={handleChange}\n                          placeholder=\"Mínimo 6 caracteres\"\n                          required\n                        />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"confirmPassword\">Confirmar Senha *</Label>\n                        <Input\n                          id=\"confirmPassword\"\n                          name=\"confirmPassword\"\n                          type=\"password\"\n                          value={formData.confirmPassword}\n                          onChange={handleChange}\n                          placeholder=\"Digite a senha novamente\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"phone\">Telefone *</Label>\n                      <Input\n                        id=\"phone\"\n                        name=\"phone\"\n                        value={formData.phone}\n                        onChange={handleChange}\n                        placeholder=\"(XX) XXXXX-XXXX\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  {/* Informações de Rede Social */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 border-b pb-2\">\n                      Perfil nas Redes Sociais\n                    </h3>\n                    \n                    <div>\n                      <Label htmlFor=\"instagram\">Instagram *</Label>\n                      <div className=\"flex\">\n                        <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500\">\n                          @\n                        </span>\n                        <Input\n                          id=\"instagram\"\n                          name=\"instagram\"\n                          value={formData.instagram}\n                          onChange={handleChange}\n                          placeholder=\"seu_perfil\"\n                          className=\"rounded-l-none\"\n                          required\n                        />\n                      </div>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Digite apenas o nome do usuário, sem o @\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"followers\">Número de Seguidores *</Label>\n                      <Select onValueChange={(value) => handleSelectChange('followers', value)}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione a faixa de seguidores\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1k-5k\">1.000 - 5.000</SelectItem>\n                          <SelectItem value=\"5k-10k\">5.000 - 10.000</SelectItem>\n                          <SelectItem value=\"10k-25k\">10.000 - 25.000</SelectItem>\n                          <SelectItem value=\"25k-50k\">25.000 - 50.000</SelectItem>\n                          <SelectItem value=\"50k-100k\">50.000 - 100.000</SelectItem>\n                          <SelectItem value=\"100k-500k\">100.000 - 500.000</SelectItem>\n                          <SelectItem value=\"500k+\">500.000+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"niche\">Nicho de Conteúdo *</Label>\n                      <Select onValueChange={(value) => handleSelectChange('niche', value)}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Selecione seu nicho principal\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"beleza\">Beleza e Estética</SelectItem>\n                          <SelectItem value=\"fitness\">Fitness e Saúde</SelectItem>\n                          <SelectItem value=\"lifestyle\">Lifestyle</SelectItem>\n                          <SelectItem value=\"moda\">Moda</SelectItem>\n                          <SelectItem value=\"tatuagem\">Tatuagem e Arte Corporal</SelectItem>\n                          <SelectItem value=\"saude\">Saúde e Bem-estar</SelectItem>\n                          <SelectItem value=\"outros\">Outros</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  {/* Descrição */}\n                  <div>\n                    <Label htmlFor=\"description\">Conte um pouco sobre você e seu conteúdo</Label>\n                    <Textarea\n                      id=\"description\"\n                      name=\"description\"\n                      value={formData.description}\n                      onChange={handleChange}\n                      placeholder=\"Descreva seu perfil, tipo de conteúdo, engajamento, etc. Isso nos ajudará a entender melhor seu perfil...\"\n                      rows={4}\n                    />\n                  </div>\n\n                  {/* Termos */}\n                  <div className=\"flex items-start space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"termsAccepted\"\n                      name=\"termsAccepted\"\n                      checked={formData.termsAccepted}\n                      onChange={handleChange}\n                      className=\"mt-1\"\n                      required\n                    />\n                    <Label htmlFor=\"termsAccepted\" className=\"text-sm leading-relaxed\">\n                      Eu aceito os{\" \"}\n                      <Link to=\"/termos\" className=\"text-ap-light-blue hover:underline\">\n                        termos e condições\n                      </Link>{\" \"}\n                      da plataforma e concordo em promover apenas conteúdo autêntico e \n                      seguir as diretrizes de marketing. *\n                    </Label>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-ap-light-blue hover:bg-ap-light-blue/90\"\n                    disabled={loading}\n                  >\n                    {loading ? \"Enviando cadastro...\" : \"Enviar Cadastro para Análise\"}\n                  </Button>\n                </form>\n\n                <div className=\"mt-6 text-center\">\n                  <p className=\"text-sm text-gray-600\">\n                    Já tem uma conta?{\" \"}\n                    <Link to=\"/influenciador/login\" className=\"text-ap-light-blue hover:underline\">\n                      Faça login\n                    </Link>\n                  </p>\n                </div>\n\n                {/* Informações sobre o processo */}\n                <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-800 mb-2\">📋 Processo de Aprovação</h4>\n                  <ul className=\"text-sm text-blue-700 space-y-1\">\n                    <li>• Analisamos seu perfil e engajamento</li>\n                    <li>• Verificamos a autenticidade da conta</li>\n                    <li>• Aprovação em até 3 dias úteis</li>\n                    <li>• Você receberá um email com o resultado</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default InfluencerRegister;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/MLMCancel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/MLMDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserData'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserData]","fix":{"range":[1083,1085],"text":"[loadUserData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Users, \n  Crown, \n  Link2, \n  CheckCircle, \n  Clock, \n  Copy, \n  Share,\n  TrendingUp,\n  Gift,\n  Target\n} from \"lucide-react\";\n\ninterface Purchase {\n  id: string;\n  status: string;\n  is_contemplated: boolean;\n  amount_paid: number;\n  created_at: string;\n  product?: { name: string };\n}\n\nexport default function MLMDashboard() {\n  const [purchases, setPurchases] = useState<Purchase[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadUserData();\n  }, []);\n\n  const loadUserData = async () => {\n    try {\n      const { data: session } = await supabase.auth.getSession();\n      if (!session.session?.user) {\n        throw new Error(\"Usuário não autenticado\");\n      }\n\n      // Use credit_transactions instead of transactions\n      const { data: purchasesData, error: purchasesError } = await supabase\n        .from(\"credit_transactions\")\n        .select(\"*\")\n        .eq(\"user_id\", session.session.user.id)\n        .order(\"created_at\", { ascending: false });\n\n      if (purchasesData) {\n        const formattedPurchases = purchasesData.map((transaction) => ({\n          id: transaction.id,\n          product: { name: transaction.description || 'Produto' },\n          status: transaction.status || 'completed',\n          is_contemplated: transaction.status === 'completed',\n          amount_paid: transaction.amount,\n          created_at: transaction.created_at\n        }));\n        setPurchases(formattedPurchases);\n      }\n\n    } catch (error) {\n      console.error(\"Erro ao carregar dados:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível carregar seus dados\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Carregando seu dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (purchases.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <Target className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Bem-vindo ao MLM Dashboard</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            Você ainda não possui nenhuma compra. Que tal escolher um plano?\n          </p>\n          <Button onClick={() => window.location.href = '/mlm/products'}>\n            Ver Produtos Disponíveis\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Meu Dashboard MLM</h1>\n        <p className=\"text-muted-foreground\">\n          Acompanhe o progresso dos seus grupos e suas contemplações\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total de Compras</p>\n                <p className=\"text-2xl font-bold\">{purchases.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <Crown className=\"w-5 h-5 text-yellow-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Contemplações</p>\n                <p className=\"text-2xl font-bold\">\n                  {purchases.filter(p => p.is_contemplated).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Investido</p>\n                <p className=\"text-2xl font-bold\">\n                  {formatCurrency(purchases.reduce((sum, p) => sum + p.amount_paid, 0))}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"space-y-6\">\n        {purchases.map((purchase) => (\n          <Card key={purchase.id} className=\"overflow-hidden\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {purchase.product?.name}\n                    {purchase.is_contemplated ? (\n                      <Badge className=\"bg-green-500\">\n                        <Crown className=\"w-3 h-3 mr-1\" />Contemplado\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">\n                        <Clock className=\"w-3 h-3 mr-1\" />Em andamento\n                      </Badge>\n                    )}\n                  </CardTitle>\n                  <CardDescription>\n                    Criado em {new Date(purchase.created_at).toLocaleDateString('pt-BR')}\n                  </CardDescription>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-muted-foreground\">Valor pago</p>\n                  <p className=\"text-lg font-bold\">{formatCurrency(purchase.amount_paid)}</p>\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent>\n              {purchase.is_contemplated ? (\n                <Alert className=\"border-green-200 bg-green-50\">\n                  <Crown className=\"w-4 h-4 text-green-600\" />\n                  <AlertDescription className=\"text-green-800\">\n                    <strong>Parabéns! Você foi contemplado!</strong>\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <div className=\"text-muted-foreground\">\n                  Status: {purchase.status}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/MLMProducts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1132,1135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1132,1135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProducts'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadProducts, searchParams]","fix":{"range":[1458,1472],"text":"[loadProducts, searchParams]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Palette, Smile, Users, Crown, Zap, QrCode, Copy, ArrowLeft } from \"lucide-react\";\n\ninterface Product {\n  id: string;\n  name: string;\n  full_value: number;\n  entry_value: number;\n  product_code: string;\n  category: string;\n  stripe_product_id: string;\n  stripe_price_id: string;\n}\n\nexport default function MLMProducts() {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [purchasing, setPurchasing] = useState<string | null>(null);\n  const [referralCode, setReferralCode] = useState(\"\");\n  const [pixPaymentData, setPixPaymentData] = useState<any>(null);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Pegar código de indicação da URL se existir\n    const refCode = searchParams.get('ref');\n    if (refCode) {\n      setReferralCode(refCode);\n    }\n    \n    loadProducts();\n  }, [searchParams]);\n\n  const loadProducts = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"products\")\n        .select(\"*\")\n        .order(\"price\");\n\n      if (error) throw error;\n      \n      const formattedProducts = (data || []).map(service => ({\n        id: service.id,\n        product_code: `SRV-${service.id.slice(-4)}`,\n        name: service.name,\n        full_value: service.price,\n        entry_value: service.price * 0.1,\n        category: service.category,\n        stripe_product_id: `prod_${service.id}`,\n        stripe_price_id: `price_${service.id}`\n      }));\n      \n      setProducts(formattedProducts);\n    } catch (error) {\n      console.error(\"Erro ao carregar produtos:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível carregar os produtos\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchase = async (productCode: string) => {\n    try {\n      setPurchasing(productCode);\n\n      const { data: session } = await supabase.auth.getSession();\n      if (!session.session) {\n        toast({\n          title: \"Login necessário\",\n          description: \"Você precisa estar logado para fazer uma compra\",\n          variant: \"destructive\",\n        });\n        navigate(\"/user-login\");\n        return;\n      }\n\n      const { data, error } = await supabase.functions.invoke(\"create-pix-payment\", {\n        body: {\n          product_code: productCode,\n          referral_code: referralCode || undefined,\n          user_id: session.session.user.id\n        },\n        headers: {\n          Authorization: `Bearer ${session.session.access_token}`,\n        },\n      });\n\n      if (error) throw error;\n\n      if (data?.success) {\n        // Mostrar dados do PIX\n        setPixPaymentData(data);\n      } else {\n        throw new Error(data?.error || \"Erro ao processar compra\");\n      }\n\n    } catch (error) {\n      console.error(\"Erro na compra:\", error);\n      toast({\n        title: \"Erro na compra\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setPurchasing(null);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value / 100);\n  };\n\n  const getCategoryIcon = (category: string) => {\n    return category === 'tattoo' ? <Palette className=\"w-6 h-6\" /> : <Smile className=\"w-6 h-6\" />;\n  };\n\n  const getCategoryColor = (category: string) => {\n    return category === 'tattoo' ? 'bg-purple-500' : 'bg-blue-500';\n  };\n\n  const copyPixCode = async () => {\n    if (pixPaymentData?.pix_copy_paste) {\n      await navigator.clipboard.writeText(pixPaymentData.pix_copy_paste);\n      toast({\n        title: \"Código PIX copiado!\",\n        description: \"Cole no seu app bancário para pagar\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Carregando produtos...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show PIX payment screen\n  if (pixPaymentData) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setPixPaymentData(null)}\n          className=\"mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Voltar aos produtos\n        </Button>\n\n        <Card>\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl text-green-600\">PIX Gerado com Sucesso!</CardTitle>\n            <CardDescription>\n              Escaneie o QR Code ou copie o código para pagar\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"text-center\">\n              <Badge variant=\"outline\" className=\"text-lg px-4 py-2 mb-4\">\n                R$ {pixPaymentData.amount?.toFixed(2)}\n              </Badge>\n            </div>\n\n            {pixPaymentData.pix_qr_code && (\n              <div className=\"text-center\">\n                <img \n                  src={pixPaymentData.pix_qr_code} \n                  alt=\"QR Code PIX\" \n                  className=\"mx-auto border rounded-lg shadow-lg max-w-xs\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Abra seu app bancário e escaneie o QR Code\n                </p>\n              </div>\n            )}\n\n            {pixPaymentData.pix_copy_paste && (\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Código PIX (Copiar e Colar):</Label>\n                <div className=\"flex gap-2\">\n                  <code className=\"flex-1 p-3 bg-muted rounded text-xs break-all border\">\n                    {pixPaymentData.pix_copy_paste}\n                  </code>\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={copyPixCode}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            <div className=\"bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400\">\n              <h4 className=\"font-semibold text-blue-800 mb-2\">Como pagar:</h4>\n              <ol className=\"text-sm text-blue-700 space-y-1\">\n                <li>1. Abra o app do seu banco</li>\n                <li>2. Vá em PIX → Pagar</li>\n                <li>3. Escaneie o QR Code ou cole o código</li>\n                <li>4. Confirme o pagamento</li>\n                <li>5. Aguarde a confirmação automática</li>\n              </ol>\n            </div>\n\n            <div className=\"bg-green-50 p-4 rounded-lg border-l-4 border-green-400\">\n              <p className=\"text-sm text-green-700\">\n                <strong>✅ Confirmação automática:</strong> Assim que o pagamento for confirmado, \n                você será automaticamente adicionado ao grupo e receberá seu link de indicação!\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4\">Escolha seu Plano</h1>\n        <p className=\"text-xl text-muted-foreground mb-6\">\n          Pague apenas 10% de entrada e monte seu grupo de 9 indicações para ser contemplado!\n        </p>\n        \n        {/* Como funciona */}\n        <Card className=\"max-w-4xl mx-auto mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-6 h-6 text-primary\" />\n              Como funciona o sistema\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-2xl font-bold text-primary\">1</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Pague a Entrada</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Você paga apenas 10% do valor total do serviço\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-2xl font-bold text-primary\">2</span>\n                </div>\n                <h3 className=\"font-semibold mb-2\">Indique 9 Pessoas</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Use seu link único para formar um grupo de 10 pessoas\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <Crown className=\"w-6 h-6 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">Seja Contemplado</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receba seu serviço completo sem pagar mais nada!\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Código de Indicação */}\n      {referralCode && (\n        <div className=\"max-w-md mx-auto mb-8\">\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <Zap className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                <p className=\"font-semibold text-green-800\">Você foi indicado!</p>\n                <p className=\"text-sm text-green-600\">Código: {referralCode}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Campo para inserir código de indicação */}\n      {!referralCode && (\n        <div className=\"max-w-md mx-auto mb-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Tem um código de indicação?</CardTitle>\n              <CardDescription>\n                Digite o código de quem te indicou para entrar no grupo dela\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"referral\">Código de Indicação (opcional)</Label>\n                <Input\n                  id=\"referral\"\n                  placeholder=\"Ex: ABC12345\"\n                  value={referralCode}\n                  onChange={(e) => setReferralCode(e.target.value.toUpperCase())}\n                  maxLength={8}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Lista de Produtos */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {products.map((product) => (\n          <Card key={product.id} className=\"relative overflow-hidden\">\n            <div className={`absolute top-0 left-0 w-full h-2 ${getCategoryColor(product.category)}`}></div>\n            \n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className={`p-2 rounded-full ${getCategoryColor(product.category)} text-white`}>\n                  {getCategoryIcon(product.category)}\n                </div>\n                <div>\n                  <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                  <Badge variant=\"secondary\" className=\"mt-1\">\n                    {product.category === 'tattoo' ? 'Tatuagem' : 'Dental'}\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Valor total:</span>\n                  <span className=\"text-lg font-semibold line-through text-muted-foreground\">\n                    {formatCurrency(product.full_value)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Você paga apenas:</span>\n                  <span className=\"text-2xl font-bold text-primary\">\n                    {formatCurrency(product.entry_value)}\n                  </span>\n                </div>\n                <div className=\"text-xs text-muted-foreground text-center p-2 bg-muted rounded\">\n                  Apenas 10% de entrada - O restante é absorvido quando seu grupo fechar!\n                </div>\n              </div>\n            </CardContent>\n\n            <CardFooter>\n              <Button\n                className=\"w-full\"\n                onClick={() => handlePurchase(product.product_code)}\n                disabled={purchasing === product.product_code}\n                size=\"lg\"\n              >\n                {purchasing === product.product_code ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Processando...\n                  </>\n                ) : (\n                  <>\n                    Comprar por {formatCurrency(product.entry_value)}\n                  </>\n                )}\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n\n      {/* Footer Info */}\n      <div className=\"mt-12 text-center\">\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardContent className=\"pt-6\">\n            <h3 className=\"font-semibold mb-3\">💡 Dica Importante</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Quanto mais você indicar, mais rápido forma novos grupos e pode ser contemplado novamente! \n              Cada pessoa que você indica também forma seu próprio grupo.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/MLMSuccess.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[860,863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[860,863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'confirmPayment'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [confirmPayment, sessionId]","fix":{"range":[1106,1117],"text":"[confirmPayment, sessionId]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle, Crown, Users, Copy, Share } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function MLMSuccess() {\n  const [searchParams] = useSearchParams();\n  const [loading, setLoading] = useState(true);\n  const [confirming, setConfirming] = useState(false);\n  const [confirmed, setConfirmed] = useState(false);\n  const [groupData, setGroupData] = useState<any>(null);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const sessionId = searchParams.get('session_id');\n\n  useEffect(() => {\n    if (sessionId) {\n      confirmPayment();\n    } else {\n      setLoading(false);\n    }\n  }, [sessionId]);\n\n  const confirmPayment = async () => {\n    try {\n      setConfirming(true);\n\n      const { data, error } = await supabase.functions.invoke(\"confirm-mlm-payment\", {\n        body: { session_id: sessionId }\n      });\n\n      if (error) throw error;\n\n      if (data?.success) {\n        setConfirmed(true);\n        setGroupData(data);\n        \n        toast({\n          title: \"Pagamento confirmado!\",\n          description: \"Você foi adicionado ao grupo com sucesso\",\n        });\n\n        // Recarregar dados após um tempo\n        setTimeout(() => {\n          loadGroupDetails(data.group_id);\n        }, 2000);\n      }\n\n    } catch (error) {\n      console.error(\"Erro ao confirmar pagamento:\", error);\n      toast({\n        title: \"Erro na confirmação\",\n        description: error instanceof Error ? error.message : \"Erro desconhecido\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n      setConfirming(false);\n    }\n  };\n\n  const loadGroupDetails = async (groupId: string) => {\n    try {\n    const { data: groupData, error: groupError } = await supabase\n      .from('plan_groups')\n      .select(`\n        *,\n        services (\n          name,\n          price\n        )\n      `)\n      .eq('id', groupId)\n      .single();\n\n      if (groupError) throw groupError;\n      setGroupData({ ...groupData, group_details: groupData });\n    } catch (error) {\n      console.error(\"Erro ao carregar detalhes do grupo:\", error);\n    }\n  };\n\n  const copyReferralLink = (referralCode: string) => {\n    const link = `${window.location.origin}/mlm/products?ref=${referralCode}`;\n    navigator.clipboard.writeText(link).then(() => {\n      toast({\n        title: \"Link copiado!\",\n        description: \"O link de indicação foi copiado para a área de transferência\",\n      });\n    });\n  };\n\n  const shareReferralLink = (referralCode: string, productName: string) => {\n    const link = `${window.location.origin}/mlm/products?ref=${referralCode}`;\n    const text = `🎯 Oportunidade incrível! \n\nVocê pode conseguir ${productName} pagando apenas 10% de entrada!\n\n🔥 Como funciona:\n• Você paga só a entrada\n• Forma um grupo de 10 pessoas  \n• Quando o grupo fechar, você ganha o serviço completo!\n\n👆 Clique no link e aproveite: ${link}`;\n\n    if (navigator.share) {\n      navigator.share({\n        title: `Oportunidade - ${productName}`,\n        text: text,\n        url: link\n      });\n    } else {\n      navigator.clipboard.writeText(text).then(() => {\n        toast({\n          title: \"Mensagem copiada!\",\n          description: \"A mensagem promocional foi copiada para compartilhar\",\n        });\n      });\n    }\n  };\n\n  const goToDashboard = () => {\n    navigate('/mlm/dashboard');\n  };\n\n  if (loading || confirming) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto mb-6\"></div>\n          <h1 className=\"text-2xl font-bold mb-4\">\n            {confirming ? \"Confirmando seu pagamento...\" : \"Carregando...\"}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Aguarde enquanto processamos sua compra\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!sessionId || !confirmed) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertDescription className=\"text-red-800\">\n              Sessão inválida ou pagamento não confirmado. \n              Se você acabou de fazer um pagamento, tente novamente em alguns minutos.\n            </AlertDescription>\n          </Alert>\n          \n          <div className=\"text-center mt-6\">\n            <Button onClick={() => navigate('/mlm/products')}>\n              Voltar aos Produtos\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Confirmação de Sucesso */}\n        <Card className=\"mb-8 border-green-200 bg-green-50\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <CheckCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <CardTitle className=\"text-2xl text-green-800\">\n              Pagamento Confirmado!\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <p className=\"text-green-700 mb-4\">\n              Sua compra foi processada com sucesso e você foi adicionado ao grupo.\n            </p>\n            \n            {groupData?.group_details && (\n              <div className=\"bg-white p-4 rounded-lg border\">\n                <h3 className=\"font-semibold mb-2\">{groupData.group_details.product.name}</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Posição no grupo:</span>\n                    <p className=\"font-medium\">{groupData.current_count || 'Carregando...'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Status:</span>\n                    <p className=\"font-medium text-blue-600\">Ativo</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Próximos Passos */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-6 h-6 text-primary\" />\n              Próximos Passos\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                  1\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Compartilhe seu link de indicação</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use o link abaixo para indicar pessoas e completar seu grupo de 10\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                  2\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Acompanhe o progresso</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Monitore quantas pessoas já entraram no seu grupo\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                  3\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">Seja contemplado</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Quando 9 pessoas entrarem através do seu link, você será contemplado!\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Link de Indicação */}\n        {groupData?.group_details && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Crown className=\"w-6 h-6 text-yellow-500\" />\n                Seu Link de Indicação\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">\n                  Link para compartilhar:\n                </Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={`${window.location.origin}/mlm/products?ref=${groupData.group_details.referral_code}`}\n                    readOnly\n                    className=\"flex-1\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => copyReferralLink(groupData.group_details.referral_code)}\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => shareReferralLink(\n                      groupData.group_details.referral_code, \n                      groupData.group_details.product.name\n                    )}\n                  >\n                    <Share className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Código: <strong>{groupData.group_details.referral_code}</strong>\n                </p>\n              </div>\n\n              <Alert>\n                <AlertDescription>\n                  💡 <strong>Dica:</strong> Compartilhe este link nas suas redes sociais, WhatsApp, \n                  ou com amigos e familiares. Quanto mais pessoas indicar, mais rápido seu grupo fecha!\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Botões de Ação */}\n        <div className=\"text-center\">\n          <Button onClick={goToDashboard} size=\"lg\" className=\"mr-4\">\n            Ir para o Dashboard\n          </Button>\n          <Button variant=\"outline\" onClick={() => navigate('/mlm/products')}>\n            Ver Outros Produtos\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/PaymentReturn.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkPaymentStatus'. Either include it or remove the dependency array.","line":20,"column":6,"nodeType":"ArrayExpression","endLine":20,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [user, searchParams, checkPaymentStatus]","fix":{"range":[801,821],"text":"[user, searchParams, checkPaymentStatus]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, XCircle, Clock, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nconst PaymentReturn: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [paymentStatus, setPaymentStatus] = useState<'loading' | 'success' | 'pending' | 'failed'>('loading');\n  const [paymentInfo, setPaymentInfo] = useState<any>(null);\n\n  useEffect(() => {\n    if (user) {\n      checkPaymentStatus();\n    }\n  }, [user, searchParams]);\n\n  const checkPaymentStatus = async () => {\n    try {\n      // Verificar parâmetros de retorno do Asaas\n      const paymentId = searchParams.get('payment_id');\n      const status = searchParams.get('status');\n      \n      console.log('🔍 Verificando status do pagamento:', { paymentId, status });\n\n      if (paymentId) {\n        // Buscar informações do pagamento no banco\n        const { data: payment, error } = await supabase\n          .from('payments')\n          .select('*')\n          .eq('asaas_payment_id', paymentId)\n          .eq('user_id', user?.id)\n          .single();\n\n        if (error || !payment) {\n          console.error('❌ Pagamento não encontrado:', error);\n          setPaymentStatus('failed');\n          return;\n        }\n\n        setPaymentInfo(payment);\n\n        // Determinar status baseado nos dados do banco\n        switch (payment.status) {\n          case 'paid':\n            setPaymentStatus('success');\n            break;\n          case 'pending':\n            setPaymentStatus('pending');\n            break;\n          case 'cancelled':\n          case 'failed':\n            setPaymentStatus('failed');\n            break;\n          default:\n            setPaymentStatus('pending');\n        }\n\n        console.log('✅ Status do pagamento:', payment.status);\n\n      } else {\n        // Se não tem payment_id, buscar último pagamento do usuário\n        const { data: lastPayment } = await supabase\n          .from('payments')\n          .select('*')\n          .eq('user_id', user?.id)\n          .order('created_at', { ascending: false })\n          .limit(1)\n          .single();\n\n        if (lastPayment) {\n          setPaymentInfo(lastPayment);\n          setPaymentStatus(lastPayment.status === 'paid' ? 'success' : 'pending');\n        } else {\n          setPaymentStatus('failed');\n        }\n      }\n\n    } catch (error) {\n      console.error('💥 Erro ao verificar pagamento:', error);\n      setPaymentStatus('failed');\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (paymentStatus) {\n      case 'success':\n        return <CheckCircle className=\"h-16 w-16 text-green-500\" />;\n      case 'pending':\n        return <Clock className=\"h-16 w-16 text-yellow-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-16 w-16 text-red-500\" />;\n      default:\n        return <Clock className=\"h-16 w-16 text-gray-400 animate-pulse\" />;\n    }\n  };\n\n  const getStatusMessage = () => {\n    switch (paymentStatus) {\n      case 'success':\n        return {\n          title: 'Pagamento Confirmado!',\n          description: 'Seu pagamento foi processado com sucesso. Você já foi adicionado ao grupo do plano.',\n          color: 'text-green-600'\n        };\n      case 'pending':\n        return {\n          title: 'Pagamento Pendente',\n          description: 'Seu pagamento está sendo processado. Você receberá uma notificação quando for confirmado.',\n          color: 'text-yellow-600'\n        };\n      case 'failed':\n        return {\n          title: 'Erro no Pagamento',\n          description: 'Não foi possível processar seu pagamento. Tente novamente ou entre em contato com o suporte.',\n          color: 'text-red-600'\n        };\n      default:\n        return {\n          title: 'Verificando Pagamento...',\n          description: 'Aguarde enquanto verificamos o status do seu pagamento.',\n          color: 'text-gray-600'\n        };\n    }\n  };\n\n  const statusMessage = getStatusMessage();\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"pt-6 text-center space-y-6\">\n          {/* Status Icon */}\n          <div className=\"flex justify-center\">\n            {getStatusIcon()}\n          </div>\n\n          {/* Status Message */}\n          <div>\n            <h1 className={`text-2xl font-bold mb-2 ${statusMessage.color}`}>\n              {statusMessage.title}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {statusMessage.description}\n            </p>\n          </div>\n\n          {/* Payment Details */}\n          {paymentInfo && (\n            <div className=\"bg-gray-50 p-4 rounded-lg text-left space-y-2\">\n              <h3 className=\"font-medium\">Detalhes do Pagamento:</h3>\n              <div className=\"text-sm space-y-1\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Plano:</span>\n                  <span>{paymentInfo.plan_name}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Valor:</span>\n                  <span>R$ {Number(paymentInfo.amount).toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Método:</span>\n                  <span className=\"capitalize\">{paymentInfo.payment_method}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Data:</span>\n                  <span>{new Date(paymentInfo.created_at).toLocaleDateString('pt-BR')}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            {paymentStatus === 'success' && (\n              <Button \n                onClick={() => navigate('/usuario/dashboard')}\n                className=\"w-full\"\n              >\n                Ir para o Dashboard\n              </Button>\n            )}\n\n            {paymentStatus === 'pending' && (\n              <Button \n                onClick={() => navigate('/usuario/dashboard')}\n                className=\"w-full\"\n              >\n                Acompanhar Status\n              </Button>\n            )}\n\n            {paymentStatus === 'failed' && (\n              <div className=\"space-y-2\">\n                <Button \n                  onClick={() => navigate('/usuario/planos')}\n                  className=\"w-full\"\n                >\n                  Tentar Novamente\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => navigate('/suporte')}\n                  className=\"w-full\"\n                >\n                  Contatar Suporte\n                </Button>\n              </div>\n            )}\n\n            {/* Always show back button */}\n            <Button\n              variant=\"outline\"\n              onClick={() => navigate(-1)}\n              className=\"w-full flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Voltar\n            </Button>\n          </div>\n\n          {/* Loading State */}\n          {paymentStatus === 'loading' && (\n            <div className=\"animate-pulse\">\n              <div className=\"h-4 bg-gray-200 rounded w-3/4 mx-auto\"></div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default PaymentReturn;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/PlanDetails.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlanDetails'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlanDetails, planId]","fix":{"range":[2131,2139],"text":"[loadPlanDetails, planId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  User, \n  Package, \n  DollarSign, \n  Calendar,\n  Phone,\n  Mail,\n  MapPin,\n  Users,\n  CheckCircle,\n  Clock,\n  ArrowLeft\n} from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useNavigate } from 'react-router-dom';\n\ninterface PlanDetails {\n  // Dados do plano\n  id: string;\n  plan_name: string;\n  plan_description: string;\n  category_name: string;\n  total_price: number;\n  entry_price: number;\n  max_participants: number;\n  \n  // Dados do cliente\n  client_id: string;\n  client_name: string;\n  client_email: string;\n  client_phone: string;\n  \n  // Dados do grupo\n  group_number: number;\n  position_number: number;\n  current_participants: number;\n  group_status: string;\n  \n  // Status de pagamento\n  payment_status: string;\n  entry_amount: number;\n  payment_date: string;\n  \n  // Status de contemplação\n  contemplated: boolean;\n  contemplation_date: string;\n  service_completed: boolean;\n  service_completion_date: string;\n  \n  // Profissional\n  professional_id: string;\n  professional_name: string;\n  professional_specialty: string;\n  professional_location: string;\n  professional_phone: string;\n  professional_email: string;\n  \n  // Influenciador\n  influencer_id: string;\n  influencer_name: string;\n  \n  // Datas\n  enrollment_date: string;\n}\n\nexport function PlanDetails() {\n  const { planId } = useParams();\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const [planDetails, setPlanDetails] = useState<PlanDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (planId) {\n      loadPlanDetails();\n    }\n  }, [planId]);\n\n  const loadPlanDetails = async () => {\n    if (!planId) return;\n\n    setLoading(true);\n    try {\n      // Use mock data since complex tables don't exist yet\n      const mockData = {\n        id: planId,\n        entry_amount: 500,\n        payment_status: 'paid',\n        payment_date: '2024-01-15',\n        position_number: 1,\n        contemplated: true,\n        service_completed: false,\n        created_at: '2024-01-01',\n        client_name: 'João Silva',\n        client_email: 'joao@email.com',\n        client_phone: '(11) 99999-9999',\n        plan_name: 'Consultoria Premium',\n        plan_description: 'Serviço de consultoria especializada',\n        category_name: 'Consultoria',\n        total_price: 5000,\n        entry_price: 500,\n        max_participants: 10,\n        group_number: 1,\n        current_participants: 8,\n        group_status: 'forming',\n        contemplation_date: '2024-01-20',\n        professional_name: 'Dr. João Silva',\n        professional_specialty: 'Consultor Especialista',\n        professional_location: 'São Paulo, SP',\n        professional_phone: '(11) 88888-8888',\n        professional_email: 'dr.joao@email.com',\n        influencer_name: 'Maria Influencer'\n      };\n\n      const data = mockData;\n\n      if (data) {\n        const formattedDetails: PlanDetails = {\n          id: data.id,\n          plan_name: data.plan_name,\n          plan_description: data.plan_description,\n          category_name: data.category_name,\n          total_price: data.total_price,\n          entry_price: data.entry_price,\n          max_participants: data.max_participants,\n          \n          client_id: '1',\n          client_name: data.client_name,\n          client_email: data.client_email,\n          client_phone: data.client_phone,\n          \n          group_number: data.group_number,\n          position_number: data.position_number,\n          current_participants: data.current_participants,\n          group_status: data.group_status,\n          \n          payment_status: data.payment_status,\n          entry_amount: data.entry_amount,\n          payment_date: data.payment_date,\n          \n          contemplated: data.contemplated,\n          contemplation_date: data.contemplation_date,\n          service_completed: data.service_completed,\n          service_completion_date: '',\n          \n          professional_id: '1',\n          professional_name: data.professional_name,\n          professional_specialty: data.professional_specialty,\n          professional_location: data.professional_location,\n          professional_phone: data.professional_phone,\n          professional_email: data.professional_email,\n          \n          influencer_id: '1',\n          influencer_name: data.influencer_name,\n          \n          enrollment_date: data.created_at\n        };\n\n        setPlanDetails(formattedDetails);\n      }\n\n    } catch (error) {\n      console.error('Erro ao carregar detalhes do plano:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar detalhes do plano.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('pt-BR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getProgressPercentage = () => {\n    if (!planDetails) return 0;\n    return Math.round((planDetails.current_participants / planDetails.max_participants) * 100);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'forming': { label: 'Formando', variant: 'secondary' as const },\n      'full': { label: 'Completo', variant: 'default' as const },\n      'contemplating': { label: 'Contemplando', variant: 'default' as const },\n      'completed': { label: 'Finalizado', variant: 'default' as const },\n      'pending': { label: 'Pendente', variant: 'secondary' as const },\n      'paid': { label: 'Pago', variant: 'default' as const }\n    };\n    \n    return statusMap[status as keyof typeof statusMap] || { label: status, variant: 'outline' as const };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!planDetails) {\n    return (\n      <div className=\"text-center py-8\">\n        <Alert>\n          <AlertDescription>\n            Plano não encontrado ou você não tem permissão para visualizá-lo.\n          </AlertDescription>\n        </Alert>\n        <Button onClick={() => navigate(-1)} className=\"mt-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Voltar\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Button variant=\"ghost\" onClick={() => navigate(-1)} className=\"mb-2\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Voltar\n          </Button>\n          <h2 className=\"text-3xl font-bold tracking-tight\">{planDetails.plan_name}</h2>\n          <p className=\"text-muted-foreground\">{planDetails.plan_description}</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          {planDetails.category_name}\n        </Badge>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Coluna Principal */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Informações do Cliente */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"mr-2 h-5 w-5\" />\n                Informações do Cliente\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Nome</p>\n                <p className=\"text-lg font-semibold\">{planDetails.client_name}</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">E-mail</p>\n                  <p className=\"text-sm\">{planDetails.client_email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Telefone</p>\n                  <p className=\"text-sm\">{planDetails.client_phone}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Data de Inscrição</p>\n                  <p className=\"text-sm\">{formatDate(planDetails.enrollment_date)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Posição no Grupo</p>\n                  <p className=\"text-sm font-semibold\">#{planDetails.position_number}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Progresso do Grupo */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"mr-2 h-5 w-5\" />\n                Progresso do Grupo {planDetails.group_number}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Participantes</span>\n                <span>{planDetails.current_participants}/{planDetails.max_participants}</span>\n              </div>\n              <Progress value={getProgressPercentage()} className=\"w-full\" />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Status do Grupo</span>\n                <Badge {...getStatusBadge(planDetails.group_status)}>\n                  {getStatusBadge(planDetails.group_status).label}\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Informações Financeiras */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <DollarSign className=\"mr-2 h-5 w-5\" />\n                Informações Financeiras\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Valor Total do Serviço</p>\n                  <p className=\"text-xl font-bold text-green-600\">{formatCurrency(planDetails.total_price)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Valor da Entrada</p>\n                  <p className=\"text-xl font-bold\">{formatCurrency(planDetails.entry_price)}</p>\n                </div>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Status do Pagamento</span>\n                <Badge {...getStatusBadge(planDetails.payment_status)}>\n                  {getStatusBadge(planDetails.payment_status).label}\n                </Badge>\n              </div>\n              {planDetails.payment_date && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Data do Pagamento</p>\n                  <p className=\"text-sm\">{formatDate(planDetails.payment_date)}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Status de Contemplação e Serviço */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <CheckCircle className=\"mr-2 h-5 w-5\" />\n                Status do Serviço\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl mb-2\">\n                    {planDetails.contemplated ? '🎉' : '⏳'}\n                  </div>\n                  <p className=\"font-semibold\">\n                    {planDetails.contemplated ? 'Contemplado' : 'Aguardando'}\n                  </p>\n                  {planDetails.contemplation_date && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {formatDate(planDetails.contemplation_date)}\n                    </p>\n                  )}\n                </div>\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl mb-2\">\n                    {planDetails.service_completed ? '✅' : '🔄'}\n                  </div>\n                  <p className=\"font-semibold\">\n                    {planDetails.service_completed ? 'Concluído' : 'Pendente'}\n                  </p>\n                  {planDetails.service_completion_date && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {formatDate(planDetails.service_completion_date)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Coluna Lateral */}\n        <div className=\"space-y-6\">\n          {/* Profissional Atribuído */}\n          {planDetails.professional_name && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"mr-2 h-5 w-5\" />\n                  Profissional\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"font-semibold text-lg\">{planDetails.professional_name}</p>\n                  <p className=\"text-sm text-muted-foreground\">{planDetails.professional_specialty}</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center text-sm\">\n                    <MapPin className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    <span>{planDetails.professional_location}</span>\n                  </div>\n                  \n                  {planDetails.professional_phone && (\n                    <div className=\"flex items-center text-sm\">\n                      <Phone className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                      <span>{planDetails.professional_phone}</span>\n                    </div>\n                  )}\n                  \n                  {planDetails.professional_email && (\n                    <div className=\"flex items-center text-sm\">\n                      <Mail className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                      <span>{planDetails.professional_email}</span>\n                    </div>\n                  )}\n                </div>\n\n                {planDetails.contemplated && !planDetails.service_completed && (\n                  <div className=\"space-y-2\">\n                    <Separator />\n                    <Alert>\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Você foi contemplado! Entre em contato com o profissional para agendar seu serviço.\n                      </AlertDescription>\n                    </Alert>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => window.open(`tel:${planDetails.professional_phone}`)}>\n                        <Phone className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" onClick={() => window.open(`mailto:${planDetails.professional_email}`)}>\n                        <Mail className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Influenciador */}\n          {planDetails.influencer_name && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Indicado por</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"font-semibold\">{planDetails.influencer_name}</p>\n                <p className=\"text-sm text-muted-foreground\">Influenciador</p>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Timeline */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"mr-2 h-5 w-5\" />\n                Timeline\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                  <div>\n                    <p className=\"text-sm font-medium\">Inscrição realizada</p>\n                    <p className=\"text-xs text-muted-foreground\">{formatDate(planDetails.enrollment_date)}</p>\n                  </div>\n                </div>\n                \n                {planDetails.payment_date && (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Pagamento confirmado</p>\n                      <p className=\"text-xs text-muted-foreground\">{formatDate(planDetails.payment_date)}</p>\n                    </div>\n                  </div>\n                )}\n                \n                {planDetails.contemplation_date ? (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Contemplado</p>\n                      <p className=\"text-xs text-muted-foreground\">{formatDate(planDetails.contemplation_date)}</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-gray-300 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Aguardando contemplação</p>\n                    </div>\n                  </div>\n                )}\n                \n                {planDetails.service_completion_date ? (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Serviço concluído</p>\n                      <p className=\"text-xs text-muted-foreground\">{formatDate(planDetails.service_completion_date)}</p>\n                    </div>\n                  </div>\n                ) : planDetails.contemplated ? (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-orange-600\">Aguardando realização do serviço</p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-gray-300 rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Serviço pendente</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/PlanSubscription.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPlan'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadPlan, planId]","fix":{"range":[1451,1459],"text":"[loadPlan, planId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4589,4592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4589,4592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useParams, useNavigate, useSearchParams } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport Header from '@/components/Header';\nimport DashboardFooter from '@/components/DashboardFooter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  CheckCircle, \n  Users, \n  ArrowLeft, \n  CreditCard,\n  Share2,\n  Clock\n} from 'lucide-react';\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  entryPrice: number;\n  category: string;\n  features: string[];\n  max_participants: number;\n  duration_months: number;\n  image_url?: string;\n}\n\nconst PlanSubscription = () => {\n  const { planId } = useParams<{ planId: string }>();\n  const [searchParams] = useSearchParams();\n  const referralCode = searchParams.get('ref');\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  \n  const [plan, setPlan] = useState<Plan | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n\n  useEffect(() => {\n    if (planId) {\n      loadPlan();\n    }\n  }, [planId]);\n\n  const loadPlan = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase\n        .from('custom_plans')\n        .select('*')\n        .eq('id', planId)\n        .eq('active', true)\n        .single();\n\n      if (error) throw error;\n      if (!data) {\n        toast({\n          title: \"Plano não encontrado\",\n          description: \"Este plano não existe ou não está mais ativo.\",\n          variant: \"destructive\"\n        });\n        navigate('/plans');\n        return;\n      }\n\n      setPlan({\n        id: data.id,\n        name: data.name,\n        description: data.description || '',\n        price: data.price,\n        entryPrice: Math.round(data.price * 0.1),\n        category: data.category || 'service',\n        features: Array.isArray(data.features) ? data.features.map(String) : [],\n        max_participants: data.max_participants || 10,\n        duration_months: data.duration_months || 1,\n        image_url: data.image_url\n      });\n    } catch (error) {\n      console.error('Erro ao carregar plano:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar detalhes do plano.\",\n        variant: \"destructive\"\n      });\n      navigate('/plans');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubscribe = async () => {\n    if (!plan || !user) return;\n    \n    try {\n      setProcessing(true);\n      \n      // Verificar se usuário já tem plano ativo\n      const { data: hasActivePlan } = await supabase\n        .rpc('user_has_active_plan', { user_uuid: user.id });\n      \n      if (hasActivePlan) {\n        toast({\n          title: \"Já possui plano ativo\",\n          description: \"Você já está participando de um grupo. Acesse seu dashboard para ver o status.\",\n          variant: \"destructive\"\n        });\n        navigate('/usuario/dashboard');\n        return;\n      }\n\n      let groupId;\n      \n      if (referralCode) {\n        // Juntar-se a um grupo existente via código de referência\n        const { data, error } = await supabase\n          .rpc('join_group_by_referral', {\n            user_uuid: user.id,\n            referral_code_param: referralCode,\n            entry_amount: plan.entryPrice\n          });\n          \n        if (error) throw error;\n        groupId = data;\n        \n        toast({\n          title: \"✅ Bem-vindo ao grupo!\",\n          description: `Você se juntou ao grupo através do código ${referralCode}. Agora você faz parte do grupo para ${plan.name}!`,\n        });\n      } else {\n        // Criar novo grupo\n        const { data, error } = await supabase\n          .rpc('create_user_plan_group', {\n            user_uuid: user.id,\n            plan_uuid: plan.id,\n            entry_amount: plan.entryPrice\n          });\n          \n        if (error) throw error;\n        groupId = data;\n        \n        toast({\n          title: \"🎉 Grupo criado!\",\n          description: `Seu grupo para ${plan.name} foi criado! Agora você pode compartilhar seu link de convite.`,\n        });\n      }\n\n      // Redirecionar para o dashboard do usuário\n      navigate('/usuario/dashboard');\n      \n    } catch (error: any) {\n      console.error('Erro ao se inscrever no plano:', error);\n      toast({\n        title: \"Erro na inscrição\",\n        description: error.message || \"Erro ao processar sua inscrição. Tente novamente.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  if (!plan) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Plano não encontrado</h2>\n          <Button onClick={() => navigate('/plans')}>\n            Voltar aos Planos\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8 max-w-2xl\">\n        <div className=\"mb-6\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate('/plans')}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Voltar aos Planos\n          </Button>\n        </div>\n\n        {referralCode && (\n          <Card className=\"mb-6 border-green-200 bg-green-50\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <Share2 className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-green-800\">Convite Detectado!</h4>\n                  <p className=\"text-sm text-green-600\">\n                    Você foi convidado através do código: <strong>{referralCode}</strong>\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n                <p className=\"text-muted-foreground mt-1\">{plan.description}</p>\n              </div>\n              <Badge variant=\"secondary\" className=\"capitalize\">\n                {plan.category}\n              </Badge>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {plan.image_url && (\n              <div className=\"relative h-48 w-full overflow-hidden rounded-lg\">\n                <img\n                  src={plan.image_url}\n                  alt={plan.name}\n                  className=\"h-full w-full object-cover\"\n                />\n              </div>\n            )}\n\n            {/* Pricing */}\n            <div className=\"bg-gray-50 rounded-lg p-6 text-center\">\n              <div className=\"text-sm text-muted-foreground mb-2\">\n                Valor total do serviço\n              </div>\n              <div className=\"text-xl font-medium text-gray-600 line-through mb-2\">\n                R$ {plan.price.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground mb-2\">\n                {referralCode ? 'Você paga para entrar no grupo:' : 'Você paga apenas:'}\n              </div>\n              <div className=\"text-3xl font-bold text-primary\">\n                R$ {plan.entryPrice.toLocaleString()}\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                entrada (10% do valor total)\n              </div>\n            </div>\n\n            {/* Group Info */}\n            <div className=\"flex items-center justify-center gap-6 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"h-4 w-4\" />\n                <span>{plan.max_participants} pessoas por grupo</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{plan.duration_months} {plan.duration_months === 1 ? 'mês' : 'meses'}</span>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Features */}\n            <div>\n              <h4 className=\"font-semibold mb-3\">O que está incluído:</h4>\n              <div className=\"space-y-2\">\n                {plan.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-start gap-2\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n                    <span className=\"text-sm\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* How it works */}\n            <div>\n              <h4 className=\"font-semibold mb-3\">Como funciona:</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold\">\n                    1\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>\n                      {referralCode \n                        ? 'Entre no grupo existente' \n                        : 'Crie seu grupo'\n                      }\n                    </strong>\n                    <p className=\"text-muted-foreground\">\n                      {referralCode \n                        ? 'Você entrará no grupo do seu convite'\n                        : 'Você será o primeiro membro do grupo'\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold\">\n                    2\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>Compartilhe e forme o grupo</strong>\n                    <p className=\"text-muted-foreground\">\n                      {referralCode \n                        ? 'Ajude a completar o grupo convidando mais pessoas'\n                        : 'Convide amigos para formar um grupo de 10 pessoas'\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold\">\n                    3\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>Grupo completo = serviço liberado</strong>\n                    <p className=\"text-muted-foreground\">\n                      Quando o grupo atingir 10 pessoas, todos poderão agendar o serviço\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Subscribe Button */}\n            <Button \n              onClick={handleSubscribe}\n              disabled={processing || !user}\n              className=\"w-full py-6 text-lg font-semibold\"\n              size=\"lg\"\n            >\n              <CreditCard className=\"h-5 w-5 mr-2\" />\n              {processing \n                ? 'Processando...' \n                : referralCode \n                  ? `Entrar no Grupo - R$ ${plan.entryPrice.toLocaleString()}`\n                  : `Criar Grupo - R$ ${plan.entryPrice.toLocaleString()}`\n              }\n            </Button>\n\n            {!user && (\n              <p className=\"text-center text-sm text-muted-foreground\">\n                Você precisa estar logado para se inscrever em um plano.\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <DashboardFooter />\n    </div>\n  );\n};\n\nexport default PlanSubscription;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Plans.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/ProfessionalLogin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1667,1670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1667,1670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n// Google OAuth removido - sistema simplificado\nimport { Stethoscope, Loader2 } from \"lucide-react\";\n\nconst ProfessionalLogin = () => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const { error } = await login(formData.email, formData.password, \"professional\");\n      \n      if (error) {\n        throw new Error(error.message);\n      }\n\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Bem-vindo ao painel profissional.\",\n      });\n\n      // Redirection will be handled automatically by AuthContext\n    } catch (error: any) {\n      console.error(\"Professional login error:\", error);\n      setError(error.message || \"Erro ao fazer login. Verifique suas credenciais.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-ap-light-orange to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <div className=\"flex justify-center mb-4\">\n                  <Stethoscope className=\"h-12 w-12 text-ap-orange\" />\n                </div>\n                <CardTitle className=\"text-2xl font-bold\">Login Profissional</CardTitle>\n                <CardDescription>\n                  Acesse sua conta profissional\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  {error && (\n                    <Alert variant=\"destructive\">\n                      <AlertDescription>{error}</AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">E-mail</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      placeholder=\"seu@email.com\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Senha</Label>\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      placeholder=\"Digite sua senha\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                  \n                  <Button type=\"submit\" className=\"w-full bg-ap-orange hover:bg-ap-orange/90\" disabled={loading}>\n                    {loading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Entrando...\n                      </>\n                    ) : (\n                      \"Entrar\"\n                    )}\n                  </Button>\n                  \n                  {/* Google OAuth removido - sistema simplificado */}\n                </form>\n                \n                <div className=\"mt-6 text-center space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    Não tem uma conta?{\" \"}\n                    <Link to=\"/cadastro\" className=\"text-ap-orange hover:underline\">\n                      Cadastre-se como profissional\n                    </Link>\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <Link to=\"/esqueci-senha\" className=\"text-ap-orange hover:underline\">\n                      Esqueci minha senha\n                    </Link>\n                  </p>\n                  <Button \n                    variant=\"ghost\" \n                    onClick={() => navigate(\"/\")}\n                    className=\"text-sm\"\n                  >\n                    ← Voltar ao site\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default ProfessionalLogin;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/QuickLogin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1971,1974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1971,1974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst QuickLogin = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      if (isLogin) {\n        const { error } = await login(email, password);\n        if (error) throw error;\n        \n        toast({\n          title: \"Login realizado com sucesso!\",\n          description: \"Redirecionando para seu painel...\",\n        });\n        \n        // Não fazer redirecionamento manual - deixar o AuthContext fazer automaticamente\n      } else {\n        const userData = {\n          email,\n          fullName: fullName || \"Usuário\",\n          phone: phone || \"\"\n        };\n        \n        const { error } = await register(email, password, userData, \"user\");\n        if (error) throw error;\n        \n        toast({\n          title: \"Cadastro realizado com sucesso!\",\n          description: \"Sua conta foi criada. Redirecionando...\",\n        });\n        \n        // Não fazer redirecionamento manual - deixar o AuthContext fazer automaticamente\n      }\n    } catch (error: any) {\n      console.error('QuickLogin error:', error);\n      \n      // Mensagens de erro mais específicas\n      let errorMessage = \"Ocorreu um erro. Tente novamente.\";\n      \n      if (error.message?.includes('Email not confirmed')) {\n        errorMessage = \"Email não confirmado. Aguarde alguns minutos e tente novamente, ou entre em contato com o suporte.\";\n      } else if (error.message?.includes('Invalid login credentials')) {\n        errorMessage = \"Email ou senha incorretos. Verifique seus dados e tente novamente.\";\n      } else if (error.message?.includes('User not found')) {\n        errorMessage = \"Usuário não encontrado. Verifique o email digitado.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: isLogin ? \"Erro no Login\" : \"Erro no Cadastro\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-primary/5 to-background\">\n        <div className=\"container\">\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-2xl\">Acesso do Cliente</CardTitle>\n                <CardDescription>\n                  {isLogin ? \"Entre em sua conta\" : \"Crie sua conta agora\"}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs value={isLogin ? \"login\" : \"register\"} className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger \n                      value=\"login\" \n                      onClick={() => setIsLogin(true)}\n                    >\n                      Entrar\n                    </TabsTrigger>\n                    <TabsTrigger \n                      value=\"register\" \n                      onClick={() => setIsLogin(false)}\n                    >\n                      Cadastrar\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"login\" className=\"space-y-4 mt-4\">\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">E-mail *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={email}\n                          onChange={(e) => setEmail(e.target.value)}\n                          required\n                          placeholder=\"seu@email.com\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">Senha *</Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={password}\n                          onChange={(e) => setPassword(e.target.value)}\n                          required\n                          placeholder=\"Sua senha\"\n                        />\n                      </div>\n                      \n                      <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                        {loading ? \"Entrando...\" : \"Entrar\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                  \n                  <TabsContent value=\"register\" className=\"space-y-4 mt-4\">\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"fullName\">Nome</Label>\n                        <Input\n                          id=\"fullName\"\n                          type=\"text\"\n                          value={fullName}\n                          onChange={(e) => setFullName(e.target.value)}\n                          placeholder=\"Seu nome completo (opcional)\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">E-mail *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          value={email}\n                          onChange={(e) => setEmail(e.target.value)}\n                          required\n                          placeholder=\"seu@email.com\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Telefone</Label>\n                        <Input\n                          id=\"phone\"\n                          type=\"tel\"\n                          value={phone}\n                          onChange={(e) => setPhone(e.target.value)}\n                          placeholder=\"(11) 99999-9999 (opcional)\"\n                        />\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"password\">Senha *</Label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={password}\n                          onChange={(e) => setPassword(e.target.value)}\n                          required\n                          placeholder=\"Mínimo 6 caracteres\"\n                          minLength={6}\n                        />\n                      </div>\n                      \n                      <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n                        {loading ? \"Criando conta...\" : \"Criar conta\"}\n                      </Button>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n                \n                <div className=\"mt-6 p-4 bg-muted/50 rounded-lg\">\n                  <h4 className=\"text-sm font-medium mb-2\">\n                    ℹ️ Informação importante:\n                  </h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• O sistema pode exigir confirmação de email</li>\n                    <li>• Se não receber o email, aguarde alguns minutos</li>\n                    <li>• Após cadastro, aguarde o redirecionamento automático</li>\n                    <li>• Se houver problemas, entre em contato com suporte</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default QuickLogin;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Register.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4368,4371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4368,4371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport FileUpload from \"@/components/FileUpload\";\nimport { UploadResult } from \"@/lib/storage\";\n\nconst Register = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { register, user } = useAuth();\n\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    category: \"\",\n    location: \"\",\n    phone: \"\",\n    instagram: \"\",\n    pixKey: \"\",\n    idDocument: null as File | null,\n    presentationVideo: null as File | null,\n    termsAccepted: false,\n  });\n\n  const [uploadedDocuments, setUploadedDocuments] = useState({\n    idDocument: null as UploadResult | null,\n    video: null as UploadResult | null,\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [step, setStep] = useState(1);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleRadioChange = (value: string) => {\n    setFormData(prev => ({ ...prev, category: value }));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, files } = e.target;\n    if (files && files.length > 0) {\n      setFormData(prev => ({ ...prev, [name]: files[0] }));\n    }\n  };\n\n  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    setFormData(prev => ({ ...prev, [name]: checked }));\n  };\n\n  const handleNextStep = () => {\n    // Validate current step\n    if (step === 1) {\n      if (!formData.fullName || !formData.email || !formData.password || !formData.category || !formData.location) {\n        toast({\n          title: \"Campos obrigatórios\",\n          description: \"Por favor, preencha todos os campos obrigatórios.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else if (step === 2) {\n      if (!formData.phone || !formData.instagram || !formData.pixKey) {\n        toast({\n          title: \"Campos obrigatórios\",\n          description: \"Por favor, preencha todos os campos obrigatórios.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    setStep(step + 1);\n    window.scrollTo(0, 0);\n  };\n\n  const handlePreviousStep = () => {\n    setStep(step - 1);\n    window.scrollTo(0, 0);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.idDocument && !uploadedDocuments.idDocument) {\n      toast({\n        title: \"Documento obrigatório\",\n        description: \"Por favor, faça o upload do seu documento de identificação.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.termsAccepted) {\n      toast({\n        title: \"Termos não aceitos\",\n        description: \"Você precisa aceitar os termos e condições para continuar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const userData = {\n        full_name: formData.fullName,\n        email: formData.email,\n        phone: formData.phone,\n        category: formData.category,\n        location: formData.location,\n        cep: \"\", // Not collected in this form\n        instagram: formData.instagram,\n        cpf: \"\", // Not collected in this form\n        description: \"\",\n        experience: \"\",\n        approved: false,\n        id_document_url: uploadedDocuments.idDocument?.url || null,\n        video_url: uploadedDocuments.video?.url || null\n      };\n\n      await register(formData.email, formData.password, userData, \"professional\");\n      \n      toast({\n        title: \"Cadastro realizado com sucesso!\",\n        description: \"Aguarde a aprovação do seu cadastro.\",\n      });\n\n      navigate(\"/confirmacao\");\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Erro ao realizar cadastro. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // If the user is already logged in, show a message instead of redirecting\n  useEffect(() => {\n    if (user) {\n      if (user.role === \"professional\") {\n        navigate(\"/profissional\");\n      } else if (user.role === \"admin\") {\n        // Don't redirect admin automatically, let them see the form\n        console.log(\"Admin user detected, showing registration form\");\n      }\n    }\n  }, [user, navigate]);\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"fullName\">Nome completo *</Label>\n              <Input\n                id=\"fullName\"\n                name=\"fullName\"\n                value={formData.fullName}\n                onChange={handleChange}\n                placeholder=\"Seu nome completo\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email *</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                placeholder=\"seu@email.com\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Senha *</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                placeholder=\"Sua senha\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"category\">Categoria *</Label>\n              <RadioGroup value={formData.category} onValueChange={handleRadioChange} className=\"mt-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"tatuador\" id=\"tatuador\" />\n                  <Label htmlFor=\"tatuador\" className=\"cursor-pointer\">Tatuador</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"dentista\" id=\"dentista\" />\n                  <Label htmlFor=\"dentista\" className=\"cursor-pointer\">Dentista (Lentes de Contato)</Label>\n                </div>\n              </RadioGroup>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"location\">Local de atendimento *</Label>\n              <Input\n                id=\"location\"\n                name=\"location\"\n                value={formData.location}\n                onChange={handleChange}\n                placeholder=\"Cidade/Estado\"\n                required\n              />\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button type=\"button\" onClick={handleNextStep} className=\"bg-ap-orange hover:bg-ap-orange/90\">\n                Próximo\n              </Button>\n            </div>\n          </div>\n        );\n      \n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"phone\">Telefone *</Label>\n              <Input\n                id=\"phone\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                placeholder=\"(XX) XXXXX-XXXX\"\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"instagram\">Instagram *</Label>\n              <div className=\"flex\">\n                <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500\">\n                  @\n                </span>\n                <Input\n                  id=\"instagram\"\n                  name=\"instagram\"\n                  value={formData.instagram}\n                  onChange={handleChange}\n                  placeholder=\"seu_perfil\"\n                  className=\"rounded-l-none\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"pixKey\">Chave PIX *</Label>\n              <Input\n                id=\"pixKey\"\n                name=\"pixKey\"\n                value={formData.pixKey}\n                onChange={handleChange}\n                placeholder=\"CPF, e-mail, telefone ou chave aleatória\"\n                required\n              />\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <Button type=\"button\" onClick={handlePreviousStep} variant=\"outline\">\n                Voltar\n              </Button>\n              <Button type=\"button\" onClick={handleNextStep} className=\"bg-ap-orange hover:bg-ap-orange/90\">\n                Próximo\n              </Button>\n            </div>\n          </div>\n        );\n      \n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <FileUpload\n                type=\"document\"\n                label=\"Documento de identificação (RG ou CNH) *\"\n                description=\"Formatos aceitos: JPG, PNG, PDF. Tamanho máximo: 5MB\"\n                onUploadComplete={(result) => {\n                  setUploadedDocuments(prev => ({ ...prev, idDocument: result }));\n                }}\n              />\n            </div>\n            \n            <div>\n              <FileUpload\n                type=\"video\"\n                label=\"Vídeo de apresentação (opcional)\"\n                description=\"Formatos aceitos: MP4, MOV, AVI. Tamanho máximo: 50MB\"\n                onUploadComplete={(result) => {\n                  setUploadedDocuments(prev => ({ ...prev, video: result }));\n                }}\n              />\n            </div>\n            \n            <div className=\"flex items-start space-x-2\">\n              <input\n                type=\"checkbox\"\n                id=\"termsAccepted\"\n                name=\"termsAccepted\"\n                checked={formData.termsAccepted}\n                onChange={handleCheckboxChange}\n                className=\"mt-1\"\n              />\n              <Label htmlFor=\"termsAccepted\" className=\"text-sm\">\n                Eu aceito os termos e condições da plataforma Amigo do Peito e concordo em fornecer serviços de qualidade, emitir nota fiscal e seguir as diretrizes da plataforma. *\n              </Label>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <Button type=\"button\" onClick={handlePreviousStep} variant=\"outline\">\n                Voltar\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"bg-ap-orange hover:bg-ap-orange/90\"\n                disabled={loading}\n              >\n                {loading ? \"Enviando...\" : \"Finalizar Cadastro\"}\n              </Button>\n            </div>\n          </div>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <section className=\"py-12 flex-1 bg-gradient-to-br from-ap-light-orange to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-3xl font-bold mb-4\">Cadastro de Profissionais</h1>\n              <p className=\"text-gray-600\">\n                Preencha o formulário abaixo para se juntar à nossa plataforma. Seu cadastro será analisado pela nossa equipe.\n              </p>\n            </div>\n            \n            <Card className=\"shadow-lg\">\n              <CardContent className=\"pt-6\">\n                <div className=\"mb-8\">\n                  <div className=\"flex justify-between items-center\">\n                    {[1, 2, 3].map((s) => (\n                      <div\n                        key={s}\n                        className={`flex flex-col items-center ${\n                          s < step ? \"text-ap-orange\" : s === step ? \"text-ap-orange\" : \"text-gray-400\"\n                        }`}\n                      >\n                        <div\n                          className={`w-8 h-8 rounded-full flex items-center justify-center font-medium ${\n                            s < step\n                              ? \"bg-ap-orange text-white\"\n                              : s === step\n                              ? \"bg-white text-ap-orange border-2 border-ap-orange\"\n                              : \"bg-gray-100 text-gray-400 border border-gray-300\"\n                          }`}\n                        >\n                          {s}\n                        </div>\n                        <span className=\"text-sm mt-1\">\n                          {s === 1 ? \"Informações\" : s === 2 ? \"Contato\" : \"Documentos\"}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"relative mt-2\">\n                    <div className=\"absolute top-0 left-0 h-1 bg-gray-200 w-full\"></div>\n                    <div\n                      className=\"absolute top-0 left-0 h-1 bg-ap-orange transition-all duration-300\"\n                      style={{ width: `${((step - 1) / 2) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n                \n                <form onSubmit={handleSubmit}>\n                  {renderStep()}\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Register;\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Support.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/TermsAndPolicies.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/Todos.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1259,1262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1259,1262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Trash2, Plus, Edit3, Check, X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Todo {\n  id: string;\n  text: string;\n  completed: boolean;\n  createdAt: Date;\n}\n\nconst Todos = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editText, setEditText] = useState(\"\");\n  const [filter, setFilter] = useState<\"all\" | \"active\" | \"completed\">(\"all\");\n  const { toast } = useToast();\n\n  // Load todos from localStorage on component mount\n  useEffect(() => {\n    const savedTodos = localStorage.getItem(\"todos\");\n    if (savedTodos) {\n      try {\n        const parsedTodos = JSON.parse(savedTodos);\n        setTodos(parsedTodos.map((todo: any) => ({\n          ...todo,\n          createdAt: new Date(todo.createdAt)\n        })));\n      } catch (error) {\n        console.error(\"Error loading todos:\", error);\n      }\n    }\n  }, []);\n\n  // Save todos to localStorage whenever todos change\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = () => {\n    if (newTodo.trim()) {\n      const todo: Todo = {\n        id: Date.now().toString(),\n        text: newTodo.trim(),\n        completed: false,\n        createdAt: new Date()\n      };\n      setTodos([todo, ...todos]);\n      setNewTodo(\"\");\n      toast({\n        title: \"Todo adicionado!\",\n        description: \"Sua tarefa foi criada com sucesso.\",\n      });\n    }\n  };\n\n  const toggleTodo = (id: string) => {\n    setTodos(todos.map(todo => \n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n    const todo = todos.find(t => t.id === id);\n    if (todo) {\n      toast({\n        title: todo.completed ? \"Tarefa reativada!\" : \"Tarefa concluída!\",\n        description: todo.completed ? \"A tarefa foi marcada como pendente.\" : \"Parabéns por completar a tarefa!\",\n      });\n    }\n  };\n\n  const deleteTodo = (id: string) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n    toast({\n      title: \"Tarefa removida!\",\n      description: \"A tarefa foi excluída com sucesso.\",\n      variant: \"destructive\"\n    });\n  };\n\n  const startEditing = (id: string, text: string) => {\n    setEditingId(id);\n    setEditText(text);\n  };\n\n  const saveEdit = () => {\n    if (editText.trim() && editingId) {\n      setTodos(todos.map(todo =>\n        todo.id === editingId ? { ...todo, text: editText.trim() } : todo\n      ));\n      setEditingId(null);\n      setEditText(\"\");\n      toast({\n        title: \"Tarefa atualizada!\",\n        description: \"As alterações foram salvas.\",\n      });\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditingId(null);\n    setEditText(\"\");\n  };\n\n  const clearCompleted = () => {\n    const completedCount = todos.filter(todo => todo.completed).length;\n    setTodos(todos.filter(todo => !todo.completed));\n    if (completedCount > 0) {\n      toast({\n        title: `${completedCount} tarefa(s) removida(s)!`,\n        description: \"Todas as tarefas concluídas foram excluídas.\",\n      });\n    }\n  };\n\n  const filteredTodos = todos.filter(todo => {\n    if (filter === \"active\") return !todo.completed;\n    if (filter === \"completed\") return todo.completed;\n    return true;\n  });\n\n  const completedCount = todos.filter(todo => todo.completed).length;\n  const activeCount = todos.length - completedCount;\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8 max-w-4xl\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">\n            Lista de Tarefas\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Organize suas tarefas e aumente sua produtividade\n          </p>\n        </div>\n\n        {/* Add Todo */}\n        <Card className=\"mb-6 shadow-lg\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Adicionar Nova Tarefa\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Digite sua tarefa...\"\n                value={newTodo}\n                onChange={(e) => setNewTodo(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && addTodo()}\n                className=\"flex-1\"\n              />\n              <Button onClick={addTodo} disabled={!newTodo.trim()}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Adicionar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stats and Filters */}\n        <Card className=\"mb-6 shadow-lg\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n              <div className=\"flex gap-4 text-sm\">\n                <Badge variant=\"secondary\" className=\"text-sm\">\n                  Total: {todos.length}\n                </Badge>\n                <Badge variant=\"default\" className=\"text-sm bg-blue-500\">\n                  Ativas: {activeCount}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-sm\">\n                  Concluídas: {completedCount}\n                </Badge>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  variant={filter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilter(\"all\")}\n                >\n                  Todas\n                </Button>\n                <Button\n                  variant={filter === \"active\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilter(\"active\")}\n                >\n                  Ativas\n                </Button>\n                <Button\n                  variant={filter === \"completed\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilter(\"completed\")}\n                >\n                  Concluídas\n                </Button>\n              </div>\n              \n              {completedCount > 0 && (\n                <>\n                  <Separator orientation=\"vertical\" className=\"hidden md:block h-6\" />\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={clearCompleted}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Limpar Concluídas\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Todo List */}\n        <div className=\"space-y-3\">\n          {filteredTodos.length === 0 ? (\n            <Card className=\"shadow-lg\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center py-8\">\n                  <div className=\"text-gray-400 mb-2\">\n                    {filter === \"all\" && \"Nenhuma tarefa encontrada\"}\n                    {filter === \"active\" && \"Nenhuma tarefa ativa\"}\n                    {filter === \"completed\" && \"Nenhuma tarefa concluída\"}\n                  </div>\n                  {filter === \"all\" && (\n                    <p className=\"text-sm text-gray-500\">\n                      Adicione sua primeira tarefa acima!\n                    </p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredTodos.map((todo) => (\n              <Card \n                key={todo.id} \n                className={`shadow-lg transition-all duration-200 hover:shadow-xl ${\n                  todo.completed ? \"bg-gray-50 border-gray-200\" : \"bg-white\"\n                }`}\n              >\n                <CardContent className=\"pt-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      checked={todo.completed}\n                      onCheckedChange={() => toggleTodo(todo.id)}\n                      className=\"mt-1\"\n                    />\n                    \n                    <div className=\"flex-1\">\n                      {editingId === todo.id ? (\n                        <div className=\"flex gap-2\">\n                          <Input\n                            value={editText}\n                            onChange={(e) => setEditText(e.target.value)}\n                            onKeyPress={(e) => {\n                              if (e.key === \"Enter\") saveEdit();\n                              if (e.key === \"Escape\") cancelEdit();\n                            }}\n                            className=\"flex-1\"\n                            autoFocus\n                          />\n                          <Button size=\"sm\" onClick={saveEdit}>\n                            <Check className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={cancelEdit}>\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ) : (\n                        <div>\n                          <p className={`${\n                            todo.completed \n                              ? \"line-through text-gray-500\" \n                              : \"text-gray-900\"\n                          } mb-1`}>\n                            {todo.text}\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            Criado: {todo.createdAt.toLocaleDateString(\"pt-BR\")} às{\" \"}\n                            {todo.createdAt.toLocaleTimeString(\"pt-BR\", { \n                              hour: \"2-digit\", \n                              minute: \"2-digit\" \n                            })}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex gap-1\">\n                      {editingId !== todo.id && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => startEditing(todo.id, todo.text)}\n                          className=\"text-gray-500 hover:text-blue-600\"\n                        >\n                          <Edit3 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => deleteTodo(todo.id)}\n                        className=\"text-gray-500 hover:text-red-600\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Todos;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/UserLogin.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2039,2042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2039,2042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n// Google OAuth removido - sistema simplificado\n\nconst UserLogin = () => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { login } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    console.log('🔄 Login form submitted');\n    e.preventDefault();\n    setLoading(true);\n    \n    console.log('📧 Attempting login with:', { email: formData.email, passwordLength: formData.password.length });\n    \n    try {\n      console.log('🚀 Calling login function...');\n      const result = await login(formData.email, formData.password, null);\n      \n      if (result.error) {\n        console.error('❌ Login failed:', result.error);\n        \n        // Verificar se é problema de email não confirmado\n        if (result.error.message?.includes('Email not confirmed')) {\n          toast({\n            title: \"Email não confirmado\",\n            description: \"Verifique seu email e clique no link de confirmação antes de fazer login.\",\n            variant: \"destructive\",\n          });\n        } else {\n          toast({\n            title: \"Erro no login\",\n            description: result.error.message || \"Credenciais inválidas. Verifique seu email e senha.\",\n            variant: \"destructive\",\n          });\n        }\n        } else {\n          console.log('✅ Login successful');\n          // Navigation will be handled by AuthContext automatically\n        }\n    } catch (error: any) {\n      console.error('❌ Login failed:', error);\n      toast({\n        title: \"Erro no login\",\n        description: error.message || \"Credenciais inválidas\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n      console.log('🔄 Login process completed');\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-ap-light-orange to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-center\">Login de Usuário</CardTitle>\n                <p className=\"text-center text-gray-600\">\n                  Acesse sua conta para ver seus grupos e serviços\n                </p>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"email\">E-mail</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\">Senha</Label>\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                    />\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-ap-orange hover:bg-ap-orange/90\"\n                    disabled={loading}\n                  >\n                    {loading ? \"Entrando...\" : \"Entrar\"}\n                  </Button>\n                  \n                  {/* Google OAuth removido - sistema simplificado */}\n                </form>\n\n                <div className=\"mt-6 text-center space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    Não tem uma conta?{\" \"}\n                    <Link to=\"/usuario/cadastro\" className=\"text-ap-orange hover:underline\">\n                      Cadastre-se\n                    </Link>\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <Link to=\"/esqueci-senha\" className=\"text-ap-orange hover:underline\">\n                      Esqueci minha senha\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default UserLogin;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/UserRegister.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3229,3232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3229,3232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n// Google OAuth removido - sistema simplificado\n\nconst UserRegister = () => {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phone: \"\",\n    referralCode: \"\",\n    termsAccepted: false,\n  });\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { register } = useAuth();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Referral code will be generated securely on the server side\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validações\n    if (!formData.fullName || !formData.email || !formData.password || !formData.phone) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Senhas não coincidem\",\n        description: \"As senhas digitadas não são iguais.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Senha muito curta\",\n        description: \"A senha deve ter pelo menos 6 caracteres.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.termsAccepted) {\n      toast({\n        title: \"Termos não aceitos\",\n        description: \"Você precisa aceitar os termos e condições para continuar.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      const userData = {\n        full_name: formData.fullName,\n        email: formData.email,\n        phone: formData.phone,\n        referred_by: formData.referralCode || null\n      };\n\n      console.log('🚀 Initiating user registration...');\n      const result = await register(formData.email, formData.password, userData, \"user\");\n      \n      console.log('📋 Registration result:', result);\n      \n      if (result.error) {\n        toast({\n          title: \"Erro no cadastro\",\n          description: result.error.message || \"Ocorreu um erro. Tente novamente.\",\n          variant: \"destructive\",\n        });\n        return;\n      } else {\n        toast({\n          title: \"Cadastro realizado com sucesso!\",\n          description: \"Bem-vindo! Você será redirecionado automaticamente.\",\n        });\n        // Redirection will be handled automatically by AuthContext\n      }\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Erro no cadastro\",\n        description: error.message || \"Erro ao realizar cadastro. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      \n      <main className=\"flex-1 py-16 bg-gradient-to-br from-ap-light-orange to-white\">\n        <div className=\"ap-container\">\n          <div className=\"max-w-md mx-auto\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl text-center\">Cadastro de Usuário</CardTitle>\n                <CardDescription className=\"text-center\">\n                  Junte-se à nossa plataforma e participe de grupos exclusivos\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {/* Aviso sobre experiência melhorada */}\n                <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"text-2xl\">🚀</div>\n                    <div>\n                      <h4 className=\"font-medium text-blue-800 mb-1\">\n                        Novo: Cadastro Instantâneo!\n                      </h4>\n                      <p className=\"text-sm text-blue-700 mb-2\">\n                        Experimente nossa nova forma mais rápida de entrar na plataforma.\n                      </p>\n                      <Link \n                        to=\"/login-rapido\"\n                        className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n                      >\n                        ✨ Entrar com Google em 2 cliques →\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n                <form onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"fullName\">Nome Completo *</Label>\n                    <Input\n                      id=\"fullName\"\n                      name=\"fullName\"\n                      value={formData.fullName}\n                      onChange={handleChange}\n                      placeholder=\"Seu nome completo\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"email\">E-mail *</Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      placeholder=\"seu@email.com\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"password\">Senha *</Label>\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      placeholder=\"Mínimo 6 caracteres\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirmar Senha *</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      placeholder=\"Digite a senha novamente\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Telefone *</Label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      value={formData.phone}\n                      onChange={handleChange}\n                      placeholder=\"(XX) XXXXX-XXXX\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"referralCode\">Código de Indicação (opcional)</Label>\n                    <Input\n                      id=\"referralCode\"\n                      name=\"referralCode\"\n                      value={formData.referralCode}\n                      onChange={handleChange}\n                      placeholder=\"Ex: MARIA2024\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      Se você foi indicado por alguém, digite o código aqui\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-start space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"termsAccepted\"\n                      name=\"termsAccepted\"\n                      checked={formData.termsAccepted}\n                      onChange={handleChange}\n                      className=\"mt-1\"\n                      required\n                    />\n                    <Label htmlFor=\"termsAccepted\" className=\"text-sm leading-relaxed\">\n                      Eu aceito os{\" \"}\n                      <Link to=\"/termos\" className=\"text-ap-orange hover:underline\">\n                        termos e condições\n                      </Link>{\" \"}\n                      e a{\" \"}\n                      <Link to=\"/privacidade\" className=\"text-ap-orange hover:underline\">\n                        política de privacidade\n                      </Link>\n                      . *\n                    </Label>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-ap-orange hover:bg-ap-orange/90\"\n                    disabled={loading}\n                  >\n                    {loading ? \"Criando conta...\" : \"Criar Conta\"}\n                  </Button>\n                  \n                  {/* Google OAuth removido - sistema simplificado */}\n                </form>\n\n                <div className=\"mt-6 text-center\">\n                  <p className=\"text-sm text-gray-600\">\n                    Já tem uma conta?{\" \"}\n                    <Link to=\"/usuario/login\" className=\"text-ap-orange hover:underline\">\n                      Faça login\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default UserRegister;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/VoucherVerification.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'verifyVoucher'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [verifyVoucher, voucherCode]","fix":{"range":[1322,1335],"text":"[verifyVoucher, voucherCode]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { QRCodeSVG } from 'qrcode.react';\nimport { \n  CheckCircle, \n  XCircle, \n  Clock, \n  User, \n  Package, \n  Calendar,\n  MapPin,\n  Phone,\n  Mail,\n  AlertTriangle\n} from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VoucherData {\n  valid: boolean;\n  message: string;\n  voucher_data?: {\n    code: string;\n    user_name: string;\n    service_type: string;\n    service_price: number;\n    professional_name?: string;\n    issued_at: string;\n    expires_at: string;\n    status: string;\n  };\n  error_code?: string;\n}\n\nexport function VoucherVerification() {\n  const { voucherCode } = useParams();\n  const { toast } = useToast();\n  const [voucher, setVoucher] = useState<VoucherData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [markingAsUsed, setMarkingAsUsed] = useState(false);\n\n  useEffect(() => {\n    if (voucherCode) {\n      verifyVoucher();\n    }\n  }, [voucherCode]);\n\n  const verifyVoucher = async () => {\n    if (!voucherCode) return;\n\n    setLoading(true);\n    try {\n      // Use mock voucher verification since function doesn't exist\n      const data = {\n        valid: true,\n        message: 'Voucher válido!',\n        voucher_data: {\n          code: voucherCode,\n          user_name: 'João Silva',\n          service_type: 'Consultoria',\n          service_price: 500,\n          professional_name: 'Dr. João',\n          issued_at: '2024-01-01',\n          expires_at: '2024-12-31',\n          status: 'active'\n        }\n      };\n      const error = null;\n\n      if (error) throw error;\n\n      setVoucher(data);\n\n    } catch (error) {\n      console.error('Erro ao verificar voucher:', error);\n      setVoucher({\n        valid: false,\n        message: 'Erro ao verificar voucher. Tente novamente.',\n        error_code: 'VERIFICATION_ERROR'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsUsed = async () => {\n    if (!voucherCode || !voucher?.voucher_data) return;\n\n    setMarkingAsUsed(true);\n    try {\n      // Use mock voucher usage since function doesn't exist\n      const data = { success: true };\n      const error = null;\n\n      if (error) throw error;\n\n      toast({\n        title: \"Voucher utilizado!\",\n        description: \"Voucher marcado como usado com sucesso.\",\n      });\n\n      // Recarregar dados do voucher\n      await verifyVoucher();\n\n    } catch (error) {\n      console.error('Erro ao marcar voucher como usado:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao marcar voucher como usado.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setMarkingAsUsed(false);\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value);\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('pt-BR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getStatusIcon = () => {\n    if (loading) return <Clock className=\"h-6 w-6 animate-spin\" />;\n    if (voucher?.valid) return <CheckCircle className=\"h-6 w-6 text-green-500\" />;\n    return <XCircle className=\"h-6 w-6 text-red-500\" />;\n  };\n\n  const getStatusColor = () => {\n    if (loading) return 'bg-blue-50 border-blue-200';\n    if (voucher?.valid) return 'bg-green-50 border-green-200';\n    return 'bg-red-50 border-red-200';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background to-muted flex items-center justify-center\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"text-center py-8\">\n            <Clock className=\"h-12 w-12 animate-spin mx-auto mb-4 text-blue-600\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Verificando voucher...</h3>\n            <p className=\"text-muted-foreground\">\n              Aguarde enquanto validamos seu voucher\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">Verificação de Voucher</h1>\n            <p className=\"text-muted-foreground\">\n              Código: <span className=\"font-mono font-semibold\">{voucherCode}</span>\n            </p>\n          </div>\n\n          {/* Status Card */}\n          <Card className={`mb-8 ${getStatusColor()}`}>\n            <CardContent className=\"text-center py-8\">\n              <div className=\"flex justify-center mb-4\">\n                {getStatusIcon()}\n              </div>\n              <h2 className=\"text-xl font-bold mb-2\">\n                {voucher?.valid ? 'Voucher Válido' : 'Voucher Inválido'}\n              </h2>\n              <p className=\"text-lg\">{voucher?.message}</p>\n            </CardContent>\n          </Card>\n\n          {/* Voucher Details */}\n          {voucher?.valid && voucher.voucher_data && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Main Details */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <User className=\"mr-2 h-5 w-5\" />\n                      Informações do Beneficiário\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Nome</p>\n                      <p className=\"text-lg font-semibold\">{voucher.voucher_data.user_name}</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Package className=\"mr-2 h-5 w-5\" />\n                      Serviço Contratado\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Tipo de Serviço</p>\n                      <p className=\"text-lg font-semibold\">{voucher.voucher_data.service_type}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Valor</p>\n                      <p className=\"text-lg font-bold text-green-600\">\n                        {formatCurrency(voucher.voucher_data.service_price)}\n                      </p>\n                    </div>\n                    {voucher.voucher_data.professional_name && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Profissional</p>\n                        <p className=\"text-lg font-semibold\">{voucher.voucher_data.professional_name}</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"mr-2 h-5 w-5\" />\n                      Informações de Validade\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Data de Emissão</p>\n                      <p className=\"text-lg\">{formatDate(voucher.voucher_data.issued_at)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Data de Validade</p>\n                      <p className=\"text-lg\">{formatDate(voucher.voucher_data.expires_at)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Status</p>\n                      <Badge \n                        variant={voucher.voucher_data.status === 'active' ? 'default' : 'secondary'}\n                      >\n                        {voucher.voucher_data.status === 'active' ? 'Ativo' : \n                         voucher.voucher_data.status === 'used' ? 'Utilizado' : 'Expirado'}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* QR Code and Actions */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-center\">QR Code</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center\">\n                    <div className=\"bg-white p-4 rounded-lg border inline-block\">\n                      <QRCodeSVG\n                        value={window.location.href}\n                        size={200}\n                        level=\"M\"\n                        includeMargin={true}\n                      />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      Código: {voucher.voucher_data.code}\n                    </p>\n                  </CardContent>\n                </Card>\n\n                {voucher.voucher_data.status === 'active' && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Ações</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <Button \n                        onClick={markAsUsed}\n                        disabled={markingAsUsed}\n                        className=\"w-full\"\n                      >\n                        {markingAsUsed ? 'Processando...' : 'Marcar como Utilizado'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Instruções</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"text-sm space-y-2\">\n                      <li>• Apresente este voucher ao profissional</li>\n                      <li>• Verifique a autenticidade através do QR Code</li>\n                      <li>• Agende seu atendimento com antecedência</li>\n                      <li>• Em caso de dúvidas, entre em contato</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* Error Details */}\n          {!voucher?.valid && voucher?.error_code && (\n            <Card>\n              <CardContent className=\"py-8\">\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    {voucher.error_code === 'NOT_FOUND' && \n                      'Este código de voucher não foi encontrado em nosso sistema. Verifique se digitou corretamente.'}\n                    {voucher.error_code === 'EXPIRED' && \n                      'Este voucher expirou. Entre em contato conosco para mais informações.'}\n                    {voucher.error_code === 'USED' && \n                      'Este voucher já foi utilizado anteriormente.'}\n                    {voucher.error_code === 'VERIFICATION_ERROR' && \n                      'Ocorreu um erro durante a verificação. Tente novamente em alguns instantes.'}\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Contact Info */}\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Phone className=\"mr-2 h-5 w-5\" />\n                Precisa de ajuda?\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>(11) 99999-9999</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>suporte@amigodopeito.com</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3661,3664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3661,3664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4264,4267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4264,4267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":489,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15080,15083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15080,15083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\n// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport { \n  Users, \n  UserCheck, \n  UserX, \n  Calendar, \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  DollarSign,\n  Eye,\n  FileText,\n  Download,\n  Filter,\n  Search,\n  RefreshCw,\n  MoreHorizontal,\n  Star,\n  Heart,\n  MessageSquare,\n  Activity,\n  BarChart3,\n  PieChart as PieChartIcon,\n  Target,\n  Zap,\n  Upload,\n  Package,\n  Store,\n  ShoppingCart,\n  Settings\n} from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { NotificationTriggersManager } from \"@/components/admin/NotificationTriggersManager\";\nimport EmailDiagnosticTool from \"@/components/admin/EmailDiagnosticTool\";\nimport { MaterialUploadPanel } from \"@/components/admin/MaterialUploadPanel\";\nimport { PaymentManagement } from \"@/components/admin/PaymentManagement\";\nimport { CustomPlansManager } from \"@/components/admin/CustomPlansManager\";\nimport { AdminManagementPanel } from \"@/components/admin/AdminManagementPanel\";\nimport { ContemplationValidation } from \"@/components/admin/ContemplationValidation\";\nimport { SecurityDashboard } from \"@/components/admin/SecurityDashboard\";\n// Removido: ServicePlansManager - sistema antigo\nimport { UserMarketplaceManager } from \"@/components/admin/UserMarketplaceManager\";\nimport { ProfessionalMarketplaceManager } from \"@/components/admin/ProfessionalMarketplaceManager\";\nimport { SalesManager } from \"@/components/admin/SalesManager\";\nimport { ReportsAnalytics } from \"@/components/admin/ReportsAnalytics\";\n\ninterface Professional {\n  id: string;\n  full_name: string;\n  email: string;\n  category: string;\n  location: string;\n  phone: string;\n  instagram: string;\n  approved: boolean;\n  created_at: string;\n}\n\ninterface User {\n  id: string;\n  full_name: string;\n  email: string;\n  phone: string;\n  created_at: string;\n  referral_code: string;\n}\n\ninterface Influencer {\n  id: string;\n  full_name: string;\n  email: string;\n  phone: string;\n  instagram: string;\n  followers: string;\n  approved: boolean;\n  created_at: string;\n}\n\ninterface Transaction {\n  id: string;\n  type: \"service\" | \"commission\" | \"withdrawal\";\n  professional: string;\n  user?: string;\n  service?: string;\n  amount: number;\n  status: \"pending\" | \"completed\" | \"refunded\" | \"cancelled\";\n  date: string;\n  paymentMethod?: string;\n}\n\ninterface WithdrawalRequest {\n  id: string;\n  professional: string;\n  amount: number;\n  pixKey: string;\n  status: \"pending\" | \"approved\" | \"rejected\" | \"processed\";\n  requestDate: string;\n}\n\ninterface ActivityLog {\n  id: string;\n  type: \"registration\" | \"approval\" | \"transaction\" | \"login\" | \"profile_update\";\n  user: string;\n  description: string;\n  timestamp: string;\n  metadata?: any;\n}\n\ninterface RegistrationTrend {\n  date: string;\n  professionals: number;\n  users: number;\n  influencers: number;\n}\n\ninterface CategoryStats {\n  name: string;\n  value: number;\n  color: string;\n}\n\nconst AdminDashboard = () => {\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  \n  const handleGoogleSetup = () => {\n    window.open('/google-setup', '_blank');\n  };\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [selectedProfile, setSelectedProfile] = useState<any>(null);\n  const [profileDialogOpen, setProfileDialogOpen] = useState(false);\n  const [dateRange, setDateRange] = useState(\"7days\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  \n  // State for data from Supabase\n  const [professionals, setProfessionals] = useState<Professional[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [influencers, setInfluencers] = useState<Influencer[]>([]);\n  \n  // Load data from Supabase with retry logic\n  useEffect(() => {\n    const loadData = async (retryCount = 0) => {\n      try {\n        setLoading(true);\n        \n        // Load professionals with retry\n        const loadProfessionals = async () => {\n          try {\n            const { data, error } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('role', 'professional')\n              .order('created_at', { ascending: false });\n            \n            if (error) throw error;\n            const mappedProfessionals = (data || []).map(prof => ({\n              id: prof.id,\n              full_name: prof.full_name || 'Nome não informado',\n              email: prof.email || 'Email não informado',\n              category: 'Categoria não informada',\n              location: prof.phone || 'Localização não informada',\n              phone: prof.phone || '',\n              instagram: '',\n              approved: prof.approved || false,\n              created_at: prof.created_at\n            }));\n            setProfessionals(mappedProfessionals);\n          } catch (error) {\n            console.error('Error loading professionals:', error);\n            if (retryCount < 2) {\n              console.log('Retrying professionals load...');\n              await new Promise(resolve => setTimeout(resolve, 1000));\n              return loadProfessionals();\n            }\n          }\n        };\n        \n        // Load users with retry\n        const loadUsers = async () => {\n          try {\n            const { data, error } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('role', 'user')\n              .order('created_at', { ascending: false });\n            \n            if (error) throw error;\n            const transformedUsers = (data || []).map(user => ({\n              id: user.id,\n              name: user.full_name || 'Nome não informado',\n              email: user.email || 'Email não informado',\n              full_name: user.full_name || 'Nome não informado',\n              phone: user.phone || '',\n              created_at: user.created_at,\n              referral_code: user.referral_code || `REF-${user.id.slice(-4).toUpperCase()}`\n            }));\n            setUsers(transformedUsers);\n          } catch (error) {\n            console.error('Error loading users:', error);\n            if (retryCount < 2) {\n              console.log('Retrying users load...');\n              await new Promise(resolve => setTimeout(resolve, 1000));\n              return loadUsers();\n            }\n          }\n        };\n        \n        // Load influencers with retry\n        const loadInfluencers = async () => {\n          try {\n            const { data, error } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('role', 'influencer')\n              .order('created_at', { ascending: false });\n            \n            if (error) throw error;\n            const mappedInfluencers = (data || []).map(inf => ({\n              id: inf.id,\n              full_name: inf.full_name || 'Nome não informado',\n              email: inf.email || 'Email não informado',\n              phone: inf.phone || '',\n              instagram: '',\n              followers: '0',\n              approved: inf.approved || false,\n              created_at: inf.created_at\n            }));\n            setInfluencers(mappedInfluencers);\n          } catch (error) {\n            console.error('Error loading influencers:', error);\n            if (retryCount < 2) {\n              console.log('Retrying influencers load...');\n              await new Promise(resolve => setTimeout(resolve, 1000));\n              return loadInfluencers();\n            }\n          }\n        };\n        \n        // Execute all loads in parallel\n        await Promise.all([\n          loadProfessionals(),\n          loadUsers(),\n          loadInfluencers()\n        ]);\n        \n      } catch (error) {\n        console.error('Error loading data:', error);\n        if (retryCount < 2) {\n          console.log(`Retrying data load... Attempt ${retryCount + 1}`);\n          setTimeout(() => loadData(retryCount + 1), 2000);\n          return;\n        }\n        \n        toast({\n          title: \"Erro\",\n          description: \"Erro ao carregar dados do dashboard. Tente atualizar a página.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadData();\n    \n    // Refresh data every 30 seconds\n    const interval = setInterval(() => loadData(), 30000);\n    \n    return () => clearInterval(interval);\n  }, [toast]);\n  \n  // Activity logs para monitoramento (mock data - será substituído por dados reais)\n  const [activityLogs] = useState<ActivityLog[]>([\n    {\n      id: \"1\",\n      type: \"registration\",\n      user: \"João Silva\",\n      description: \"Novo usuário se cadastrou na plataforma\",\n      timestamp: \"2024-01-22T10:30:00Z\"\n    },\n    {\n      id: \"2\",\n      type: \"approval\",\n      user: \"Admin\",\n      description: \"Profissional Ana Costa foi aprovado\",\n      timestamp: \"2024-01-22T09:15:00Z\"\n    },\n    {\n      id: \"3\",\n      type: \"profile_update\",\n      user: \"Pedro Santos\",\n      description: \"Profissional atualizou informações do perfil\",\n      timestamp: \"2024-01-22T08:45:00Z\"\n    }\n  ]);\n\n  // Dados de tendência de cadastros (mock data)\n  const [registrationTrends] = useState<RegistrationTrend[]>([\n    { date: \"16/01\", professionals: 2, users: 8, influencers: 1 },\n    { date: \"17/01\", professionals: 3, users: 12, influencers: 0 },\n    { date: \"18/01\", professionals: 1, users: 15, influencers: 2 },\n    { date: \"19/01\", professionals: 4, users: 10, influencers: 1 },\n    { date: \"20/01\", professionals: 2, users: 18, influencers: 0 },\n    { date: \"21/01\", professionals: 5, users: 14, influencers: 3 },\n    { date: \"22/01\", professionals: 3, users: 20, influencers: 1 }\n  ]);\n\n  // Estatísticas por categoria\n  const categoryStats: CategoryStats[] = [\n    { name: \"Tatuadores\", value: professionals.filter(p => p.category === \"tattoo\").length, color: \"#8884d8\" },\n    { name: \"Dentistas\", value: professionals.filter(p => p.category === \"dental\").length, color: \"#82ca9d\" },\n    { name: \"Outros\", value: professionals.filter(p => ![\"tattoo\", \"dental\"].includes(p.category)).length, color: \"#ffc658\" }\n  ];\n  \n  // Mock transactions for demo (will be replaced with real data later)\n  const [mockTransactions] = useState<Transaction[]>([\n    {\n      id: \"tx1\",\n      type: \"service\",\n      professional: \"Ana Costa\",\n      user: \"João Silva\",\n      service: \"Lentes de contato dental\",\n      amount: 1500.00,\n      status: \"completed\",\n      date: \"2024-01-20T14:30:00Z\",\n      paymentMethod: \"PIX\"\n    },\n    {\n      id: \"tx2\",\n      type: \"commission\",\n      professional: \"Bruno Digital\",\n      amount: 150.00,\n      status: \"pending\",\n      date: \"2024-01-19T10:15:00Z\"\n    },\n    {\n      id: \"tx3\",\n      type: \"withdrawal\",\n      professional: \"Pedro Santos\",\n      amount: 800.00,\n      status: \"completed\",\n      date: \"2024-01-18T16:45:00Z\",\n      paymentMethod: \"PIX\"\n    }\n  ]);\n\n  const [mockWithdrawals] = useState<WithdrawalRequest[]>([\n    {\n      id: \"wd1\",\n      professional: \"Ana Costa\",\n      amount: 1200.00,\n      pixKey: \"ana.costa@email.com\",\n      status: \"pending\",\n      requestDate: \"2024-01-21T09:00:00Z\"\n    },\n    {\n      id: \"wd2\",\n      professional: \"Pedro Santos\",\n      amount: 500.00,\n      pixKey: \"11999887766\",\n      status: \"approved\",\n      requestDate: \"2024-01-20T15:30:00Z\"\n    }\n  ]);\n\n  const handleApprove = async (id: string, type: string) => {\n    try {\n      if (type === \"Profissional\") {\n        const { error } = await supabase\n          .from('profiles')\n          .update({ approved: true })\n          .eq('id', id)\n          .eq('role', 'professional');\n        \n        if (error) {\n          throw error;\n        }\n        \n        // Update local state\n        setProfessionals(prev => prev.map(p => \n          p.id === id ? { ...p, approved: true } : p\n        ));\n      } else if (type === \"Influenciador\") {\n        const { error } = await supabase\n          .from('profiles')\n          .update({ approved: true })\n          .eq('id', id)\n          .eq('role', 'influencer');\n        \n        if (error) {\n          throw error;\n        }\n        \n        // Update local state\n        setInfluencers(prev => prev.map(i => \n          i.id === id ? { ...i, approved: true } : i\n        ));\n      }\n      \n      toast({\n        title: `${type} aprovado`,\n        description: `${type} foi aprovado com sucesso.`,\n      });\n    } catch (error) {\n      console.error('Error approving:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao aprovar. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleReject = async (id: string, type: string) => {\n    try {\n      if (type === \"Profissional\") {\n        const { error } = await supabase\n          .from('profiles')\n          .update({ approved: false })\n          .eq('id', id)\n          .eq('role', 'professional');\n        \n        if (error) {\n          throw error;\n        }\n        \n        // Update local state\n        setProfessionals(prev => prev.map(p => \n          p.id === id ? { ...p, approved: false } : p\n        ));\n      } else if (type === \"Influenciador\") {\n        const { error } = await supabase\n          .from('profiles')\n          .update({ approved: false })\n          .eq('id', id)\n          .eq('role', 'influencer');\n        \n        if (error) {\n          throw error;\n        }\n        \n        // Update local state\n        setInfluencers(prev => prev.map(i => \n          i.id === id ? { ...i, approved: false } : i\n        ));\n      }\n      \n      toast({\n        title: `${type} rejeitado`,\n        description: `${type} foi rejeitado.`,\n      });\n    } catch (error) {\n      console.error('Error rejecting:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao rejeitar. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWithdrawal = (id: string, action: string) => {\n    toast({\n      title: `Saque ${action}`,\n      description: `Solicitação de saque foi ${action}.`,\n    });\n  };\n\n  const handleProfileView = (profile: any, type: string) => {\n    setSelectedProfile({ ...profile, type });\n    setProfileDialogOpen(true);\n  };\n\n  const refreshData = async () => {\n    const currentTime = new Date();\n    setLastRefresh(currentTime);\n    setLoading(true);\n    \n    try {\n      // Recarregar dados do Supabase\n      const [professionalsRes, usersRes, influencersRes] = await Promise.all([\n        supabase.from('profiles').select('*').eq('role', 'professional').order('created_at', { ascending: false }),\n        supabase.from('profiles').select('*').eq('role', 'user').order('created_at', { ascending: false }),\n        supabase.from('profiles').select('*').eq('role', 'influencer').order('created_at', { ascending: false })\n      ]);\n\n      if (professionalsRes.data) {\n        const mappedProfessionals = professionalsRes.data.map(prof => ({\n          id: prof.id,\n          full_name: prof.full_name || 'Nome não informado',\n          email: prof.email || 'Email não informado',\n          category: 'Categoria não informada',\n          location: prof.phone || 'Localização não informada',\n          phone: prof.phone || '',\n          instagram: '',\n          approved: prof.approved || false,\n          created_at: prof.created_at\n        }));\n        setProfessionals(mappedProfessionals);\n      }\n      if (usersRes.data) {\n        const transformedUsers = usersRes.data.map(user => ({\n          id: user.id,\n          name: user.full_name || 'Nome não informado',\n          email: user.email || 'Email não informado',\n          full_name: user.full_name || 'Nome não informado',\n          phone: user.phone || '',\n          created_at: user.created_at,\n          referral_code: user.referral_code || `REF-${user.id.slice(-4).toUpperCase()}`\n        }));\n        setUsers(transformedUsers);\n      }\n      if (influencersRes.data) {\n        const mappedInfluencers = influencersRes.data.map(inf => ({\n          id: inf.id,\n          full_name: inf.full_name || 'Nome não informado',\n          email: inf.email || 'Email não informado',\n          phone: inf.phone || '',\n          instagram: '',\n          followers: '0',\n          approved: inf.approved || false,\n          created_at: inf.created_at\n        }));\n        setInfluencers(mappedInfluencers);\n      }\n\n      toast({\n        title: \"Dados atualizados!\",\n        description: \"Dashboard foi atualizado com os dados mais recentes.\",\n      });\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n      toast({\n        title: \"Erro ao atualizar\",\n        description: \"Não foi possível atualizar os dados.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportData = async () => {\n    try {\n      const headers = [\n        'Tipo',\n        'Nome',\n        'Email',\n        'Telefone',\n        'Status',\n        'Data de Cadastro',\n        'Categoria/Instagram',\n        'Localização/Seguidores'\n      ].join(',');\n\n      const professionalRows = professionals.map(p => [\n        'Profissional',\n        `\"${p.full_name}\"`,\n        p.email,\n        p.phone,\n        p.approved ? 'Aprovado' : 'Pendente',\n        new Date(p.created_at).toLocaleDateString('pt-BR'),\n        p.category,\n        `\"${p.location}\"`\n      ].join(','));\n\n      const userRows = users.map(u => [\n        'Usuário',\n        `\"${u.full_name}\"`,\n        u.email,\n        u.phone || '',\n        'Ativo',\n        new Date(u.created_at).toLocaleDateString('pt-BR'),\n        u.referral_code,\n        ''\n      ].join(','));\n\n      const influencerRows = influencers.map(i => [\n        'Influenciador',\n        `\"${i.full_name}\"`,\n        i.email,\n        i.phone,\n        i.approved ? 'Aprovado' : 'Pendente',\n        new Date(i.created_at).toLocaleDateString('pt-BR'),\n        i.instagram,\n        i.followers\n      ].join(','));\n\n      const csv = [headers, ...professionalRows, ...userRows, ...influencerRows].join('\\n');\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `admin-export-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Exportação concluída!\",\n        description: \"Dados exportados com sucesso para CSV.\",\n      });\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      toast({\n        title: \"Erro na exportação\",\n        description: \"Não foi possível exportar os dados.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Calculate real statistics\n  const stats = {\n    totalProfessionals: professionals.length,\n    pendingProfessionals: professionals.filter(p => !p.approved).length,\n    approvedProfessionals: professionals.filter(p => p.approved).length,\n    totalUsers: users.length,\n    totalInfluencers: influencers.length,\n    pendingInfluencers: influencers.filter(i => !i.approved).length,\n    totalRevenue: 0, // Will be calculated from transactions later\n    pendingWithdrawals: 0, // Will be calculated from withdrawals later\n    monthlyGrowth: \"+15.3%\",\n    approvalRate: professionals.length > 0 ? Math.round((professionals.filter(p => p.approved).length / professionals.length) * 100) : 0,\n    recentRegistrations: [...professionals, ...users, ...influencers]\n      .filter(item => {\n        const itemDate = new Date(item.created_at);\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return itemDate > weekAgo;\n      }).length\n  };\n\n  // Filtros para diferentes seções\n  const filteredProfessionals = professionals.filter(p => {\n    const matchesSearch = p.full_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         p.email.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"pending\" && !p.approved) ||\n                         (statusFilter === \"approved\" && p.approved);\n    return matchesSearch && matchesStatus;\n  });\n\n  const filteredUsers = users.filter(u => \n    u.full_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    u.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const filteredInfluencers = influencers.filter(i => {\n    const matchesSearch = i.full_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         i.email.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"pending\" && !i.approved) ||\n                         (statusFilter === \"approved\" && i.approved);\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-slate-50 to-blue-50\">\n      <Header />\n      \n      <div className=\"flex-1\">\n        <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n          {/* Header Section */}\n          <div className=\"flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Dashboard Administrativo\n              </h1>\n              <p className=\"text-gray-600\">\n                Monitore cadastros, aprove perfis e acompanhe o crescimento da plataforma\n              </p>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <Activity className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm text-gray-500\">\n                  Última atualização: {lastRefresh.toLocaleTimeString('pt-BR')}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input \n                  placeholder=\"Buscar perfis...\" \n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              <Button \n                onClick={refreshData} \n                variant=\"outline\" \n                className=\"flex items-center gap-2\"\n                disabled={loading}\n              >\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\n                Atualizar\n              </Button>\n              <Button \n                onClick={handleExportData}\n                className=\"bg-blue-600 hover:bg-blue-700 flex items-center gap-2\"\n                disabled={loading}\n              >\n                <Download className=\"h-4 w-4\" />\n                Exportar\n              </Button>\n            </div>\n          </div>\n          \n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"border-l-4 border-l-blue-500 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Profissionais</p>\n                    <p className=\"text-3xl font-bold text-blue-600\">{stats.totalProfessionals}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {stats.pendingProfessionals} aguardando aprovação\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-blue-100 rounded-full\">\n                    <Users className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Progress value={stats.approvalRate} className=\"h-2\" />\n                  <p className=\"text-xs text-gray-500 mt-1\">Taxa de aprovação: {stats.approvalRate}%</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-l-4 border-l-green-500 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Total Usuários</p>\n                    <p className=\"text-3xl font-bold text-green-600\">{stats.totalUsers}</p>\n                    <p className=\"text-sm text-gray-500\">Usuários ativos</p>\n                  </div>\n                  <div className=\"p-3 bg-green-100 rounded-full\">\n                    <UserCheck className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-sm text-green-600 font-medium\">{stats.monthlyGrowth}</span>\n                  <span className=\"text-sm text-gray-500 ml-1\">este mês</span>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-l-4 border-l-purple-500 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Influenciadores</p>\n                    <p className=\"text-3xl font-bold text-purple-600\">{stats.totalInfluencers}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      {stats.pendingInfluencers} pendentes\n                    </p>\n                  </div>\n                  <div className=\"p-3 bg-purple-100 rounded-full\">\n                    <Star className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <div className=\"flex items-center\">\n                    <Activity className=\"h-4 w-4 text-purple-500 mr-1\" />\n                    <span className=\"text-sm text-purple-600 font-medium\">Ativos</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"border-l-4 border-l-orange-500 hover:shadow-lg transition-shadow\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Cadastros Recentes</p>\n                    <p className=\"text-3xl font-bold text-orange-600\">{stats.recentRegistrations}</p>\n                    <p className=\"text-sm text-gray-500\">Últimos 7 dias</p>\n                  </div>\n                  <div className=\"p-3 bg-orange-100 rounded-full\">\n                    <Calendar className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <div className=\"flex items-center\">\n                    <Zap className=\"h-4 w-4 text-orange-500 mr-1\" />\n                    <span className=\"text-sm text-orange-600 font-medium\">Crescimento acelerado</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"overview\" onValueChange={setActiveTab} className=\"space-y-6\">\n            <div className=\"border-b\">\n              <TabsList className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-14 h-auto p-1 bg-gray-100\">\n                <TabsTrigger value=\"overview\" className=\"text-sm py-3\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Visão Geral\n                </TabsTrigger>\n                <TabsTrigger value=\"professionals\" className=\"text-sm py-3\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Profissionais\n                </TabsTrigger>\n                <TabsTrigger value=\"users\" className=\"text-sm py-3\">\n                  <UserCheck className=\"h-4 w-4 mr-2\" />\n                  Usuários\n                </TabsTrigger>\n                <TabsTrigger value=\"influencers\" className=\"text-sm py-3\">\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Influenciadores\n                </TabsTrigger>\n                <TabsTrigger value=\"analytics\" className=\"text-sm py-3\">\n                  <Activity className=\"h-4 w-4 mr-2\" />\n                  Analytics\n                </TabsTrigger>\n                <TabsTrigger value=\"monitoring\" className=\"text-sm py-3\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  Monitoramento\n                </TabsTrigger>\n                <TabsTrigger value=\"triggers\" className=\"text-sm py-3\">\n                  <Zap className=\"h-4 w-4 mr-2\" />\n                  Gatilhos\n                </TabsTrigger>\n                <TabsTrigger value=\"materials\" className=\"text-sm py-3\">\n                  <Upload className=\"h-4 w-4 mr-2\" />\n                  Materiais\n                </TabsTrigger>\n                <TabsTrigger value=\"reports\" className=\"text-sm py-3\">\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Relatórios\n                </TabsTrigger>\n                <TabsTrigger value=\"payments\" className=\"text-sm py-3\">\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Pagamentos\n                </TabsTrigger>\n                <TabsTrigger value=\"contemplations\" className=\"text-sm py-3\">\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Contemplações\n                </TabsTrigger>\n                <TabsTrigger value=\"security\" className=\"text-sm py-3\">\n                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                  Segurança\n                </TabsTrigger>\n                <TabsTrigger value=\"tattoo-plans\" className=\"text-sm py-3\" onClick={() => navigate(\"/admin/planos-tatuagem\")}>\n                  <Package className=\"h-4 w-4 mr-2\" />\n                  Planos Tatuagem\n                </TabsTrigger>\n                <TabsTrigger value=\"dental-plans\" className=\"text-sm py-3\" onClick={() => navigate(\"/admin/planos-odontologia\")}>\n                  <Package className=\"h-4 w-4 mr-2\" />\n                  Planos Odontologia\n                </TabsTrigger>\n                <TabsTrigger value=\"user-marketplace\" className=\"text-sm py-3\">\n                  <Store className=\"h-4 w-4 mr-2\" />\n                  Marketplace Usuário\n                </TabsTrigger>\n                <TabsTrigger value=\"professional-marketplace\" className=\"text-sm py-3\">\n                  <Store className=\"h-4 w-4 mr-2\" />\n                  Marketplace Profissional\n                </TabsTrigger>\n                <TabsTrigger value=\"sales\" className=\"text-sm py-3\">\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  Vendas\n                </TabsTrigger>\n                <TabsTrigger value=\"diagnostics\" className=\"text-sm py-3\">\n                  <Activity className=\"h-4 w-4 mr-2\" />\n                  Diagnósticos\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* VISÃO GERAL */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {/* Card de Integração Asaas */}\n              <Card className=\"border-2 border-primary\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5 text-primary\" />\n                    Integração Asaas\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-muted-foreground\">\n                      Configure a integração com a API do Asaas para automação completa de pagamentos e produtos.\n                    </p>\n                    <Button \n                      onClick={() => navigate('/admin/integracao-asaas')}\n                      className=\"w-full\"\n                    >\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Configurar Integração Asaas\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Ações Rápidas - Gestão de Planos */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5 text-primary\" />\n                    Gestão de Planos por Categoria\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Button \n                      onClick={() => navigate(\"/admin/planos-tatuagem\")}\n                      className=\"h-24 flex flex-col items-center justify-center space-y-2 bg-gradient-to-br from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700\"\n                    >\n                      <Package className=\"h-6 w-6\" />\n                      <span className=\"text-sm font-medium\">Planos Tatuagem</span>\n                      <span className=\"text-xs opacity-80\">Gerenciar planos de tatuagem</span>\n                    </Button>\n                    \n                    <Button \n                      onClick={() => navigate(\"/admin/planos-odontologia\")}\n                      className=\"h-24 flex flex-col items-center justify-center space-y-2 bg-gradient-to-br from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700\"\n                    >\n                      <Package className=\"h-6 w-6\" />\n                      <span className=\"text-sm font-medium\">Planos Odontologia</span>\n                      <span className=\"text-xs opacity-80\">Gerenciar planos odontológicos</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Gráfico de Tendência de Cadastros */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5\" />\n                      Tendência de Cadastros (7 dias)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-[300px] flex items-center justify-center bg-gray-50 rounded-lg\">\n                      <div className=\"text-center\">\n                        <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                        <p className=\"text-gray-600\">Gráfico de tendência de cadastros</p>\n                        <div className=\"mt-4 grid grid-cols-3 gap-4 text-sm\">\n                          <div className=\"text-center\">\n                            <div className=\"h-2 w-full bg-blue-200 rounded mb-1\"></div>\n                            <span className=\"text-blue-600\">Profissionais</span>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"h-2 w-full bg-green-200 rounded mb-1\"></div>\n                            <span className=\"text-green-600\">Usuários</span>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"h-2 w-full bg-yellow-200 rounded mb-1\"></div>\n                            <span className=\"text-yellow-600\">Influenciadores</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Distribuição por Categoria */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <PieChartIcon className=\"h-5 w-5\" />\n                      Distribuição de Profissionais por Categoria\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-[300px] flex items-center justify-center bg-gray-50 rounded-lg\">\n                      <div className=\"text-center\">\n                        <PieChartIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-600 mb-4\">Distribuição por categoria</p>\n                        <div className=\"space-y-2 text-sm\">\n                          {categoryStats.map((stat, index) => (\n                            <div key={index} className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-2\">\n                                <div \n                                  className=\"w-3 h-3 rounded-full\" \n                                  style={{ backgroundColor: stat.color }}\n                                ></div>\n                                <span>{stat.name}</span>\n                              </div>\n                              <span className=\"font-medium\">{stat.value}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Ações Pendentes e Atividade Recente */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                      Ações Pendentes\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"p-4 bg-yellow-50 rounded-lg border-l-4 border-yellow-400\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-medium text-yellow-800\">Profissionais Pendentes</p>\n                          <p className=\"text-sm text-yellow-600\">{stats.pendingProfessionals} aguardando aprovação</p>\n                        </div>\n                        <Button size=\"sm\" onClick={() => setActiveTab(\"professionals\")} className=\"bg-yellow-500 hover:bg-yellow-600\">\n                          Revisar\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-4 bg-purple-50 rounded-lg border-l-4 border-purple-400\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-medium text-purple-800\">Influenciadores Pendentes</p>\n                          <p className=\"text-sm text-purple-600\">{stats.pendingInfluencers} aguardando análise</p>\n                        </div>\n                        <Button size=\"sm\" onClick={() => setActiveTab(\"influencers\")} className=\"bg-purple-500 hover:bg-purple-600\">\n                          Analisar\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400\">\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"font-medium text-blue-800\">Novos Cadastros</p>\n                          <p className=\"text-sm text-blue-600\">{stats.recentRegistrations} nos últimos 7 dias</p>\n                        </div>\n                        <Button size=\"sm\" onClick={() => setActiveTab(\"monitoring\")} variant=\"outline\">\n                          Ver Todos\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5 text-green-500\" />\n                      Atividade Recente\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {activityLogs.slice(0, 5).map((log) => (\n                        <div key={log.id} className=\"flex items-start gap-3 p-3 rounded-lg hover:bg-gray-50\">\n                          <div className={`p-2 rounded-full ${\n                            log.type === 'registration' ? 'bg-blue-100' :\n                            log.type === 'approval' ? 'bg-green-100' :\n                            'bg-gray-100'\n                          }`}>\n                            {log.type === 'registration' ? <UserCheck className=\"h-4 w-4 text-blue-600\" /> :\n                             log.type === 'approval' ? <CheckCircle className=\"h-4 w-4 text-green-600\" /> :\n                             <Activity className=\"h-4 w-4 text-gray-600\" />}\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium\">{log.user}</p>\n                            <p className=\"text-sm text-gray-600\">{log.description}</p>\n                            <p className=\"text-xs text-gray-400\">\n                              {new Date(log.timestamp).toLocaleString('pt-BR')}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* PROFISSIONAIS */}\n            <TabsContent value=\"professionals\" className=\"space-y-6\">\n              <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n                <div>\n                  <h2 className=\"text-2xl font-bold\">Gestão de Profissionais</h2>\n                  <p className=\"text-gray-600\">Total: {filteredProfessionals.length} profissionais</p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Filtrar por status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos os Status</SelectItem>\n                      <SelectItem value=\"pending\">Pendentes</SelectItem>\n                      <SelectItem value=\"approved\">Aprovados</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {loading ? (\n                <div className=\"flex justify-center items-center py-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600\" />\n                </div>\n              ) : filteredProfessionals.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-600\">Nenhum profissional encontrado</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                  {filteredProfessionals.map((pro) => (\n                    <Card key={pro.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <CardTitle className=\"text-lg\">{pro.full_name}</CardTitle>\n                            <p className=\"text-sm text-gray-600 capitalize\">{pro.category}</p>\n                          </div>\n                          <Badge variant={pro.approved ? \"default\" : \"secondary\"}>\n                            {pro.approved ? \"Aprovado\" : \"Pendente\"}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-400\">📍</span>\n                            <span>{pro.location}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-400\">📱</span>\n                            <span>{pro.phone}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-400\">📸</span>\n                            <span>@{pro.instagram}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-400\">✉️</span>\n                            <span className=\"text-xs\">{pro.email}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-400\">📅</span>\n                            <span>{new Date(pro.created_at).toLocaleDateString('pt-BR')}</span>\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div className=\"flex gap-2\">\n                          {!pro.approved ? (\n                            <>\n                              <Button \n                                size=\"sm\" \n                                className=\"flex-1 bg-green-600 hover:bg-green-700\" \n                                onClick={() => handleApprove(pro.id, \"Profissional\")}\n                              >\n                                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                Aprovar\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\" \n                                className=\"flex-1 border-red-500 text-red-500 hover:bg-red-50\"\n                                onClick={() => handleReject(pro.id, \"Profissional\")}\n                              >\n                                <UserX className=\"h-4 w-4 mr-2\" />\n                                Rejeitar\n                              </Button>\n                            </>\n                          ) : (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"w-full\"\n                              onClick={() => handleProfileView(pro, 'professional')}\n                            >\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              Ver Detalhes\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n\n            {/* USUÁRIOS */}\n            <TabsContent value=\"users\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\">Gestão de Usuários</h2>\n                <div className=\"text-sm text-gray-600\">\n                  Total: {users.length} usuários\n                </div>\n              </div>\n\n              {loading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-ap-orange mx-auto\" />\n                  <p className=\"mt-2 text-gray-600\">Carregando usuários...</p>\n                </div>\n              ) : users.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-600\">Nenhum usuário cadastrado ainda.</p>\n                </div>\n              ) : (\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full bg-white rounded-lg overflow-hidden shadow-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Nome</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Email</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Telefone</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Código</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Data</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Ações</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {users.map((user) => (\n                      <tr key={user.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">{user.full_name}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{user.email}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{user.phone}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600\">\n                          {user.referral_code}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          {new Date(user.created_at).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\"\n                            onClick={() => handleProfileView(user, 'user')}\n                          >\n                            Ver Perfil\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              )}\n            </TabsContent>\n\n            {/* INFLUENCIADORES */}\n            <TabsContent value=\"influencers\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\">Gestão de Influenciadores</h2>\n                <div className=\"text-sm text-gray-600\">\n                  Total: {influencers.length} influenciadores\n                </div>\n              </div>\n\n              {loading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-ap-orange mx-auto\" />\n                  <p className=\"mt-2 text-gray-600\">Carregando influenciadores...</p>\n                </div>\n              ) : influencers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-600\">Nenhum influenciador cadastrado ainda.</p>\n                </div>\n              ) : (\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {influencers.map((inf) => (\n                  <Card key={inf.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle>{inf.full_name}</CardTitle>\n                          <p className=\"text-sm text-gray-600\">{inf.instagram}</p>\n                        </div>\n                        <Badge variant={inf.approved ? \"default\" : \"secondary\"}>\n                          {inf.approved ? \"Aprovado\" : \"Pendente\"}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"space-y-2 text-sm\">\n                        <p><strong>Seguidores:</strong> {inf.followers}</p>\n                        <p><strong>Email:</strong> {inf.email}</p>\n                        <p><strong>Telefone:</strong> {inf.phone}</p>\n                        <p><strong>Data:</strong> {new Date(inf.created_at).toLocaleDateString('pt-BR')}</p>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        {!inf.approved && (\n                          <>\n                            <Button size=\"sm\" className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                                    onClick={() => handleApprove(inf.id, \"Influenciador\")}>\n                              Aprovar\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"flex-1\"\n                                    onClick={() => handleReject(inf.id, \"Influenciador\")}>\n                              Rejeitar\n                            </Button>\n                          </>\n                        )}\n                        {inf.approved && (\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            onClick={() => handleProfileView(inf, 'influencer')}\n                          >\n                            Ver Detalhes\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n              )}\n            </TabsContent>\n\n            {/* TRANSAÇÕES */}\n            <TabsContent value=\"transactions\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\">Histórico de Transações</h2>\n                <div className=\"flex gap-2\">\n                  <Select>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Tipo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos</SelectItem>\n                      <SelectItem value=\"service\">Serviços</SelectItem>\n                      <SelectItem value=\"commission\">Comissões</SelectItem>\n                      <SelectItem value=\"withdrawal\">Saques</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos</SelectItem>\n                      <SelectItem value=\"completed\">Concluído</SelectItem>\n                      <SelectItem value=\"pending\">Pendente</SelectItem>\n                      <SelectItem value=\"refunded\">Estornado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full bg-white rounded-lg overflow-hidden shadow-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Tipo</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Profissional</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Serviço/Desc</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Valor</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Data</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Status</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Ações</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-gray-200\">\n                    {mockTransactions.map((tx) => (\n                      <tr key={tx.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono\">{tx.id}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant=\"outline\">\n                            {tx.type === \"service\" ? \"Serviço\" : tx.type === \"commission\" ? \"Comissão\" : \"Saque\"}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">{tx.professional}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {tx.service || tx.type}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600\">\n                          R$ {tx.amount.toFixed(2)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(tx.date).toLocaleDateString('pt-BR')}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant={\n                            tx.status === 'completed' ? 'default' : \n                            tx.status === 'pending' ? 'secondary' : \n                            'destructive'\n                          }>\n                            {tx.status === 'completed' ? 'Concluído' : \n                             tx.status === 'pending' ? 'Pendente' : \n                             tx.status === 'refunded' ? 'Estornado' : 'Cancelado'}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          <Button size=\"sm\" variant=\"outline\">Ver</Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </TabsContent>\n\n            {/* SAQUES */}\n            <TabsContent value=\"withdrawals\" className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\">Solicitações de Saque</h2>\n                <div className=\"text-sm text-gray-600\">\n                  {stats.pendingWithdrawals} solicitações pendentes\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {mockWithdrawals.map((withdrawal) => (\n                  <Card key={withdrawal.id}>\n                    <CardContent className=\"p-4 md:p-6\">\n                      <div className=\"space-y-4\">\n                        {/* Header com nome e valor */}\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-medium text-lg\">{withdrawal.professional}</p>\n                            <p className=\"text-sm text-gray-600\">PIX: {withdrawal.pixKey}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold text-xl text-green-600\">R$ {withdrawal.amount.toFixed(2)}</p>\n                            <Badge variant={\n                              withdrawal.status === 'processed' ? 'default' :\n                              withdrawal.status === 'approved' ? 'secondary' :\n                              withdrawal.status === 'pending' ? 'outline' : 'destructive'\n                            }>\n                              {withdrawal.status === 'processed' ? 'Processado' :\n                               withdrawal.status === 'approved' ? 'Aprovado' :\n                               withdrawal.status === 'pending' ? 'Pendente' : 'Rejeitado'}\n                            </Badge>\n                          </div>\n                        </div>\n\n                        {/* Data da solicitação */}\n                        <div className=\"border-t pt-3\">\n                          <p className=\"text-sm text-gray-600\">\n                            Solicitado em: {new Date(withdrawal.requestDate).toLocaleDateString('pt-BR')} às {new Date(withdrawal.requestDate).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}\n                          </p>\n                        </div>\n\n                        {/* Botões de ação */}\n                        <div className=\"border-t pt-4\">\n                          {withdrawal.status === 'pending' && (\n                            <div className=\"flex flex-col sm:flex-row gap-3\">\n                              <Button \n                                className=\"flex-1 bg-green-600 hover:bg-green-700 h-12\"\n                                onClick={() => handleWithdrawal(withdrawal.id, \"aprovado\")}\n                              >\n                                ✅ Aprovar Saque\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                className=\"flex-1 border-red-500 text-red-500 hover:bg-red-50 h-12\"\n                                onClick={() => handleWithdrawal(withdrawal.id, \"rejeitado\")}\n                              >\n                                ❌ Rejeitar\n                              </Button>\n                            </div>\n                          )}\n                          {withdrawal.status === 'approved' && (\n                            <Button \n                              className=\"w-full bg-blue-600 hover:bg-blue-700 h-12\"\n                              onClick={() => handleWithdrawal(withdrawal.id, \"processado\")}\n                            >\n                              💳 Processar PIX Agora\n                            </Button>\n                          )}\n                          {(withdrawal.status === 'processed' || withdrawal.status === 'rejected') && (\n                            <Button variant=\"outline\" className=\"w-full h-12\">\n                              📄 Ver Detalhes Completos\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            {/* ANALYTICS */}\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold\">Analytics e Relatórios</h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Resumo Mensal</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Novos Profissionais:</span>\n                      <span className=\"font-bold\">8</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Novos Usuários:</span>\n                      <span className=\"font-bold\">24</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Serviços Realizados:</span>\n                      <span className=\"font-bold\">12</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Taxa de Conversão:</span>\n                      <span className=\"font-bold text-green-600\">68%</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Top Categorias</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Tatuagens</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-20 h-2 bg-gray-200 rounded\">\n                          <div className=\"w-16 h-2 bg-ap-orange rounded\"></div>\n                        </div>\n                        <span className=\"text-sm\">80%</span>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span>Odontologia</span>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-20 h-2 bg-gray-200 rounded\">\n                          <div className=\"w-10 h-2 bg-ap-light-blue rounded\"></div>\n                        </div>\n                        <span className=\"text-sm\">50%</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Relatórios Disponíveis</CardTitle>\n                </CardHeader>\n                <CardContent className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <Button variant=\"outline\" className=\"h-20 flex-col\">\n                    <span className=\"text-lg mb-1\">📊</span>\n                    Relatório Financeiro\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex-col\">\n                    <span className=\"text-lg mb-1\">👥</span>\n                    Relatório de Usuários\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex-col\">\n                    <span className=\"text-lg mb-1\">⭐</span>\n                    Relatório de Performance\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"h-20 flex-col bg-blue-50 border-blue-200 hover:bg-blue-100\"\n                    onClick={() => window.open('/google-setup', '_blank')}\n                  >\n                    <span className=\"text-lg mb-1\">🔑</span>\n                    <span className=\"text-xs text-center\">Configurar Google OAuth</span>\n                  </Button>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* GATILHOS TEMPORAIS */}\n            <TabsContent value=\"triggers\" className=\"space-y-6\">\n              <NotificationTriggersManager />\n            </TabsContent>\n\n            {/* UPLOAD DE MATERIAIS */}\n            <TabsContent value=\"materials\" className=\"space-y-6\">\n              <MaterialUploadPanel />\n            </TabsContent>\n\n            {/* RELATÓRIOS E ANALYTICS */}\n            <TabsContent value=\"reports\" className=\"space-y-6\">\n              <ReportsAnalytics />\n            </TabsContent>\n\n            {/* GESTÃO DE PAGAMENTOS */}\n            <TabsContent value=\"payments\" className=\"space-y-6\">\n              <PaymentManagement />\n            </TabsContent>\n\n            {/* VALIDAÇÃO DE CONTEMPLAÇÕES */}\n            <TabsContent value=\"contemplations\" className=\"space-y-6\">\n              <ContemplationValidation />\n            </TabsContent>\n\n            {/* DASHBOARD DE SEGURANÇA */}\n            <TabsContent value=\"security\" className=\"space-y-6\">\n              <SecurityDashboard />\n            </TabsContent>\n\n            {/* REMOVIDO - Sistema antigo de planos genéricos */}\n\n            {/* MARKETPLACE USUÁRIO */}\n            <TabsContent value=\"user-marketplace\" className=\"space-y-6\">\n              <UserMarketplaceManager />\n            </TabsContent>\n\n            {/* MARKETPLACE PROFISSIONAL */}\n            <TabsContent value=\"professional-marketplace\" className=\"space-y-6\">\n              <ProfessionalMarketplaceManager />\n            </TabsContent>\n\n            {/* LISTA DE VENDAS */}\n            <TabsContent value=\"sales\" className=\"space-y-6\">\n              <SalesManager />\n            </TabsContent>\n\n            {/* DIAGNÓSTICOS */}\n            <TabsContent value=\"diagnostics\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <EmailDiagnosticTool />\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle>🔧 Ferramentas de Suporte</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"p-4 bg-blue-50 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Como usar:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>• Digite o email do usuário com problema</li>\n                        <li>• Clique em \"Verificar Status\" para ver detalhes</li>\n                        <li>• Se o email não estiver confirmado, use \"Confirmar Email\"</li>\n                        <li>• Peça para o usuário tentar fazer login novamente</li>\n                      </ul>\n                    </div>\n                    \n                    <div className=\"p-4 bg-yellow-50 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">⚠️ Problemas Comuns:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>• <strong>Email não confirmado:</strong> Use a ferramenta de confirmação</li>\n                        <li>• <strong>Usuário não encontrado:</strong> Verifique se fez cadastro</li>\n                        <li>• <strong>Login falha:</strong> Confirmar email resolve na maioria dos casos</li>\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Dialog para visualização de perfis */}\n      <Dialog open={profileDialogOpen} onOpenChange={setProfileDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              Detalhes do {selectedProfile?.type === 'professional' ? 'Profissional' : \n                         selectedProfile?.type === 'influencer' ? 'Influenciador' : 'Usuário'}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedProfile && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <strong>Nome:</strong> {selectedProfile.full_name || selectedProfile.name}\n                </div>\n                <div>\n                  <strong>Email:</strong> {selectedProfile.email}\n                </div>\n                <div>\n                  <strong>Telefone:</strong> {selectedProfile.phone || selectedProfile.telefone || 'N/A'}\n                </div>\n                <div>\n                  <strong>Data de Cadastro:</strong> {new Date(selectedProfile.created_at).toLocaleDateString('pt-BR')}\n                </div>\n                \n                {selectedProfile.type === 'professional' && (\n                  <>\n                    <div>\n                      <strong>Categoria:</strong> {selectedProfile.category}\n                    </div>\n                    <div>\n                      <strong>Localização:</strong> {selectedProfile.location}\n                    </div>\n                    <div>\n                      <strong>Instagram:</strong> @{selectedProfile.instagram}\n                    </div>\n                    <div>\n                      <strong>Status:</strong> {selectedProfile.approved ? 'Aprovado' : 'Pendente'}\n                    </div>\n                  </>\n                )}\n                \n                {selectedProfile.type === 'influencer' && (\n                  <>\n                    <div>\n                      <strong>Instagram:</strong> @{selectedProfile.instagram}\n                    </div>\n                    <div>\n                      <strong>Seguidores:</strong> {selectedProfile.followers}\n                    </div>\n                    <div>\n                      <strong>Status:</strong> {selectedProfile.approved ? 'Aprovado' : 'Pendente'}\n                    </div>\n                  </>\n                )}\n                \n                {selectedProfile.type === 'user' && (\n                  <div>\n                    <strong>Código de Referência:</strong> {selectedProfile.referral_code}\n                  </div>\n                )}\n              </div>\n              \n              {selectedProfile.description && (\n                <div>\n                  <strong>Descrição:</strong>\n                  <p className=\"mt-1 text-sm text-gray-600\">{selectedProfile.description}</p>\n                </div>\n              )}\n              \n              {selectedProfile.experience && (\n                <div>\n                  <strong>Experiência:</strong>\n                  <p className=\"mt-1 text-sm text-gray-600\">{selectedProfile.experience}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminIntegracaoAsaas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminMLM.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminMarketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminNotificacoes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminPagamentos.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminPlanosOdontologia.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminPlanosTatuagem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminProdutos.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminRelatorios.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/AdminUsuarios.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadUsers]","fix":{"range":[1505,1507],"text":"[loadUsers]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, \n  Search, \n  Filter,\n  Eye,\n  Mail,\n  Phone,\n  Calendar,\n  UserCheck,\n  UserX,\n  TrendingUp,\n  Download\n} from \"lucide-react\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface User {\n  id: string;\n  nome: string;\n  email: string;\n  telefone: string;\n  created_at: string;\n  referral_count: number;\n  credits: number;\n  status: 'active' | 'inactive';\n}\n\nexport default function AdminUsuarios() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userDetailsOpen, setUserDetailsOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async () => {\n    try {\n      setLoading(true);\n      \n      // Carregar usuários\n      const { data: usersData, error: usersError } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('role', 'user')\n        .order('created_at', { ascending: false });\n\n      if (usersError) throw usersError;\n\n      // Carregar créditos dos usuários\n      const { data: creditsData } = await supabase\n        .from('user_credits')\n        .select('user_id, total_credits');\n\n      // Para referrals, usar a tabela profiles com referred_by\n      const { data: referralsData } = await supabase\n        .from('profiles')\n        .select('referred_by')\n        .not('referred_by', 'is', null);\n\n      // Combinar dados\n      const usersWithData = (usersData || []).map(user => {\n        const userCredits = creditsData?.find(c => c.user_id === user.user_id);\n        const userReferrals = referralsData?.filter(r => r.referred_by === user.user_id);\n        \n        return {\n          id: user.id,\n          nome: user.full_name || 'Nome não informado',\n          email: user.email || '',\n          telefone: user.phone || '',\n          created_at: user.created_at,\n          referral_count: userReferrals?.length || 0,\n          credits: userCredits?.total_credits || 0,\n          status: 'active' as const\n        };\n      });\n\n      setUsers(usersWithData);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao carregar usuários.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.nome.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || user.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pt-BR');\n  };\n\n  const exportUsers = () => {\n    const csvData = [\n      ['Nome', 'Email', 'Telefone', 'Data Cadastro', 'Indicações', 'Créditos'],\n      ...filteredUsers.map(user => [\n        user.nome,\n        user.email,\n        user.telefone,\n        formatDate(user.created_at),\n        user.referral_count.toString(),\n        user.credits.toString()\n      ])\n    ];\n\n    const csvContent = csvData.map(row => row.join(',')).join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'usuarios.csv';\n    link.click();\n    \n    toast({\n      title: \"Exportação concluída\",\n      description: \"Lista de usuários exportada com sucesso.\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gerenciamento de Usuários</h1>\n          <p className=\"text-muted-foreground\">\n            Visualize e gerencie todos os usuários da plataforma\n          </p>\n        </div>\n        <Button onClick={exportUsers} variant=\"outline\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Exportar CSV\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-full\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Usuários</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{users.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-full\">\n                <UserCheck className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Ativos</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {users.filter(u => u.status === 'active').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-full\">\n                <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Indicações</p>\n                <p className=\"text-2xl font-bold text-orange-600\">\n                  {users.reduce((acc, user) => acc + user.referral_count, 0)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-purple-100 rounded-full\">\n                <Calendar className=\"h-5 w-5 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Novos (7 dias)</p>\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {users.filter(u => {\n                    const userDate = new Date(u.created_at);\n                    const weekAgo = new Date();\n                    weekAgo.setDate(weekAgo.getDate() - 7);\n                    return userDate > weekAgo;\n                  }).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar por nome ou email...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos os status</SelectItem>\n                <SelectItem value=\"active\">Ativos</SelectItem>\n                <SelectItem value=\"inactive\">Inativos</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Lista de Usuários ({filteredUsers.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"mt-2 text-muted-foreground\">Carregando usuários...</p>\n            </div>\n          ) : (\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nome</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Telefone</TableHead>\n                    <TableHead>Data Cadastro</TableHead>\n                    <TableHead>Indicações</TableHead>\n                    <TableHead>Créditos</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8\">\n                        <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                        <p className=\"text-muted-foreground\">Nenhum usuário encontrado</p>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell className=\"font-medium\">{user.nome}</TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>{user.telefone}</TableCell>\n                        <TableCell>{formatDate(user.created_at)}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{user.referral_count}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{user.credits}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={user.status === 'active' ? 'default' : 'secondary'}>\n                            {user.status === 'active' ? 'Ativo' : 'Inativo'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedUser(user);\n                              setUserDetailsOpen(true);\n                            }}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* User Details Dialog */}\n      <Dialog open={userDetailsOpen} onOpenChange={setUserDetailsOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Detalhes do Usuário</DialogTitle>\n            <DialogDescription>\n              Informações detalhadas sobre o usuário selecionado\n            </DialogDescription>\n          </DialogHeader>\n          {selectedUser && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Nome</p>\n                  <p className=\"text-sm\">{selectedUser.nome}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  <Badge variant={selectedUser.status === 'active' ? 'default' : 'secondary'}>\n                    {selectedUser.status === 'active' ? 'Ativo' : 'Inativo'}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-1\">Email</p>\n                <div className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                  <p className=\"text-sm\">{selectedUser.email}</p>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-1\">Telefone</p>\n                <div className=\"flex items-center gap-2\">\n                  <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                  <p className=\"text-sm\">{selectedUser.telefone}</p>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-1\">Data de Cadastro</p>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <p className=\"text-sm\">{formatDate(selectedUser.created_at)}</p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Indicações</p>\n                  <p className=\"text-lg font-bold text-orange-600\">{selectedUser.referral_count}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Créditos</p>\n                  <p className=\"text-lg font-bold text-green-600\">{selectedUser.credits}</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/admin/MLMAdmin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/influencer/InfluencerDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/influencer/InfluencerTools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/pro/ProDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [user, navigate, loadDashboardData]","fix":{"range":[2585,2601],"text":"[user, navigate, loadDashboardData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3844,3847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3844,3847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4101,4104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4101,4104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4530,4533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4530,4533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4726,4729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4726,4729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5153,5156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5153,5156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":195,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":195,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[6474,6487],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6526,6529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6526,6529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6568,6571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6568,6571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport SimpleImageUpload from '@/components/SimpleImageUpload';\nimport { Bell, Camera, Star, Calendar, DollarSign, User, MapPin, CreditCard, Phone, Mail, Instagram } from 'lucide-react';\nimport Header from '@/components/Header';\nimport Footer from '@/components/Footer';\n\ninterface Professional {\n  id: string;\n  name: string;\n  email: string;\n  specialty?: string;\n  location?: string;\n  phone?: string;\n  instagram?: string;\n  bank_data?: any;\n  rating?: number;\n  total_earnings?: number;\n  avatar_url?: string;\n}\n\ninterface Contemplation {\n  id: string;\n  user_id: string;\n  user_name: string;\n  entry_date: string;\n  referral_count: number;\n  service_confirmed: boolean;\n  payment_status: 'pending' | 'released' | 'paid';\n  before_photos?: string[];\n  after_photos?: string[];\n}\n\ninterface ServiceHistory {\n  id: string;\n  client_name: string;\n  service_date: string;\n  amount: number;\n  payment_status: 'pending' | 'released' | 'paid';\n  rating?: number;\n  review?: string;\n}\n\ninterface Notification {\n  id: string;\n  message: string;\n  type: 'contemplation' | 'payment';\n  created_at: string;\n  read: boolean;\n}\n\nconst ProDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  \n  const [professional, setProfessional] = useState<Professional | null>(null);\n  const [contemplations, setContemplations] = useState<Contemplation[]>([]);\n  const [serviceHistory, setServiceHistory] = useState<ServiceHistory[]>([]);\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedContemplation, setSelectedContemplation] = useState<string | null>(null);\n  const [beforePhotos, setBeforePhotos] = useState<string[]>([]);\n  const [afterPhotos, setAfterPhotos] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!user || user.role !== 'professional') {\n      navigate('/profissional/login');\n      return;\n    }\n    loadDashboardData();\n  }, [user, navigate]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load professional data\n      const { data: profData, error: profError } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', user?.id)\n        .eq('role', 'professional')\n        .single();\n\n      if (profError) throw profError;\n      \n      const professionalInfo: Professional = {\n        id: profData.id,\n        name: profData.full_name || user?.name || '',\n        email: profData.email || user?.email || '',\n        specialty: 'Especialidade não informada',\n        location: profData.phone || 'Localização não informada',\n        phone: profData.phone || '',\n        instagram: '',\n        bank_data: null,\n        rating: 0,\n        total_earnings: 0,\n        avatar_url: null\n      };\n      \n      setProfessional(professionalInfo);\n\n      // Carregar contemplations reais\n      const { data: contData } = await supabase\n        .from('contemplations')\n        .select('id, user_id, service_confirmed, payment_status, created_at')\n        .eq('professional_id', user.id)\n        .order('created_at', { ascending: false });\n\n      const formattedContemplations: Contemplation[] = (contData || []).map((c: any) => ({\n        id: c.id,\n        user_id: c.user_id,\n        user_name: 'Cliente',\n        entry_date: c.created_at,\n        referral_count: 9,\n        service_confirmed: !!c.service_confirmed,\n        payment_status: (c.payment_status || 'pending') as any,\n        before_photos: [],\n        after_photos: []\n      }));\n      setContemplations(formattedContemplations);\n\n      // Carregar histórico de serviços\n      const { data: histData } = await supabase\n        .from('service_history')\n        .select('*')\n        .eq('professional_id', user.id)\n        .order('service_date', { ascending: false });\n      const formattedHistory: ServiceHistory[] = (histData || []).map((s: any) => ({\n        id: s.id,\n        client_name: s.client_name,\n        service_date: s.service_date,\n        amount: Number(s.amount),\n        payment_status: (s.payment_status || 'pending') as any,\n        rating: s.rating,\n        review: s.review\n      }));\n      setServiceHistory(formattedHistory);\n\n      // Carregar notificações\n      const { data: notifData } = await supabase\n        .from('professional_notifications')\n        .select('*')\n        .eq('professional_id', user.id)\n        .order('created_at', { ascending: false });\n      const formattedNotifications: Notification[] = (notifData || []).map((n: any) => ({\n        id: n.id,\n        message: n.message,\n        type: n.type,\n        created_at: n.created_at,\n        read: n.read\n      }));\n      setNotifications(formattedNotifications);\n\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast({\n        title: \"Erro ao carregar dados\",\n        description: \"Não foi possível carregar as informações do painel.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConfirmService = async (contemplationId: string) => {\n    try {\n      // Atualiza contemplação e cria histórico\n      const { error: updateError } = await supabase\n        .from('contemplations')\n        .update({ service_confirmed: true, confirmation_date: new Date().toISOString(), payment_status: 'released' })\n        .eq('id', contemplationId);\n      if (updateError) throw updateError;\n\n      // Buscar pagamento gerado para esta contemplação\n      const { data: paymentRow } = await supabase\n        .from('pagamentos_profissionais')\n        .select('id')\n        .eq('contemplation_id', contemplationId)\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single();\n\n      // Chamar edge function para liberar pagamento (redundante, mas mantido para consistência)\n      // @ts-ignore\n      const baseUrl = (import.meta as any).env?.VITE_SUPABASE_URL || (window as any)?.ENV?.VITE_SUPABASE_URL;\n      const response = await fetch(`${baseUrl}/functions/v1/release-professional-payment`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('sb-access-token') || ''}`\n        },\n        body: JSON.stringify({ payment_id: paymentRow?.id || contemplationId, admin_id: user?.id })\n      });\n      if (!response.ok) {\n        console.warn('release-professional-payment failed');\n      }\n\n      toast({\n        title: \"Serviço confirmado!\",\n        description: \"O pagamento foi liberado para sua carteira.\",\n      });\n\n      setSelectedContemplation(null);\n      setBeforePhotos([]);\n      setAfterPhotos([]);\n      loadDashboardData();\n    } catch (error) {\n      console.error('Error confirming service:', error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível confirmar o serviço.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const markNotificationAsRead = async (notificationId: string) => {\n    try {\n      // Mock notification marking since table doesn't exist\n      setNotifications(notifications.filter(n => n.id !== notificationId));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  const averageRating = professional?.rating || 0;\n  const totalEarnings = professional?.total_earnings || 0;\n  const reviewCount = serviceHistory.filter(s => s.rating).length;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Professional Info Header */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row items-start md:items-center gap-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src={professional?.avatar_url} />\n                <AvatarFallback>\n                  {professional?.name?.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1\">\n                <h1 className=\"text-2xl font-bold\">{professional?.name}</h1>\n                <div className=\"flex flex-wrap gap-4 mt-2 text-muted-foreground\">\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"h-4 w-4\" />\n                    <span>{professional?.specialty || 'Especialidade não definida'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{professional?.location || 'Local não definido'}</span>\n                  </div>\n                  {professional?.phone && (\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>{professional.phone}</span>\n                    </div>\n                  )}\n                  {professional?.instagram && (\n                    <div className=\"flex items-center gap-2\">\n                      <Instagram className=\"h-4 w-4\" />\n                      <span>@{professional.instagram}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-4 w-4\" />\n                    <span>{professional?.bank_data ? 'Dados bancários cadastrados' : 'Dados bancários pendentes'}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col items-end gap-2\">\n                <div className=\"flex items-center gap-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`h-4 w-4 ${\n                        i < Math.floor(averageRating)\n                          ? 'text-yellow-400 fill-current'\n                          : 'text-gray-300'\n                      }`}\n                    />\n                  ))}\n                  <span className=\"ml-2 text-sm text-muted-foreground\">\n                    {averageRating.toFixed(1)} ({reviewCount} avaliações)\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"font-semibold\">\n                    R$ {totalEarnings.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Notifications */}\n        {notifications.length > 0 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notificações ({notifications.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {notifications.map((notification) => (\n                  <div\n                    key={notification.id}\n                    className=\"flex items-center justify-between p-3 bg-primary/10 rounded-lg\"\n                  >\n                    <div>\n                      <p className=\"font-medium\">{notification.message}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(notification.created_at).toLocaleDateString('pt-BR')}\n                      </p>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => markNotificationAsRead(notification.id)}\n                    >\n                      Marcar como lida\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"contemplations\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-3\">\n            <TabsTrigger value=\"contemplations\">Contemplações</TabsTrigger>\n            <TabsTrigger value=\"history\">Histórico</TabsTrigger>\n            <TabsTrigger value=\"reviews\">Avaliações</TabsTrigger>\n          </TabsList>\n\n          {/* Contemplations Tab */}\n          <TabsContent value=\"contemplations\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Clientes Contemplados</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {contemplations.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Nenhuma contemplação ainda.\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {contemplations.map((contemplation) => (\n                      <div\n                        key={contemplation.id}\n                        className=\"border rounded-lg p-4 space-y-3\"\n                      >\n                        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                          <div>\n                            <h3 className=\"font-semibold\">{contemplation.user_name}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Contemplado em: {new Date(contemplation.entry_date).toLocaleDateString('pt-BR')}\n                            </p>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                              <Badge variant=\"secondary\">\n                                9/9 Indicações Completas\n                              </Badge>\n                              <Badge\n                                variant={\n                                  contemplation.service_confirmed\n                                    ? 'default'\n                                    : contemplation.payment_status === 'released'\n                                    ? 'secondary'\n                                    : 'outline'\n                                }\n                              >\n                                {contemplation.service_confirmed\n                                  ? 'Serviço Confirmado'\n                                  : contemplation.payment_status === 'released'\n                                  ? 'Liberado para Atendimento'\n                                  : 'Aguardando Liberação'}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {!contemplation.service_confirmed && contemplation.payment_status === 'released' && (\n                            <Button\n                              onClick={() => setSelectedContemplation(contemplation.id)}\n                              className=\"flex items-center gap-2\"\n                            >\n                              <Camera className=\"h-4 w-4\" />\n                              Confirmar Serviço\n                            </Button>\n                          )}\n                        </div>\n\n                        {/* Service confirmation form */}\n                        {selectedContemplation === contemplation.id && (\n                          <div className=\"border-t pt-4 space-y-4\">\n                            <div className=\"grid md:grid-cols-2 gap-4\">\n                              <div>\n                                <h4 className=\"font-medium mb-2\">Fotos do Antes</h4>\n                                <SimpleImageUpload\n                                  onUpload={(url) => setBeforePhotos([...beforePhotos, url])}\n                                  accept=\"image/*\"\n                                  maxFiles={3}\n                                  label=\"Adicionar fotos do antes\"\n                                />\n                                {beforePhotos.length > 0 && (\n                                  <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                                    {beforePhotos.map((photo, index) => (\n                                      <img\n                                        key={index}\n                                        src={photo}\n                                        alt={`Antes ${index + 1}`}\n                                        className=\"w-full h-20 object-cover rounded\"\n                                      />\n                                    ))}\n                                  </div>\n                                )}\n                              </div>\n\n                              <div>\n                                <h4 className=\"font-medium mb-2\">Fotos do Depois</h4>\n                                <SimpleImageUpload\n                                  onUpload={(url) => setAfterPhotos([...afterPhotos, url])}\n                                  accept=\"image/*\"\n                                  maxFiles={3}\n                                  label=\"Adicionar fotos do depois\"\n                                />\n                                {afterPhotos.length > 0 && (\n                                  <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                                    {afterPhotos.map((photo, index) => (\n                                      <img\n                                        key={index}\n                                        src={photo}\n                                        alt={`Depois ${index + 1}`}\n                                        className=\"w-full h-20 object-cover rounded\"\n                                      />\n                                    ))}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n\n                            <div className=\"flex gap-2\">\n                              <Button\n                                onClick={() => handleConfirmService(contemplation.id)}\n                                disabled={beforePhotos.length === 0 || afterPhotos.length === 0}\n                              >\n                                Confirmar Realização\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                onClick={() => {\n                                  setSelectedContemplation(null);\n                                  setBeforePhotos([]);\n                                  setAfterPhotos([]);\n                                }}\n                              >\n                                Cancelar\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Service History Tab */}\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Histórico de Atendimentos</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {serviceHistory.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Nenhum atendimento realizado ainda.\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {serviceHistory.map((service) => (\n                      <div\n                        key={service.id}\n                        className=\"border rounded-lg p-4 flex flex-col md:flex-row md:items-center justify-between gap-4\"\n                      >\n                        <div>\n                          <h3 className=\"font-semibold\">{service.client_name}</h3>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-4 w-4\" />\n                              {new Date(service.service_date).toLocaleDateString('pt-BR')}\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <DollarSign className=\"h-4 w-4\" />\n                              R$ {service.amount.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                            </div>\n                          </div>\n                          {service.rating && (\n                            <div className=\"flex items-center gap-1 mt-2\">\n                              {[...Array(5)].map((_, i) => (\n                                <Star\n                                  key={i}\n                                  className={`h-4 w-4 ${\n                                    i < service.rating!\n                                      ? 'text-yellow-400 fill-current'\n                                      : 'text-gray-300'\n                                  }`}\n                                />\n                              ))}\n                            </div>\n                          )}\n                        </div>\n\n                        <Badge\n                          variant={\n                            service.payment_status === 'paid'\n                              ? 'default'\n                              : service.payment_status === 'released'\n                              ? 'secondary'\n                              : 'outline'\n                          }\n                        >\n                          {service.payment_status === 'paid'\n                            ? 'Pago'\n                            : service.payment_status === 'released'\n                            ? 'Liberado'\n                            : 'Aguardando'}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Reviews Tab */}\n          <TabsContent value=\"reviews\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Avaliações Recebidas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center mb-6\">\n                  <div className=\"text-4xl font-bold text-primary\">\n                    {averageRating.toFixed(1)}\n                  </div>\n                  <div className=\"flex items-center justify-center gap-1 mt-2\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className={`h-6 w-6 ${\n                          i < Math.floor(averageRating)\n                            ? 'text-yellow-400 fill-current'\n                            : 'text-gray-300'\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <p className=\"text-muted-foreground mt-2\">\n                    Baseado em {reviewCount} avaliações\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {serviceHistory\n                    .filter(service => service.review)\n                    .map((service) => (\n                      <div key={service.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium\">{service.client_name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(service.service_date).toLocaleDateString('pt-BR')}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            {[...Array(5)].map((_, i) => (\n                              <Star\n                                key={i}\n                                className={`h-4 w-4 ${\n                                  i < service.rating!\n                                    ? 'text-yellow-400 fill-current'\n                                    : 'text-gray-300'\n                                }`}\n                              />\n                            ))}\n                          </div>\n                        </div>\n                        <p className=\"text-muted-foreground\">{service.review}</p>\n                      </div>\n                    ))}\n                </div>\n\n                {serviceHistory.filter(s => s.review).length === 0 && (\n                  <p className=\"text-center text-muted-foreground py-8\">\n                    Nenhuma avaliação ainda.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default ProDashboard;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/pro/ProFinances.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/pro/ProProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/pro/ProSchedule.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/pro/ProServices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserCredits.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadQuickStats' and 'loadUserData'. Either include them or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadQuickStats, loadUserData, user]","fix":{"range":[1446,1452],"text":"[loadQuickStats, loadUserData, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useCredits } from \"@/hooks/useCredits\";\nimport Header from \"@/components/Header\";\nimport DashboardFooter from \"@/components/DashboardFooter\";\nimport { UserAvatar } from \"@/components/ui/user-avatar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ParticipationDashboard } from \"@/components/user/ParticipationDashboard\";\nimport { GroupDashboard } from \"@/components/user/GroupDashboard\";\nimport { \n  ShoppingCart, \n  Wallet,\n  Target,\n  TrendingUp,\n  Bell\n} from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\n\nconst UserDashboard = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { balance } = useCredits();\n  const [userData, setUserData] = useState({\n    name: user?.name || \"Usuário\",\n    email: user?.email || \"\",\n    joinDate: \"2024-01-10\",\n    totalGroups: 0,\n    activeGroups: 0,\n    contemplatedGroups: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [quickStats, setQuickStats] = useState({\n    activeParticipations: 0,\n    totalReferrals: 0,\n    unreadNotifications: 0\n  });\n\n  useEffect(() => {\n    if (user) {\n      loadUserData();\n      loadQuickStats();\n    }\n  }, [user]);\n\n  const loadUserData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load user participations\n      const { data: participations } = await supabase\n        .from('group_participants')\n        .select(`\n          *,\n          plan_groups(*)\n        `)\n        .eq('user_id', user?.id);\n\n      const totalGroups = participations?.length || 0;\n      const activeGroups = participations?.filter(p => p.status === 'active').length || 0;\n      const contemplatedGroups = participations?.filter(p => p.status === 'contemplated').length || 0;\n\n      setUserData({\n        name: user?.name || \"Usuário\",\n        email: user?.email || \"\",\n        joinDate: \"2024-01-10\",\n        totalGroups,\n        activeGroups,\n        contemplatedGroups\n      });\n    } catch (error) {\n      console.error('Error loading user data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadQuickStats = async () => {\n    try {\n      // Load active participations\n      const { data: activeParticipations } = await supabase\n        .from('group_participants')\n        .select('id')\n        .eq('user_id', user?.id)\n        .eq('status', 'active');\n\n      // Load referrals (using profiles table with referred_by)\n      const { data: referralData } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('referred_by', user?.id);\n\n      // Load unread notifications\n      const { data: notifications } = await supabase\n        .from('notification_triggers')\n        .select('id')\n        .eq('user_id', user?.id)\n        .eq('sent', false);\n\n      setQuickStats({\n        activeParticipations: activeParticipations?.length || 0,\n        totalReferrals: referralData?.length || 0,\n        unreadNotifications: notifications?.length || 0\n      });\n    } catch (error) {\n      console.error('Error loading quick stats:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-ap-orange\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Header com Informações Rápidas */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <UserAvatar size=\"lg\" />\n              <div>\n                <h1 className=\"text-3xl font-bold\">Olá, {userData.name}!</h1>\n                <p className=\"text-muted-foreground\">\n                  Membro desde {userData.joinDate}\n                </p>\n              </div>\n            </div>\n\n            {/* Ações Rápidas */}\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Button \n                onClick={() => navigate('/usuario/marketplace')}\n                className=\"flex items-center gap-2\"\n              >\n                <ShoppingCart className=\"h-4 w-4\" />\n                Marketplace\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => navigate('/plans')}\n                className=\"flex items-center gap-2\"\n              >\n                <Target className=\"h-4 w-4\" />\n                Participar de Plano\n              </Button>\n            </div>\n          </div>\n\n          {/* Cards de Resumo */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-primary/10 rounded-lg\">\n                    <Wallet className=\"h-5 w-5 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Créditos</p>\n                    <p className=\"text-xl font-bold\">\n                      {balance ? formatCurrency(balance.availableCredits) : \"R$ 0,00\"}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Target className=\"h-5 w-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Planos Ativos</p>\n                    <p className=\"text-xl font-bold\">{quickStats.activeParticipations}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Indicações</p>\n                    <p className=\"text-xl font-bold\">{quickStats.totalReferrals}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 bg-orange-100 rounded-lg\">\n                    <Bell className=\"h-5 w-5 text-orange-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Notificações</p>\n                    <p className=\"text-xl font-bold\">{quickStats.unreadNotifications}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Conteúdo Principal do Dashboard */}\n        <div className=\"space-y-6\">\n          <GroupDashboard />\n        </div>\n      </main>\n\n      <DashboardFooter />\n    </div>\n  );\n};\n\nexport default UserDashboard;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserGroups.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserMarketplace.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMarketplaceProducts'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMarketplaceProducts]","fix":{"range":[1669,1671],"text":"[loadMarketplaceProducts]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterProducts'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [filterProducts, products, searchTerm, selectedCategory]","fix":{"range":[1722,1762],"text":"[filterProducts, products, searchTerm, selectedCategory]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCreditsFunction\" is called in function \"handlePurchase\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":136,"column":27,"nodeType":"Identifier","endLine":136,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCredits } from \"@/hooks/useCredits\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wallet, Search, ShoppingCart, Package, Filter, CreditCard } from \"lucide-react\";\nimport { formatCurrency } from \"@/lib/utils\";\n\ninterface MarketplaceProduct {\n  id: string;\n  name: string;\n  description?: string;\n  valor_total: number;\n  category: string;\n  image_url?: string;\n  ativo: boolean;\n  approved: boolean;\n  type?: 'service' | 'product';\n}\n\nconst UserMarketplace = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const creditsHook = useCredits();\n  const { balance, useCredits: useCreditsFunction } = creditsHook;\n  const [products, setProducts] = useState<MarketplaceProduct[]>([]);\n  const [filteredProducts, setFilteredProducts] = useState<MarketplaceProduct[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [categories, setCategories] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadMarketplaceProducts();\n  }, []);\n\n  useEffect(() => {\n    filterProducts();\n  }, [products, searchTerm, selectedCategory]);\n\n  const loadMarketplaceProducts = async () => {\n    try {\n      setLoading(true);\n      \n      // Carregar APENAS produtos reais cadastrados no admin (sem filtro de target_audience)\n      const productsResponse = await supabase\n        .from('products')\n        .select('*')\n        .eq('active', true)\n        .order('created_at', { ascending: false });\n\n      if (productsResponse.error) throw productsResponse.error;\n\n      // Se não há produtos reais, array vazio\n      if (!productsResponse.data || productsResponse.data.length === 0) {\n        setProducts([]);\n        setCategories([]);\n        return;\n      }\n\n      // Transform products to marketplace products format\n      const productItems = productsResponse.data.map(product => ({\n        id: product.id,\n        name: product.name,\n        description: product.description || '',\n        valor_total: product.price,\n        category: product.category || 'Produtos',\n        ativo: product.active,\n        approved: true,\n        image_url: product.image_url,\n        created_at: product.created_at,\n        type: 'product' as const\n      }));\n\n      setProducts(productItems);\n      \n      // Extrair categorias únicas dos produtos reais\n      const uniqueCategories = [...new Set(productItems.map(p => p.category))];\n      setCategories(uniqueCategories);\n      \n    } catch (error) {\n      console.error('Erro ao carregar produtos:', error);\n      toast({\n        title: \"Erro ao carregar produtos reais\",\n        description: \"Não foi possível carregar os produtos cadastrados no sistema.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filterProducts = () => {\n    let filtered = products;\n\n    if (searchTerm) {\n      filtered = filtered.filter(product =>\n        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.description?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedCategory !== \"all\") {\n      filtered = filtered.filter(product => product.category === selectedCategory);\n    }\n\n    setFilteredProducts(filtered);\n  };\n\n  const handlePurchase = async (product: MarketplaceProduct) => {\n    if (!balance) {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível carregar seu saldo.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (balance.availableCredits < product.valor_total) {\n      toast({\n        title: \"Saldo insuficiente\",\n        description: `Você precisa de ${formatCurrency(product.valor_total)} em créditos para este produto.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const success = await useCreditsFunction(\n      product.valor_total,\n      'marketplace_purchase',\n      `Compra no marketplace: ${product.name}`,\n      product.id\n    );\n\n    if (success) {\n      toast({\n        title: \"Compra realizada!\",\n        description: `Você resgatou ${product.name} com sucesso!`,\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary\" />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n                <ShoppingCart className=\"h-8 w-8 text-primary\" />\n                Marketplace de Produtos\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">\n                Use seus créditos para resgatar produtos exclusivos\n              </p>\n            </div>\n            \n            {/* Saldo Display */}\n            <Card className=\"bg-primary/5\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Wallet className=\"h-5 w-5 text-primary\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Seus Créditos</p>\n                    <p className=\"text-2xl font-bold text-primary\">\n                      {formatCurrency(balance?.availableCredits || 0)}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filtros */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar produtos...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full md:w-64\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filtrar por categoria\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas as categorias</SelectItem>\n                {categories.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {filteredProducts.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Package className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Nenhum produto encontrado</h3>\n              <p className=\"text-muted-foreground\">\n                {products.length === 0 \n                  ? \"Nenhum produto foi cadastrado pelos administradores ainda. Apenas produtos reais e aprovados são exibidos no marketplace.\" \n                  : \"Tente ajustar os filtros de busca.\"}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredProducts.map((product) => (\n              <Card key={product.id} className=\"group hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"p-0\">\n                  {product.image_url && (\n                    <div className=\"aspect-square bg-muted rounded-t-lg overflow-hidden\">\n                      <img\n                        src={product.image_url}\n                        alt={product.name}\n                        className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                      />\n                    </div>\n                  )}\n                  {!product.image_url && (\n                    <div className=\"aspect-square bg-muted rounded-t-lg flex items-center justify-center\">\n                      <Package className=\"h-16 w-16 text-muted-foreground\" />\n                    </div>\n                  )}\n                </CardHeader>\n                \n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-3\">\n                    <div>\n                      <h3 className=\"font-semibold line-clamp-2\">{product.name}</h3>\n                      {product.description && (\n                        <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                          {product.description}\n                        </p>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"secondary\">{product.category}</Badge>\n                      <div className=\"text-right\">\n                        <p className=\"text-xl font-bold text-primary\">\n                          {formatCurrency(product.valor_total)}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">em créditos</p>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      onClick={() => handlePurchase(product)}\n                      disabled={!balance || balance.availableCredits < product.valor_total}\n                      className=\"w-full\"\n                    >\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      {(!balance || balance.availableCredits < product.valor_total) \n                        ? \"Saldo insuficiente\" \n                        : \"Resgatar com Créditos\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default UserMarketplace;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserNotifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserPlans.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1047,1050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1047,1050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { PlansDisplay } from \"@/components/user/PlansDisplay\";\nimport { PaymentModal } from \"@/components/PaymentModal\";\nimport { PaymentDebugTool } from \"@/components/PaymentDebugTool\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface Plan {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  max_participants: number;\n  image_url?: string;\n  active: boolean;\n  created_at: string;\n}\n\nconst UserPlans = () => {\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const handleSelectPlan = (plan: Plan) => {\n    console.log('🎯 DIRETO PARA PIX - Plano:', plan.name, 'Preço:', plan.price);\n    setSelectedPlan(plan);\n    setShowPaymentModal(true);\n  };\n\n  const handlePaymentSuccess = (paymentData: any) => {\n    console.log('✅ PIX processado:', paymentData);\n    \n    toast({\n      title: \"PIX Gerado!\",\n      description: `PIX de R$ ${selectedPlan?.price} para \"${selectedPlan?.name}\" está aguardando pagamento.`,\n    });\n\n    // Fechar modal mas manter na tela para ver status\n    setShowPaymentModal(false);\n    setSelectedPlan(null);\n  };\n\n  const handleCloseModal = () => {\n    setShowPaymentModal(false);\n    setSelectedPlan(null);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-slate-50 to-blue-50\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8 space-y-8\">\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-bold text-gray-900\">\n            Nossos Planos de Serviços\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Escolha entre nossos planos de tatuagem e odontologia com as melhores condições\n          </p>\n        </div>\n\n        {/* Ferramenta de Debug Temporária */}\n        <PaymentDebugTool />\n\n        <PlansDisplay \n          category=\"tatuador\" \n          title=\"Planos de Tatuagem\"\n          onSelectPlan={handleSelectPlan}\n        />\n\n        <PlansDisplay \n          category=\"dentista\" \n          title=\"Planos Odontológicos\" \n          onSelectPlan={handleSelectPlan}\n        />\n\n        {/* Modal de Pagamento PIX */}\n        <PaymentModal\n          plan={selectedPlan}\n          isOpen={showPaymentModal}\n          onClose={handleCloseModal}\n          onSuccess={handlePaymentSuccess}\n        />\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default UserPlans;","usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserReferrals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/pages/user/UserWithdrawals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/utils/cpfValidator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/src/utils/performanceOptimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1723,1726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1723,1726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1817,1820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1817,1820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2154,2157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2154,2157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2164,2167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2164,2167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2461,2464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2461,2464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2471,2474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2471,2474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3683,3686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3683,3686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3884,3887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3884,3887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3936,3939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3936,3939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4326,4329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4326,4329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n// Performance optimization utilities\n\n// Console log remover for production\nexport const createLogger = (isDevelopment: boolean) => {\n  if (isDevelopment) {\n    return {\n      log: console.log,\n      warn: console.warn,\n      error: console.error,\n      info: console.info,\n      debug: console.debug\n    };\n  }\n  \n  // Production - only critical errors\n  return {\n    log: () => {},\n    warn: () => {},\n    error: console.error, // Keep critical errors\n    info: () => {},\n    debug: () => {}\n  };\n};\n\n// Timer management for cleanup\nexport class TimerManager {\n  private timers: Set<NodeJS.Timeout> = new Set();\n  private intervals: Set<NodeJS.Timeout> = new Set();\n\n  setTimeout(callback: () => void, delay: number): NodeJS.Timeout {\n    const timer = setTimeout(() => {\n      this.timers.delete(timer);\n      callback();\n    }, delay);\n    \n    this.timers.add(timer);\n    return timer;\n  }\n\n  setInterval(callback: () => void, delay: number): NodeJS.Timeout {\n    const interval = setInterval(callback, delay);\n    this.intervals.add(interval);\n    return interval;\n  }\n\n  clearTimeout(timer: NodeJS.Timeout): void {\n    clearTimeout(timer);\n    this.timers.delete(timer);\n  }\n\n  clearInterval(interval: NodeJS.Timeout): void {\n    clearInterval(interval);\n    this.intervals.delete(interval);\n  }\n\n  cleanup(): void {\n    this.timers.forEach(timer => clearTimeout(timer));\n    this.intervals.forEach(interval => clearInterval(interval));\n    this.timers.clear();\n    this.intervals.clear();\n  }\n}\n\n// Memory leak detector\nexport const detectMemoryLeaks = (componentName: string) => {\n  if (process.env.NODE_ENV !== 'development') return () => {};\n\n  const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n  \n  return () => {\n    const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n    const memoryDiff = finalMemory - initialMemory;\n    \n    if (memoryDiff > 5 * 1024 * 1024) { // 5MB threshold\n      console.warn(`Possible memory leak in ${componentName}: ${(memoryDiff / 1024 / 1024).toFixed(2)}MB`);\n    }\n  };\n};\n\n// Debounce function\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Throttle function\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// Component performance tracker\nexport const performanceTracker = {\n  start: (componentName: string) => {\n    if (process.env.NODE_ENV === 'development') {\n      performance.mark(`${componentName}-start`);\n    }\n  },\n  \n  end: (componentName: string) => {\n    if (process.env.NODE_ENV === 'development') {\n      performance.mark(`${componentName}-end`);\n      performance.measure(\n        `${componentName}-duration`,\n        `${componentName}-start`,\n        `${componentName}-end`\n      );\n      \n      const measure = performance.getEntriesByName(`${componentName}-duration`)[0];\n      if (measure && measure.duration > 16) {\n        console.warn(`Performance warning: ${componentName} took ${measure.duration.toFixed(2)}ms`);\n      }\n    }\n  }\n};\n\n// Bundle size analyzer\nexport const analyzeBundleSize = () => {\n  if (process.env.NODE_ENV === 'development') {\n    // Analyze loaded modules\n    const modules = Object.keys(window as any).filter(key => \n      key.startsWith('__webpack') || key.startsWith('webpackChunk')\n    );\n    \n    console.log('Loaded modules:', modules.length);\n    \n    // Memory usage\n    if ((performance as any).memory) {\n      const memory = (performance as any).memory;\n      console.log('Memory usage:', {\n        used: `${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)}MB`,\n        total: `${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)}MB`,\n        limit: `${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)}MB`\n      });\n    }\n  }\n};\n\n// Lazy component loader with error boundary\nexport const lazyLoad = <T extends React.ComponentType<any>>(\n  importFunc: () => Promise<{ default: T }>,\n  fallback: React.ComponentType = () => React.createElement('div', null, 'Loading...')\n) => {\n  return React.lazy(async () => {\n    try {\n      const module = await importFunc();\n      return module;\n    } catch (error) {\n      console.error('Failed to load component:', error);\n      // Return fallback component on error\n      return { default: fallback as T };\n    }\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/workspace/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/add-user-credits/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/asaas-integration-manager/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2200,2203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2200,2203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3569,3572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3569,3572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4638,4641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4638,4641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4649,4652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4649,4652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6410,6413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6410,6413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9890,9893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9890,9893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10552,10555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10552,10555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[ASAAS-INTEGRATION] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Function started\");\n\n    const { action, ...data } = await req.json();\n    logStep(\"Request data received\", { action });\n\n    // Initialize Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    let result;\n\n    switch (action) {\n      case \"test_connection\":\n        result = await testAsaasConnection(data);\n        break;\n      \n      case \"save_configuration\":\n        result = await saveConfiguration(supabaseClient, data);\n        break;\n      \n      case \"sync_products\":\n        result = await syncProducts(supabaseClient);\n        break;\n      \n      case \"get_integration_status\":\n        result = await getIntegrationStatus(supabaseClient);\n        break;\n      \n      default:\n        throw new Error(`Ação não reconhecida: ${action}`);\n    }\n\n    logStep(\"Operation completed successfully\", result);\n\n    return new Response(JSON.stringify(result), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"ERROR in asaas-integration-manager\", { message: errorMessage });\n    \n    return new Response(JSON.stringify({ \n      success: false, \n      error: errorMessage \n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n\n// Testar conexão com Asaas\nasync function testAsaasConnection(data: any) {\n  logStep(\"Testing Asaas connection\", { environment: data.environment });\n\n  const baseUrl = data.environment === 'production' \n    ? 'https://www.asaas.com/api/v3'\n    : 'https://sandbox.asaas.com/api/v3';\n\n  try {\n    // Teste com endpoint de contas/informações básicas\n    const response = await fetch(`${baseUrl}/myAccount`, {\n      method: 'GET',\n      headers: {\n        'access_token': data.api_key,\n        'Content-Type': 'application/json',\n        'User-Agent': 'Asaas Integration Client 1.0'\n      },\n    });\n\n    logStep(\"API Response received\", { \n      status: response.status, \n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries())\n    });\n\n    if (response.ok) {\n      const accountData = await response.json();\n      logStep(\"Asaas connection successful\", { account: accountData.name || 'Account found' });\n      \n      return {\n        success: true,\n        message: \"Conexão com Asaas estabelecida com sucesso\",\n        account_info: {\n          name: accountData.name || 'Account validated',\n          email: accountData.email || 'N/A',\n          environment: data.environment\n        }\n      };\n    } else {\n      // Tentar ler o erro específico\n      let errorText;\n      try {\n        const errorData = await response.json();\n        errorText = errorData.errors ? errorData.errors.map((e: any) => e.description || e.code).join(', ') : JSON.stringify(errorData);\n      } catch {\n        errorText = await response.text();\n      }\n      \n      logStep(\"API Error details\", { status: response.status, error: errorText });\n      \n      // Tratamento específico para erros de autenticação\n      if (response.status === 401) {\n        throw new Error(`API Key inválida ou expirada. Verifique se a chave está correta para o ambiente ${data.environment}`);\n      } else if (response.status === 403) {\n        throw new Error(`Acesso negado. Verifique as permissões da API Key para o ambiente ${data.environment}`);\n      } else {\n        throw new Error(`Erro na API Asaas: ${response.status} - ${errorText}`);\n      }\n    }\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"Asaas connection failed\", { error: errorMessage });\n    \n    return {\n      success: false,\n      error: `Falha na conexão: ${errorMessage}`\n    };\n  }\n}\n\n// Salvar configuração\nasync function saveConfiguration(supabaseClient: any, data: any) {\n  logStep(\"Saving configuration\", { environment: data.environment });\n\n  try {\n    // Criptografar a API key (simulação básica - em produção usar crypto adequado)\n    const apiKeyEncrypted = btoa(data.api_key);\n\n    // Verificar se já existe configuração\n    const { data: existing } = await supabaseClient\n      .from('asaas_integration')\n      .select('id')\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .maybeSingle();\n\n    const configData = {\n      api_key_encrypted: apiKeyEncrypted,\n      environment: data.environment,\n      status: 'active',\n      connection_status: 'connected',\n      error_message: null,\n      updated_at: new Date().toISOString()\n    };\n\n    let result;\n    if (existing) {\n      // Atualizar configuração existente\n      result = await supabaseClient\n        .from('asaas_integration')\n        .update(configData)\n        .eq('id', existing.id)\n        .select()\n        .single();\n    } else {\n      // Criar nova configuração\n      result = await supabaseClient\n        .from('asaas_integration')\n        .insert({\n          ...configData,\n          created_at: new Date().toISOString()\n        })\n        .select()\n        .single();\n    }\n\n    if (result.error) {\n      throw new Error(`Erro ao salvar configuração: ${result.error.message}`);\n    }\n\n    return {\n      success: true,\n      message: \"Configuração salva com sucesso\",\n      integration_id: result.data.id\n    };\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"Error saving configuration\", { error: errorMessage });\n    \n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n}\n\n// Sincronizar produtos\nasync function syncProducts(supabaseClient: any) {\n  logStep(\"Starting product sync\");\n\n  try {\n    // Buscar configuração ativa\n    const { data: integration, error: integrationError } = await supabaseClient\n      .from('asaas_integration')\n      .select('*')\n      .eq('status', 'active')\n      .eq('connection_status', 'connected')\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .maybeSingle();\n\n    if (integrationError || !integration) {\n      throw new Error(\"Nenhuma integração ativa encontrada\");\n    }\n\n    // Descriptografar API key\n    const apiKey = atob(integration.api_key_encrypted);\n    const baseUrl = integration.environment === 'production' \n      ? 'https://www.asaas.com/api/v3'\n      : 'https://sandbox.asaas.com/api/v3';\n\n    // Buscar produtos que precisam ser sincronizados\n    const { data: products } = await supabaseClient\n      .from('products')\n      .select('*')\n      .eq('active', true)\n      .is('asaas_product_id', null);\n\n    const { data: customPlans } = await supabaseClient\n      .from('custom_plans')\n      .select('*')\n      .eq('active', true)\n      .is('asaas_product_id', null);\n\n    let syncedCount = 0;\n\n    // Sincronizar produtos\n    if (products) {\n      for (const product of products) {\n        try {\n          const asaasProduct = await createAsaasProduct(baseUrl, apiKey, {\n            name: product.name,\n            description: product.description,\n            value: product.price,\n            type: 'INSTALLMENT'\n          });\n\n          if (asaasProduct.id) {\n            await supabaseClient\n              .from('products')\n              .update({ asaas_product_id: asaasProduct.id })\n              .eq('id', product.id);\n\n            syncedCount++;\n            logStep(\"Product synced\", { productId: product.id, asaasId: asaasProduct.id });\n          }\n        } catch (error) {\n          logStep(\"Error syncing product\", { productId: product.id, error: error.message });\n        }\n      }\n    }\n\n    // Sincronizar planos customizados\n    if (customPlans) {\n      for (const plan of customPlans) {\n        try {\n          const asaasPlan = await createAsaasProduct(baseUrl, apiKey, {\n            name: plan.name,\n            description: plan.description,\n            value: plan.price,\n            type: 'INSTALLMENT'\n          });\n\n          if (asaasPlan.id) {\n            await supabaseClient\n              .from('custom_plans')\n              .update({ asaas_product_id: asaasPlan.id })\n              .eq('id', plan.id);\n\n            syncedCount++;\n            logStep(\"Plan synced\", { planId: plan.id, asaasId: asaasPlan.id });\n          }\n        } catch (error) {\n          logStep(\"Error syncing plan\", { planId: plan.id, error: error.message });\n        }\n      }\n    }\n\n    // Atualizar timestamp da última sincronização\n    await supabaseClient\n      .from('asaas_integration')\n      .update({ \n        last_sync_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', integration.id);\n\n    return {\n      success: true,\n      message: `Sincronização concluída: ${syncedCount} itens sincronizados`,\n      synced: syncedCount\n    };\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"Error in product sync\", { error: errorMessage });\n    \n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n}\n\n// Criar produto no Asaas\nasync function createAsaasProduct(baseUrl: string, apiKey: string, productData: any) {\n  const response = await fetch(`${baseUrl}/subscriptions`, {\n    method: 'POST',\n    headers: {\n      'access_token': apiKey,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      billingType: 'BOLETO',\n      cycle: 'MONTHLY',\n      name: productData.name,\n      description: productData.description,\n      value: productData.value\n    }),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Erro ao criar produto no Asaas: ${response.status} - ${errorText}`);\n  }\n\n  return await response.json();\n}\n\n// Buscar status da integração\nasync function getIntegrationStatus(supabaseClient: any) {\n  logStep(\"Getting integration status\");\n\n  try {\n    const { data, error } = await supabaseClient\n      .from('asaas_integration')\n      .select('*')\n      .order('created_at', { ascending: false })\n      .limit(1)\n      .maybeSingle();\n\n    if (error && error.code !== 'PGRST116') {\n      throw error;\n    }\n\n    return {\n      success: true,\n      integration: data\n    };\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"Error getting integration status\", { error: errorMessage });\n    \n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/asaas-split-manager/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2633,2636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2633,2636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2644,2647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2644,2647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3378,3381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3378,3381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3389,3392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3389,3392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4084,4087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4084,4087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4095,4098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4095,4098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4697,4700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4697,4700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4716,4719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4716,4719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7559,7562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7559,7562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7570,7573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7570,7573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[ASAAS-SPLIT-MANAGER] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Function started\");\n\n    const { action, ...data } = await req.json();\n    logStep(\"Request data received\", { action });\n\n    // Initialize Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    // ASAAS API configuration\n    const asaasApiKey = Deno.env.get(\"ASAAS_API_KEY\");\n    if (!asaasApiKey) {\n      throw new Error(\"ASAAS_API_KEY não configurada\");\n    }\n\n    const asaasHeaders = {\n      \"access_token\": asaasApiKey,\n      \"Content-Type\": \"application/json\",\n    };\n\n    let result;\n\n    switch (action) {\n      case \"create_split_rule\":\n        result = await createSplitRule(supabaseClient, data);\n        break;\n      \n      case \"update_split_rule\":\n        result = await updateSplitRule(supabaseClient, data);\n        break;\n      \n      case \"get_split_rules\":\n        result = await getSplitRules(supabaseClient, data);\n        break;\n      \n      case \"process_pending_splits\":\n        result = await processPendingSplits(supabaseClient, asaasHeaders);\n        break;\n      \n      case \"get_split_history\":\n        result = await getSplitHistory(supabaseClient, data);\n        break;\n      \n      default:\n        throw new Error(`Ação não reconhecida: ${action}`);\n    }\n\n    logStep(\"Operation completed successfully\", result);\n\n    return new Response(JSON.stringify(result), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"ERROR in asaas-split-manager\", { message: errorMessage });\n    \n    return new Response(JSON.stringify({ \n      success: false, \n      error: errorMessage \n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n\n// Criar regra de split\nasync function createSplitRule(supabaseClient: any, data: any) {\n  logStep(\"Creating split rule\", data);\n\n  const { error } = await supabaseClient\n    .from(\"payment_split_rules\")\n    .insert({\n      product_id: data.product_id || null,\n      service_id: data.service_id || null,\n      professional_percentage: data.professional_percentage || 70.0,\n      platform_percentage: data.platform_percentage || 20.0,\n      influencer_percentage: data.influencer_percentage || 10.0,\n      fixed_platform_fee: data.fixed_platform_fee || 0\n    });\n\n  if (error) {\n    throw new Error(`Erro ao criar regra de split: ${error.message}`);\n  }\n\n  return {\n    success: true,\n    message: \"Regra de split criada com sucesso\"\n  };\n}\n\n// Atualizar regra de split\nasync function updateSplitRule(supabaseClient: any, data: any) {\n  logStep(\"Updating split rule\", data);\n\n  const { error } = await supabaseClient\n    .from(\"payment_split_rules\")\n    .update({\n      professional_percentage: data.professional_percentage,\n      platform_percentage: data.platform_percentage,\n      influencer_percentage: data.influencer_percentage,\n      fixed_platform_fee: data.fixed_platform_fee,\n      updated_at: new Date().toISOString()\n    })\n    .eq(\"id\", data.rule_id);\n\n  if (error) {\n    throw new Error(`Erro ao atualizar regra de split: ${error.message}`);\n  }\n\n  return {\n    success: true,\n    message: \"Regra de split atualizada com sucesso\"\n  };\n}\n\n// Buscar regras de split\nasync function getSplitRules(supabaseClient: any, data: any) {\n  logStep(\"Getting split rules\", data);\n\n  let query = supabaseClient\n    .from(\"payment_split_rules\")\n    .select(\"*\");\n\n  if (data.product_id) {\n    query = query.eq(\"product_id\", data.product_id);\n  }\n\n  if (data.service_id) {\n    query = query.eq(\"service_id\", data.service_id);\n  }\n\n  const { data: rules, error } = await query;\n\n  if (error) {\n    throw new Error(`Erro ao buscar regras de split: ${error.message}`);\n  }\n\n  return {\n    success: true,\n    rules: rules || []\n  };\n}\n\n// Processar splits pendentes (função administrativa)\nasync function processPendingSplits(supabaseClient: any, asaasHeaders: any) {\n  logStep(\"Processing pending splits\");\n\n  // Buscar splits não executados onde o pagamento foi confirmado\n  const { data: pendingSplits, error: splitsError } = await supabaseClient\n    .from(\"payment_splits\")\n    .select(`\n      *,\n      payments!inner(status, stripe_session_id),\n      professionals(id),\n      asaas_subaccounts!inner(asaas_account_id, status, verification_status)\n    `)\n    .eq(\"split_executed\", false)\n    .eq(\"payments.status\", \"paid\")\n    .eq(\"asaas_subaccounts.status\", \"active\")\n    .eq(\"asaas_subaccounts.verification_status\", \"approved\");\n\n  if (splitsError) {\n    throw new Error(`Erro ao buscar splits pendentes: ${splitsError.message}`);\n  }\n\n  if (!pendingSplits || pendingSplits.length === 0) {\n    return {\n      success: true,\n      message: \"Nenhum split pendente encontrado\",\n      processed: 0\n    };\n  }\n\n  let processed = 0;\n  const errors: string[] = [];\n\n  for (const split of pendingSplits) {\n    try {\n      logStep(\"Processing split\", { splitId: split.id, asaasPaymentId: split.asaas_payment_id });\n\n      // Executar transferência no ASAAS\n      const transferPayload = {\n        value: split.professional_amount,\n        targetWalletId: split.asaas_subaccounts.asaas_account_id,\n        description: `Split de pagamento ${split.asaas_payment_id}`\n      };\n\n      const transferResponse = await fetch(\"https://www.asaas.com/api/v3/transfers\", {\n        method: \"POST\",\n        headers: asaasHeaders,\n        body: JSON.stringify(transferPayload),\n      });\n\n      if (transferResponse.ok) {\n        // Marcar split como executado\n        await supabaseClient\n          .from(\"payment_splits\")\n          .update({\n            split_executed: true,\n            split_executed_at: new Date().toISOString()\n          })\n          .eq(\"id\", split.id);\n\n        processed++;\n        logStep(\"Split executed successfully\", { splitId: split.id });\n      } else {\n        const errorText = await transferResponse.text();\n        const error = `Erro na transferência ASAAS: ${errorText}`;\n        \n        await supabaseClient\n          .from(\"payment_splits\")\n          .update({\n            split_error: error\n          })\n          .eq(\"id\", split.id);\n\n        errors.push(`Split ${split.id}: ${error}`);\n        logStep(\"Split execution failed\", { splitId: split.id, error });\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      errors.push(`Split ${split.id}: ${errorMessage}`);\n      logStep(\"Split execution error\", { splitId: split.id, error: errorMessage });\n    }\n  }\n\n  return {\n    success: true,\n    message: `Processamento concluído: ${processed} splits executados`,\n    processed,\n    errors: errors.length > 0 ? errors : undefined\n  };\n}\n\n// Buscar histórico de splits\nasync function getSplitHistory(supabaseClient: any, data: any) {\n  logStep(\"Getting split history\", data);\n\n  let query = supabaseClient\n    .from(\"payment_splits\")\n    .select(`\n      *,\n      payments(id, amount, status, created_at),\n      professionals(full_name, email)\n    `)\n    .order(\"created_at\", { ascending: false });\n\n  if (data.professional_id) {\n    query = query.eq(\"professional_id\", data.professional_id);\n  }\n\n  if (data.limit) {\n    query = query.limit(data.limit);\n  }\n\n  const { data: splits, error } = await query;\n\n  if (error) {\n    throw new Error(`Erro ao buscar histórico de splits: ${error.message}`);\n  }\n\n  return {\n    success: true,\n    splits: splits || []\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/asaas-subaccount-manager/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[340,343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[340,343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3127,3130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3127,3130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3154,3157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3154,3157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3173,3176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3173,3176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6597,6600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6597,6600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6624,6627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6624,6627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6643,6646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6643,6646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8148,8151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8148,8151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9025,9028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9025,9028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9971,9974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9971,9974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9998,10001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9998,10001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":314,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10017,10020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10017,10020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[ASAAS-SUBACCOUNT] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Function started\");\n\n    const { action, ...data } = await req.json();\n    logStep(\"Request data received\", { action, dataKeys: Object.keys(data) });\n\n    // Initialize Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    // Get authenticated user\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) throw new Error(\"No authorization header provided\");\n    \n    const token = authHeader.replace(\"Bearer \", \"\");\n    const { data: userData, error: userError } = await supabaseClient.auth.getUser(token);\n    if (userError) throw new Error(`Authentication error: ${userError.message}`);\n    \n    const user = userData.user;\n    logStep(\"User authenticated\", { userId: user.id });\n\n    // ASAAS API configuration\n    const asaasApiKey = Deno.env.get(\"ASAAS_API_KEY\");\n    if (!asaasApiKey) {\n      throw new Error(\"ASAAS_API_KEY não configurada\");\n    }\n\n    const asaasHeaders = {\n      \"access_token\": asaasApiKey,\n      \"Content-Type\": \"application/json\",\n    };\n\n    let result;\n\n    switch (action) {\n      case \"create_subaccount\":\n        result = await createSubaccount(supabaseClient, user.id, data, asaasHeaders);\n        break;\n      \n      case \"update_subaccount\":\n        result = await updateSubaccount(supabaseClient, user.id, data, asaasHeaders);\n        break;\n      \n      case \"get_subaccount_status\":\n        result = await getSubaccountStatus(supabaseClient, user.id, data.professional_id);\n        break;\n      \n      case \"upload_documents\":\n        result = await uploadDocuments(supabaseClient, user.id, data, asaasHeaders);\n        break;\n      \n      default:\n        throw new Error(`Ação não reconhecida: ${action}`);\n    }\n\n    logStep(\"Operation completed successfully\", result);\n\n    return new Response(JSON.stringify(result), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"ERROR in asaas-subaccount-manager\", { message: errorMessage });\n    \n    return new Response(JSON.stringify({ \n      success: false, \n      error: errorMessage \n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});\n\n// Criar subconta no ASAAS\nasync function createSubaccount(supabaseClient: any, userId: string, data: any, asaasHeaders: any) {\n  logStep(\"Creating ASAAS subaccount\", data);\n\n  // Verificar se o usuário é o dono do profissional\n  const { data: professional, error: profError } = await supabaseClient\n    .from(\"professionals\")\n    .select(\"*\")\n    .eq(\"id\", data.professional_id)\n    .eq(\"user_id\", userId)\n    .single();\n\n  if (profError || !professional) {\n    throw new Error(\"Profissional não encontrado ou acesso negado\");\n  }\n\n  // Verificar se já existe subconta\n  const { data: existingSubaccount } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .select(\"*\")\n    .eq(\"professional_id\", data.professional_id)\n    .single();\n\n  if (existingSubaccount) {\n    throw new Error(\"Subconta já existe para este profissional\");\n  }\n\n  // Payload para criação da subconta no ASAAS\n  const asaasPayload = {\n    name: data.name,\n    email: data.email,\n    cpfCnpj: data.cpf_cnpj.replace(/[^0-9]/g, ''),\n    phone: data.phone.replace(/[^0-9]/g, ''),\n    mobilePhone: data.phone.replace(/[^0-9]/g, ''),\n    address: data.address_street,\n    addressNumber: data.address_number,\n    complement: data.address_complement || \"\",\n    province: data.address_district,\n    city: data.address_city,\n    state: data.address_state,\n    postalCode: data.address_postal_code.replace(/[^0-9]/g, ''),\n    birthDate: data.birth_date,\n    companyType: data.company_type || null\n  };\n\n  logStep(\"Sending to ASAAS API\", asaasPayload);\n\n  // Criar subconta no ASAAS\n  const asaasResponse = await fetch(\"https://www.asaas.com/api/v3/accounts\", {\n    method: \"POST\",\n    headers: asaasHeaders,\n    body: JSON.stringify(asaasPayload),\n  });\n\n  if (!asaasResponse.ok) {\n    const errorText = await asaasResponse.text();\n    logStep(\"ASAAS API error\", { status: asaasResponse.status, error: errorText });\n    throw new Error(`Erro na API ASAAS: ${asaasResponse.status} - ${errorText}`);\n  }\n\n  const asaasData = await asaasResponse.json();\n  logStep(\"ASAAS subaccount created\", asaasData);\n\n  // Salvar subconta no banco de dados\n  const { data: subaccount, error: subaccountError } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .insert({\n      professional_id: data.professional_id,\n      asaas_account_id: asaasData.id,\n      status: asaasData.status || 'pending',\n      cpf_cnpj: data.cpf_cnpj,\n      name: data.name,\n      email: data.email,\n      phone: data.phone,\n      birth_date: data.birth_date,\n      company_type: data.company_type,\n      address_street: data.address_street,\n      address_number: data.address_number,\n      address_complement: data.address_complement,\n      address_district: data.address_district,\n      address_city: data.address_city,\n      address_state: data.address_state,\n      address_postal_code: data.address_postal_code,\n      bank_account_type: data.bank_account_type,\n      bank_code: data.bank_code,\n      bank_account_number: data.bank_account_number,\n      bank_account_digit: data.bank_account_digit,\n      bank_agency: data.bank_agency,\n      pix_key: data.pix_key\n    })\n    .select()\n    .single();\n\n  if (subaccountError) {\n    logStep(\"Error saving subaccount\", subaccountError);\n    throw new Error(\"Erro ao salvar subconta no banco de dados\");\n  }\n\n  return {\n    success: true,\n    subaccount_id: subaccount.id,\n    asaas_account_id: asaasData.id,\n    status: asaasData.status,\n    message: \"Subconta criada com sucesso\"\n  };\n}\n\n// Atualizar subconta\nasync function updateSubaccount(supabaseClient: any, userId: string, data: any, asaasHeaders: any) {\n  logStep(\"Updating ASAAS subaccount\", data);\n\n  // Verificar se o usuário é o dono da subconta\n  const { data: subaccount, error: subaccountError } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .select(\"*, professionals!inner(user_id)\")\n    .eq(\"id\", data.subaccount_id)\n    .single();\n\n  if (subaccountError || !subaccount || subaccount.professionals.user_id !== userId) {\n    throw new Error(\"Subconta não encontrada ou acesso negado\");\n  }\n\n  // Atualizar dados bancários no ASAAS se fornecidos\n  if (data.bank_data) {\n    const bankPayload = {\n      bankAccount: {\n        bank: {\n          code: data.bank_data.bank_code\n        },\n        accountName: subaccount.name,\n        ownerName: subaccount.name,\n        ownerBirthDate: subaccount.birth_date,\n        cpfCnpj: subaccount.cpf_cnpj.replace(/[^0-9]/g, ''),\n        agency: data.bank_data.bank_agency,\n        account: data.bank_data.bank_account_number,\n        accountDigit: data.bank_data.bank_account_digit,\n        bankAccountType: data.bank_data.bank_account_type\n      }\n    };\n\n    const bankResponse = await fetch(`https://www.asaas.com/api/v3/accounts/${subaccount.asaas_account_id}/bankAccount`, {\n      method: \"POST\",\n      headers: asaasHeaders,\n      body: JSON.stringify(bankPayload),\n    });\n\n    if (!bankResponse.ok) {\n      const errorText = await bankResponse.text();\n      throw new Error(`Erro ao atualizar dados bancários: ${errorText}`);\n    }\n  }\n\n  // Atualizar no banco local\n  const updateData: any = {\n    updated_at: new Date().toISOString()\n  };\n\n  if (data.bank_data) {\n    updateData.bank_account_type = data.bank_data.bank_account_type;\n    updateData.bank_code = data.bank_data.bank_code;\n    updateData.bank_account_number = data.bank_data.bank_account_number;\n    updateData.bank_account_digit = data.bank_data.bank_account_digit;\n    updateData.bank_agency = data.bank_data.bank_agency;\n  }\n\n  if (data.pix_key) {\n    updateData.pix_key = data.pix_key;\n  }\n\n  const { error: updateError } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .update(updateData)\n    .eq(\"id\", data.subaccount_id);\n\n  if (updateError) {\n    throw new Error(\"Erro ao atualizar subconta no banco de dados\");\n  }\n\n  return {\n    success: true,\n    message: \"Subconta atualizada com sucesso\"\n  };\n}\n\n// Obter status da subconta\nasync function getSubaccountStatus(supabaseClient: any, userId: string, professionalId: string) {\n  const { data: subaccount, error } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .select(\"*, professionals!inner(user_id)\")\n    .eq(\"professional_id\", professionalId)\n    .single();\n\n  if (error || !subaccount) {\n    return {\n      success: true,\n      exists: false,\n      message: \"Subconta não encontrada\"\n    };\n  }\n\n  if (subaccount.professionals.user_id !== userId) {\n    throw new Error(\"Acesso negado\");\n  }\n\n  return {\n    success: true,\n    exists: true,\n    status: subaccount.status,\n    verification_status: subaccount.verification_status,\n    kyc_completed: subaccount.kyc_completed,\n    documents_uploaded: subaccount.documents_uploaded,\n    can_receive_payments: subaccount.status === 'active' && subaccount.verification_status === 'approved'\n  };\n}\n\n// Upload de documentos (placeholder - implementar conforme necessário)\nasync function uploadDocuments(supabaseClient: any, userId: string, data: any, asaasHeaders: any) {\n  // Esta função seria implementada para fazer upload de documentos para o ASAAS\n  // Por enquanto, apenas marcar como documentos enviados\n  \n  const { error } = await supabaseClient\n    .from(\"asaas_subaccounts\")\n    .update({\n      documents_uploaded: true,\n      updated_at: new Date().toISOString()\n    })\n    .eq(\"id\", data.subaccount_id);\n\n  if (error) {\n    throw new Error(\"Erro ao atualizar status dos documentos\");\n  }\n\n  return {\n    success: true,\n    message: \"Documentos marcados como enviados\"\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/asaas-webhook/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/auto-confirm-email/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/check-email-status/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/confirm-mlm-payment/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":175,"column":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[CONFIRM-MLM-PAYMENT] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Iniciando confirmação de pagamento MLM\");\n\n    const { session_id } = await req.json();\n    if (!session_id) throw new Error(\"session_id é obrigatório\");\n\n    logStep(\"Session ID recebido\", { session_id });\n\n    // Initialize clients\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    const stripe = new Stripe(Deno.env.get(\"STRIPE_SECRET_KEY\") || \"\", {\n      apiVersion: \"2023-10-16\",\n    });\n\n    // Get Stripe session details\n    const session = await stripe.checkout.sessions.retrieve(session_id);\n    logStep(\"Stripe session recuperada\", { \n      status: session.payment_status,\n      metadata: session.metadata \n    });\n\n    if (session.payment_status !== 'paid') {\n      throw new Error(\"Pagamento não foi confirmado\");\n    }\n\n    const { \n      user_id, \n      product_id, \n      group_id, \n      referral_code,\n      is_group_creator \n    } = session.metadata || {};\n\n    if (!user_id || !product_id || !group_id) {\n      throw new Error(\"Metadados incompletos na sessão do Stripe\");\n    }\n\n    logStep(\"Processando confirmação\", {\n      user_id,\n      product_id,\n      group_id,\n      is_group_creator: is_group_creator === 'true'\n    });\n\n    // Update purchase status\n    const { error: purchaseUpdateError } = await supabase\n      .from(\"user_purchases\")\n      .update({\n        status: 'completed',\n        stripe_payment_intent_id: session.payment_intent,\n        updated_at: new Date().toISOString()\n      })\n      .eq(\"stripe_session_id\", session_id);\n\n    if (purchaseUpdateError) {\n      logStep(\"Erro ao atualizar purchase\", purchaseUpdateError);\n      throw purchaseUpdateError;\n    }\n\n    // Get current group details\n    const { data: group, error: groupError } = await supabase\n      .from(\"groups\")\n      .select(\"*\")\n      .eq(\"id\", group_id)\n      .single();\n\n    if (groupError || !group) {\n      throw new Error(\"Grupo não encontrado\");\n    }\n\n    // Check if user is already a member\n    const { data: existingMember } = await supabase\n      .from(\"group_members\")\n      .select(\"*\")\n      .eq(\"group_id\", group_id)\n      .eq(\"user_id\", user_id)\n      .single();\n\n    if (existingMember) {\n      logStep(\"Usuário já é membro do grupo\", { existingMember });\n      return new Response(JSON.stringify({\n        success: true,\n        message: \"Usuário já é membro do grupo\",\n        group_id: group_id\n      }), {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 200,\n      });\n    }\n\n    // Add user to group\n    const position = group.current_count;\n    const isCreator = is_group_creator === 'true';\n    \n    const { error: memberError } = await supabase\n      .from(\"group_members\")\n      .insert({\n        group_id: group_id,\n        user_id: user_id,\n        referred_by: isCreator ? null : group.buyer_id,\n        position: position,\n        payment_id: session.payment_intent\n      });\n\n    if (memberError) {\n      logStep(\"Erro ao adicionar membro\", memberError);\n      throw memberError;\n    }\n\n    logStep(\"Membro adicionado ao grupo\", { \n      user_id, \n      group_id, \n      position \n    });\n\n    // If there was a referral, confirm it and update commission\n    if (referral_code && !isCreator) {\n      const { error: referralUpdateError } = await supabase\n        .from(\"referrals\")\n        .update({\n          status: 'confirmed',\n          confirmed_at: new Date().toISOString()\n        })\n        .eq(\"referral_code\", referral_code)\n        .eq(\"referred_id\", user_id)\n        .eq(\"group_id\", group_id);\n\n      if (referralUpdateError) {\n        logStep(\"Erro ao confirmar referral\", referralUpdateError);\n      } else {\n        logStep(\"Referral confirmado\", { referral_code });\n        \n        // Confirmar comissão do influenciador\n        const { error: commissionUpdateError } = await supabase\n          .from(\"influencer_commissions\")\n          .update({ status: 'confirmed' })\n          .eq(\"referral_code\", referral_code)\n        // Record influencer conversion and credit transaction\n        try {\n          await supabase.rpc('record_influencer_conversion', {\n            p_referral_code: referral_code,\n            p_client_id: user.id,\n            p_payment_id: purchase.id,\n            p_entry_value: purchase.amount_paid,\n            p_product_total_value: null\n          });\n        } catch (e) {\n          console.log('record_influencer_conversion failed', e);\n        }\n\n          .eq(\"client_id\", user_id);\n          \n        if (commissionUpdateError) {\n          logStep(\"Erro ao confirmar comissão\", commissionUpdateError);\n        } else {\n          logStep(\"Comissão confirmada\");\n        }\n      }\n    }\n\n    // Check if group is now complete (this will be handled by database triggers)\n    const { data: updatedGroup } = await supabase\n      .from(\"groups\")\n      .select(\"current_count, status\")\n      .eq(\"id\", group_id)\n      .single();\n\n    logStep(\"Status final do grupo\", updatedGroup);\n\n    return new Response(JSON.stringify({\n      success: true,\n      message: \"Pagamento confirmado e usuário adicionado ao grupo\",\n      group_id: group_id,\n      group_status: updatedGroup?.status,\n      current_count: updatedGroup?.current_count\n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    logStep(\"ERRO\", { message: errorMessage });\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: errorMessage\n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 400,\n    });\n  }\n});","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/create-admin-user/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/create-asaas-payment/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2436,2439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2436,2439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2667,2670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2667,2670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    )\n\n    const { plan_id, plan_category, user_id, payment_method = 'pix', municipio = 'sao_paulo', intended_leader_id = null } = await req.json()\n\n    console.log('Iniciando criação de pagamento:', { plan_id, plan_category, user_id, payment_method, municipio })\n\n    // Obter configuração ativa da integração Asaas\n    const { data: asaasConfigs, error: configError } = await supabaseClient\n      .from('asaas_integration')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (configError) {\n      console.error('❌ Erro ao buscar config Asaas:', configError)\n      throw new Error('Erro ao carregar configuração Asaas: ' + configError.message)\n    }\n\n    if (!asaasConfigs || asaasConfigs.length === 0) {\n      throw new Error('Nenhuma configuração Asaas encontrada')\n    }\n\n    // Buscar primeiro ativo, ou pegar o mais recente\n    const asaasConfig = asaasConfigs.find(config => config.status === 'active') || asaasConfigs[0]\n    \n    if (!asaasConfig) {\n      throw new Error('Configuração Asaas não encontrada')\n    }\n\n    console.log('✅ Config Asaas encontrada:', {\n      id: asaasConfig.id,\n      status: asaasConfig.status,\n      environment: asaasConfig.environment,\n      connection_status: asaasConfig.connection_status\n    })\n\n    // **4. BUSCAR PLANO USANDO EDGE FUNCTION UNIFICADA**\n    console.log('🔍 [PLAN-SEARCH] Buscando plano via unified-plans-loader...')\n    \n    const { data: plansResponse, error: plansError } = await supabaseClient.functions.invoke('unified-plans-loader', {\n      body: { include_inactive: false, admin_view: false }\n    })\n    \n    if (plansError || !plansResponse?.success) {\n      console.error('❌ [PLAN-SEARCH] Erro ao buscar planos:', plansError)\n      throw new Error('Erro ao carregar planos disponíveis')\n    }\n    \n    const foundPlan = plansResponse.plans.find((plan: any) => plan.id === plan_id)\n    \n    if (!foundPlan) {\n      console.error('❌ [PLAN-SEARCH] Plano não encontrado:', { plan_id, plan_category })\n      console.log('📋 [PLAN-SEARCH] Planos disponíveis:', plansResponse.plans.map((p: any) => ({ id: p.id, name: p.name, active: p.active })))\n      throw new Error(`Plano não encontrado ou inativo: ${plan_id}`)\n    }\n    \n    if (!foundPlan.active) {\n      console.error('❌ [PLAN-SEARCH] Plano inativo:', foundPlan)\n      throw new Error(`Plano está inativo: ${foundPlan.name}`)\n    }\n    \n    const planData = foundPlan\n    const planTableSource = foundPlan.table_source\n    \n    console.log('✅ [PLAN-SEARCH] Plano encontrado:', {\n      id: planData.id,\n      name: planData.name,\n      price: planData.price,\n      source: planTableSource,\n      tipo_transacao: planData.tipo_transacao\n    })\n\n    // **DEFINIR VALORES E TIPO DE TRANSAÇÃO**\n    const entryAmount = planData.price\n    const tipoTransacao = planData.tipo_transacao || 'servico'\n    \n    console.log('💰 [PLAN-VALUES] Valores definidos:', {\n      entryAmount,\n      tipoTransacao,\n      planPrice: planData.price\n    })\n\n    // **5. BUSCAR E VALIDAR DADOS DO USUÁRIO**\n    console.log('👤 [USER-DATA] Buscando dados do usuário...', user_id)\n    const { data: user, error: userError } = await supabaseClient\n      .from('profiles')\n      .select('*')\n      .eq('user_id', user_id)\n      .single()\n\n    if (userError || !user) {\n      console.error('❌ [USER-DATA] Usuário não encontrado:', userError)\n      throw new Error('Usuário não encontrado')\n    }\n\n    console.log('🔍 [USER-DATA] Dados completos do usuário:', user)\n    console.log('🔍 [CPF-DEBUG] CPF do usuário:', user.cpf, 'Tipo:', typeof user.cpf, 'Existe:', !!user.cpf)\n\n    if (!user.cpf) {\n      console.error('❌ [USER-DATA] CPF obrigatório não informado')\n      throw new Error('CPF é obrigatório para criar pagamentos')\n    }\n\n    console.log('✅ [USER-DATA] Usuário validado:', { id: user.id, email: user.email, cpf_provided: !!user.cpf, cpf_value: user.cpf })\n\n    // **6. CALCULAR IMPOSTOS BASEADO NO TIPO DE TRANSAÇÃO**\n    console.log('💰 [TAX-CALC] Calculando impostos para:', tipoTransacao)\n    \n    const { data: impostos, error: impostosError } = await supabaseClient\n      .rpc('calcular_impostos', {\n        valor_base: planData.price,\n        tipo: tipoTransacao,\n        municipio: 'sao_paulo',\n        regime: 'simples_nacional'\n      });\n\n    if (impostosError) {\n      console.error('⚠️ [TAX-CALC] Erro no cálculo de impostos:', impostosError);\n      // Continuar sem impostos se cálculo falhar\n    }\n\n    console.log('📊 [TAX-CALC] Impostos calculados:', impostos);\n\n    // Preparar dados para o Asaas\n    const asaasBaseUrl = asaasConfig.environment === 'production' \n      ? 'https://www.asaas.com/api/v3'\n      : 'https://sandbox.asaas.com/api/v3'\n\n    const apiKey = atob(asaasConfig.api_key_encrypted) // Descriptografar a chave\n\n    // Primeiro, criar/buscar cliente no Asaas se necessário\n    let customerId = null;\n    \n    // Tentar buscar cliente existente pelo email\n    const customerSearchResponse = await fetch(`${asaasBaseUrl}/customers?email=${encodeURIComponent(user.email)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'access_token': apiKey\n      }\n    });\n\n    const existingCustomers = await customerSearchResponse.json();\n    \n    if (existingCustomers.data && existingCustomers.data.length > 0) {\n      customerId = existingCustomers.data[0].id;\n      console.log('Cliente existente encontrado:', customerId);\n    } else {\n      // Criar novo cliente - CORREÇÃO: Incluir CPF obrigatoriamente\n      if (!user.cpf) {\n        console.error('❌ CPF obrigatório para criar novo cliente no Asaas');\n        throw new Error('CPF é obrigatório para criar clientes no Asaas');\n      }\n\n      const newCustomerData = {\n        name: user.full_name || user.email,\n        email: user.email,\n        cpfCnpj: user.cpf, // CORREÇÃO: Sempre incluir CPF\n        phone: user.phone || undefined\n      };\n\n      console.log('🆕 Criando novo cliente com dados:', newCustomerData);\n      \n      const createCustomerResponse = await fetch(`${asaasBaseUrl}/customers`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'access_token': apiKey\n        },\n        body: JSON.stringify(newCustomerData)\n      });\n\n      const newCustomer = await createCustomerResponse.json();\n      \n      if (!createCustomerResponse.ok) {\n        console.error('❌ Erro ao criar cliente no Asaas:', newCustomer);\n        throw new Error(newCustomer.errors?.[0]?.description || 'Erro ao criar cliente no Asaas');\n      }\n      \n      customerId = newCustomer.id;\n      console.log('✅ Novo cliente criado com sucesso:', customerId);\n    }\n\n    // Create Order before provider call to carry order_id in externalReference\n    const orderId = crypto.randomUUID()\n    const amountCents = Math.round(Number(entryAmount) * 100)\n\n    // Validate intended leader (if provided) exists\n    let validatedLeaderId: string | null = null\n    if (intended_leader_id) {\n      const { data: leaderProfile } = await supabaseClient\n        .from('profiles')\n        .select('id')\n        .eq('id', intended_leader_id)\n        .single()\n      validatedLeaderId = leaderProfile?.id || null\n    }\n\n    // Insert Order with temporary provider_session_id = orderId (updated after ASAAS)\n    const { data: orderRecord, error: orderError } = await supabaseClient\n      .from('orders')\n      .insert({\n        id: orderId,\n        user_id: user.id, // profiles.id\n        plan_id: plan_id,\n        intended_leader_id: validatedLeaderId,\n        provider_session_id: orderId,\n        amount_cents: amountCents,\n        currency: 'BRL',\n        status: 'pending',\n        metadata: { plan_table_source: planTableSource }\n      })\n      .select()\n      .single()\n\n    if (orderError) {\n      console.error('❌ Erro ao criar Order:', orderError)\n      throw new Error('Erro ao criar pedido')\n    }\n\n    const externalRef = `order=${orderRecord.id};leader=${validatedLeaderId || ''}`\n\n    const paymentData = {\n      customer: customerId,\n      billingType: payment_method === 'pix' ? 'PIX' : 'BOLETO',\n      value: entryAmount,\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 7 dias\n      description: `Entrada do plano: ${planData.name} (10% do valor total)`,\n      externalReference: externalRef,\n      postalService: false\n    }\n\n    // Validar se CPF foi fornecido antes de criar cobrança\n    console.log('🔍 [CPF-FINAL-CHECK] Verificação final do CPF antes da cobrança:');\n    console.log('🔍 [CPF-FINAL-CHECK] user.cpf:', user.cpf);\n    console.log('🔍 [CPF-FINAL-CHECK] typeof user.cpf:', typeof user.cpf);\n    console.log('🔍 [CPF-FINAL-CHECK] !!user.cpf:', !!user.cpf);\n    console.log('🔍 [CPF-FINAL-CHECK] user.cpf === null:', user.cpf === null);\n    console.log('🔍 [CPF-FINAL-CHECK] user.cpf === undefined:', user.cpf === undefined);\n    console.log('🔍 [CPF-FINAL-CHECK] user.cpf === \"\":', user.cpf === \"\");\n    \n    if (!user.cpf) {\n      console.error('❌ CPF/CNPJ não fornecido para criação da cobrança - usuário:', user_id);\n      console.error('❌ Objeto user completo:', JSON.stringify(user, null, 2));\n      throw new Error('Para criar esta cobrança é necessário preencher o CPF ou CNPJ do cliente.');\n    }\n    \n    // Criar cobrança no Asaas\n    console.log('Criando cobrança com dados:', paymentData);\n    console.log('✅ CPF do cliente fornecido:', user.cpf);\n    const asaasResponse = await fetch(`${asaasBaseUrl}/payments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'access_token': apiKey\n      },\n      body: JSON.stringify(paymentData)\n    })\n\n    const asaasResult = await asaasResponse.json()\n    console.log('Resposta completa da API Asaas:', JSON.stringify(asaasResult, null, 2));\n\n    if (!asaasResponse.ok) {\n      console.error('Erro na API Asaas:', asaasResult)\n      throw new Error(asaasResult.errors?.[0]?.description || 'Erro ao criar cobrança')\n    }\n\n    console.log('Cobrança criada com sucesso:', asaasResult.id)\n\n    // **BUSCAR QR CODE PIX SE FOR PIX**\n    let pixQrCode = null;\n    let pixCode = null;\n    \n    if (payment_method === 'pix') {\n      try {\n        const qrCodeResponse = await fetch(`${asaasBaseUrl}/payments/${asaasResult.id}/pixQrCode`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'access_token': apiKey\n          }\n        });\n\n        if (qrCodeResponse.ok) {\n          const qrCodeData = await qrCodeResponse.json();\n          pixQrCode = qrCodeData.encodedImage;\n          pixCode = qrCodeData.payload;\n          console.log('✅ QR Code PIX obtido com sucesso');\n        } else {\n          console.log('⚠️ QR Code PIX não disponível ainda');\n        }\n      } catch (error) {\n        console.log('⚠️ Erro ao buscar QR Code PIX:', error);\n      }\n    }\n\n    // Salvar transação no banco de dados (legado/compatibilidade)\n    const { data: transacaoRecord, error: transacaoError } = await supabaseClient\n      .from('transacoes')\n      .insert({\n        usuario_id: user_id,\n        plano_id: plan_id,\n        valor: entryAmount,\n        tipo_transacao: tipoTransacao,\n        status: 'pendente',\n        asaas_payment_id: asaasResult.id,\n        payment_method: payment_method,\n        iss_percentual: impostos?.iss_percentual || 0,\n        icms_percentual: impostos?.icms_percentual || 0,\n        pis_cofins_percentual: impostos?.pis_cofins_percentual || 0,\n        valor_impostos: impostos?.total_impostos || 0,\n        valor_liquido: impostos?.valor_liquido || entryAmount,\n        municipio_iss: municipio,\n        regime_tributario: 'simples_nacional',\n        observacoes: `Entrada do plano: ${planData.name} (10% do valor total) - Tipo: ${tipoTransacao}`\n      })\n      .select()\n      .single();\n\n    if (transacaoError) {\n      console.error('❌ Erro ao salvar transação:', transacaoError);\n      throw new Error('Erro ao salvar dados da transação');\n    }\n\n    console.log('✅ Transação salva no banco:', transacaoRecord.id);\n\n    // Também salvar na tabela payments para compatibilidade\n    const { data: paymentRecord, error: saveError } = await supabaseClient\n      .from('payments')\n      .insert({\n        user_id: user_id,\n        plan_id: plan_id,\n        asaas_payment_id: asaasResult.id,\n        amount: entryAmount,\n        status: 'pending',\n        payment_method: payment_method,\n        payment_url: asaasResult.invoiceUrl || asaasResult.bankSlipUrl || null,\n        plan_name: planData.name,\n        customer_id: customerId,\n        due_date: asaasResult.dueDate,\n        external_reference: externalRef\n      })\n      .select()\n      .single();\n\n    if (saveError) {\n      console.error('❌ Erro ao salvar pagamento:', saveError);\n      // Não falhar se der erro no payments, pois já temos na transacoes\n    } else {\n      console.log('✅ Pagamento salvo no banco:', paymentRecord.id);\n    }\n\n    // **RETORNO OTIMIZADO PARA CHECKOUT**\n    let redirectUrl = null;\n    \n    // Para PIX, usar invoiceUrl se disponível\n    if (payment_method === 'pix' && asaasResult.invoiceUrl) {\n      redirectUrl = asaasResult.invoiceUrl;\n    }\n    // Para boleto, usar bankSlipUrl\n    else if (payment_method === 'boleto' && asaasResult.bankSlipUrl) {\n      redirectUrl = asaasResult.bankSlipUrl;\n    }\n    // Fallback para invoiceUrl genérica\n    else if (asaasResult.invoiceUrl) {\n      redirectUrl = asaasResult.invoiceUrl;\n    }\n\n    // Update order with provider session id (ASAAS payment id)\n    const { error: updateOrderSessionError } = await supabaseClient\n      .from('orders')\n      .update({ provider_session_id: asaasResult.id, metadata: { ...orderRecord.metadata, asaas_payment_id: asaasResult.id } })\n      .eq('id', orderRecord.id)\n\n    if (updateOrderSessionError) {\n      console.warn('⚠️ Falha ao atualizar provider_session_id do Order:', updateOrderSessionError)\n    }\n\n    // Retornar dados otimizados para checkout\n    const responseData = {\n      success: true,\n      transacao_id: transacaoRecord.id,\n      payment_id: paymentRecord?.id || null,\n      asaas_payment_id: asaasResult.id,\n      redirect_url: redirectUrl,\n      amount: entryAmount,\n      valor_liquido: impostos?.valor_liquido || entryAmount,\n      valor_impostos: impostos?.total_impostos || 0,\n      tipo_transacao: tipoTransacao,\n      plan_name: planData.name,\n      status: 'pending',\n      // Dados específicos do PIX\n      qr_code: pixQrCode,\n      pix_code: pixCode,\n      message: payment_method === 'pix' ? 'PIX gerado com sucesso' : 'Redirecionando para pagamento...'\n    };\n\n    console.log('📤 Retornando dados de checkout:', {\n      ...responseData,\n      qr_code: pixQrCode ? '[QR_CODE_DATA]' : null,\n      pix_code: pixCode ? '[PIX_CODE_DATA]' : null\n    });\n\n    return new Response(JSON.stringify(responseData), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 200,\n    });\n\n  } catch (error) {\n    console.error('Erro ao criar pagamento:', error)\n    return new Response(\n      JSON.stringify({ \n        success: false, \n        error: error.message || 'Erro interno do servidor' \n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 500,\n      }\n    )\n  }\n})","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/create-pix-payment/index.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'customerId' is never reassigned. Use 'const' instead.","line":50,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":50,"endColumn":19,"fix":{"range":[1360,1526],"text":"const customerId = await getOrCreateAsaasCustomer(asaasApiKey, {\n      name: body.customerName,\n      email: body.customerEmail,\n      cpfCnpj: body.customerCpf\n    });"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3344,3347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3344,3347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4274,4277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4274,4277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5084,5087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5084,5087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface PixPaymentRequest {\n  serviceId: string;\n  amount: number;\n  description: string;\n  customerName: string;\n  customerEmail: string;\n  customerCpf: string;\n  referrerId?: string;\n  groupParticipation?: boolean;\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const { data: { user } } = await supabase.auth.getUser(\n      req.headers.get('Authorization')?.replace('Bearer ', '') ?? ''\n    );\n\n    if (!user) {\n      return new Response(\n        JSON.stringify({ error: 'Unauthorized' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const body: PixPaymentRequest = await req.json();\n    const asaasApiKey = Deno.env.get('ASAAS_API_KEY');\n\n    if (!asaasApiKey) {\n      throw new Error('ASAAS_API_KEY não configurada');\n    }\n\n    // 1. Criar/buscar cliente no Asaas\n    let customerId = await getOrCreateAsaasCustomer(asaasApiKey, {\n      name: body.customerName,\n      email: body.customerEmail,\n      cpfCnpj: body.customerCpf\n    });\n\n    // 2. Criar cobrança PIX\n    const pixPayment = await createAsaasPixPayment(asaasApiKey, {\n      customer: customerId,\n      value: body.amount,\n      description: body.description,\n      externalReference: body.serviceId,\n      dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]\n    });\n\n    // 3. Buscar QR Code\n    const pixQrCode = await getPixQrCode(asaasApiKey, pixPayment.id);\n\n    // 4. Registrar venda no marketplace\n    const { data: sale } = await supabase\n      .from('marketplace_sales')\n      .insert({\n        buyer_id: user.id,\n        seller_id: body.serviceId, // Será corrigido depois\n        service_id: body.serviceId,\n        payment_method: 'pix',\n        total_amount: body.amount,\n        payment_id: pixPayment.id,\n        status: 'pending',\n        referrer_id: body.referrerId\n      })\n      .select()\n      .single();\n\n    // 5. Se for participação em grupo, processar\n    if (body.groupParticipation) {\n      await processGroupJoin(supabase, user.id, body.serviceId, body.amount, body.referrerId);\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        payment: {\n          id: pixPayment.id,\n          status: pixPayment.status,\n          amount: body.amount,\n          qrCode: pixQrCode.encodedImage,\n          pixCopyPaste: pixQrCode.payload,\n          expiresAt: pixPayment.dueDate\n        },\n        sale: sale\n      }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    console.error('Erro ao criar PIX:', error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});\n\nasync function getOrCreateAsaasCustomer(apiKey: string, customerData: any) {\n  // Tentar buscar cliente existente\n  const searchResponse = await fetch(`https://www.asaas.com/api/v3/customers?email=${customerData.email}`, {\n    headers: { 'access_token': apiKey }\n  });\n\n  if (searchResponse.ok) {\n    const searchResult = await searchResponse.json();\n    if (searchResult.data && searchResult.data.length > 0) {\n      return searchResult.data[0].id;\n    }\n  }\n\n  // Criar novo cliente\n  const createResponse = await fetch('https://www.asaas.com/api/v3/customers', {\n    method: 'POST',\n    headers: {\n      'access_token': apiKey,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(customerData)\n  });\n\n  if (!createResponse.ok) {\n    const error = await createResponse.text();\n    throw new Error(`Erro ao criar cliente: ${error}`);\n  }\n\n  const customer = await createResponse.json();\n  return customer.id;\n}\n\nasync function createAsaasPixPayment(apiKey: string, paymentData: any) {\n  const response = await fetch('https://www.asaas.com/api/v3/payments', {\n    method: 'POST',\n    headers: {\n      'access_token': apiKey,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      ...paymentData,\n      billingType: 'PIX'\n    })\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`Erro ao criar cobrança PIX: ${error}`);\n  }\n\n  return await response.json();\n}\n\nasync function getPixQrCode(apiKey: string, paymentId: string) {\n  const response = await fetch(`https://www.asaas.com/api/v3/payments/${paymentId}/pixQrCode`, {\n    headers: { 'access_token': apiKey }\n  });\n\n  if (!response.ok) {\n    throw new Error('Erro ao buscar QR Code PIX');\n  }\n\n  return await response.json();\n}\n\nasync function processGroupJoin(supabase: any, userId: string, serviceId: string, amount: number, referrerId?: string) {\n  // Buscar grupo ativo ou criar novo\n  let { data: activeGroup } = await supabase\n    .from('plan_groups')\n    .select('*')\n    .eq('service_id', serviceId)\n    .eq('status', 'forming')\n    .lt('current_participants', 10)\n    .order('created_at', { ascending: true })\n    .limit(1)\n    .single();\n\n  if (!activeGroup) {\n    // Criar novo grupo\n    const { data: newGroup } = await supabase\n      .from('plan_groups')\n      .insert({\n        service_id: serviceId,\n        group_number: Math.floor(Math.random() * 10000),\n        target_amount: amount * 10,\n        current_amount: 0,\n        current_participants: 0,\n        max_participants: 10,\n        status: 'forming'\n      })\n      .select()\n      .single();\n\n    activeGroup = newGroup;\n  }\n\n  // Adicionar participante (será confirmado via webhook)\n  await supabase\n    .from('group_participants')\n    .insert({\n      group_id: activeGroup.id,\n      user_id: userId,\n      amount_paid: amount,\n      referrer_id: referrerId,\n      status: 'pending'\n    });\n\n  return activeGroup;\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/create-simple-pix/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1510,1513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1510,1513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    )\n\n    const { plan_id, plan_category, user_id, payment_method = 'pix', municipio = 'sao_paulo' } = await req.json()\n\n    console.log('🚀 [SIMPLE] Iniciando PIX simples:', { plan_id, user_id, payment_method })\n\n    // Buscar dados do usuário\n    const { data: user, error: userError } = await supabaseClient\n      .from('profiles')\n      .select('*')\n      .eq('user_id', user_id)\n      .single()\n\n    if (userError || !user) {\n      throw new Error('Usuário não encontrado')\n    }\n\n    console.log('✅ [SIMPLE] Usuário encontrado:', user.full_name)\n\n    // Buscar plano usando unified-plans-loader\n    const { data: plansResponse, error: plansError } = await supabaseClient.functions.invoke('unified-plans-loader', {\n      body: { include_inactive: false, admin_view: false }\n    })\n    \n    if (plansError || !plansResponse?.success) {\n      throw new Error('Erro ao carregar planos')\n    }\n    \n    const foundPlan = plansResponse.plans.find((plan: any) => plan.id === plan_id)\n    \n    if (!foundPlan) {\n      throw new Error(`Plano não encontrado: ${plan_id}`)\n    }\n\n    console.log('✅ [SIMPLE] Plano encontrado:', foundPlan.name, 'R$', foundPlan.price)\n\n    // Buscar configuração Asaas\n    const { data: asaasConfigs, error: configError } = await supabaseClient\n      .from('asaas_integration')\n      .select('*')\n      .order('created_at', { ascending: false })\n\n    if (configError || !asaasConfigs || asaasConfigs.length === 0) {\n      throw new Error('Configuração Asaas não encontrada')\n    }\n\n    const asaasConfig = asaasConfigs.find(config => config.status === 'active') || asaasConfigs[0]\n    console.log('✅ [SIMPLE] Config Asaas:', asaasConfig.environment)\n\n    // Preparar dados para o Asaas\n    const asaasBaseUrl = asaasConfig.environment === 'production' \n      ? 'https://www.asaas.com/api/v3'\n      : 'https://sandbox.asaas.com/api/v3'\n\n    const apiKey = atob(asaasConfig.api_key_encrypted)\n\n    // Criar/buscar cliente no Asaas\n    let customerId = null;\n    \n    const customerSearchResponse = await fetch(`${asaasBaseUrl}/customers?email=${encodeURIComponent(user.email)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'access_token': apiKey\n      }\n    });\n\n    const existingCustomers = await customerSearchResponse.json();\n    \n    if (existingCustomers.data && existingCustomers.data.length > 0) {\n      customerId = existingCustomers.data[0].id;\n      console.log('✅ [SIMPLE] Cliente existente:', customerId);\n    } else {\n      // Criar novo cliente\n      const newCustomerData = {\n        name: user.full_name || user.email,\n        email: user.email,\n        cpfCnpj: user.cpf,\n        phone: user.phone || undefined\n      };\n\n      const createCustomerResponse = await fetch(`${asaasBaseUrl}/customers`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'access_token': apiKey\n        },\n        body: JSON.stringify(newCustomerData)\n      });\n\n      const newCustomer = await createCustomerResponse.json();\n      \n      if (!createCustomerResponse.ok) {\n        throw new Error(newCustomer.errors?.[0]?.description || 'Erro ao criar cliente');\n      }\n      \n      customerId = newCustomer.id;\n      console.log('✅ [SIMPLE] Novo cliente criado:', customerId);\n    }\n\n    // Criar cobrança PIX\n    const paymentData = {\n      customer: customerId,\n      billingType: 'PIX',\n      value: foundPlan.price,\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      description: `${foundPlan.name} - R$ ${foundPlan.price}`,\n      externalReference: `plan_${plan_id}_user_${user_id}`,\n      postalService: false\n    }\n\n    console.log('🔄 [SIMPLE] Criando cobrança PIX...')\n    const asaasResponse = await fetch(`${asaasBaseUrl}/payments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'access_token': apiKey\n      },\n      body: JSON.stringify(paymentData)\n    })\n\n    const asaasResult = await asaasResponse.json()\n\n    if (!asaasResponse.ok) {\n      console.error('❌ [SIMPLE] Erro Asaas:', asaasResult)\n      throw new Error(asaasResult.errors?.[0]?.description || 'Erro ao criar cobrança')\n    }\n\n    console.log('✅ [SIMPLE] Cobrança criada:', asaasResult.id)\n\n    // Buscar QR Code PIX\n    let pixQrCode = null;\n    let pixCode = null;\n    \n    const qrCodeResponse = await fetch(`${asaasBaseUrl}/payments/${asaasResult.id}/pixQrCode`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'access_token': apiKey\n      }\n    });\n\n    if (qrCodeResponse.ok) {\n      const qrCodeData = await qrCodeResponse.json();\n      pixQrCode = qrCodeData.encodedImage;\n      pixCode = qrCodeData.payload;\n      console.log('✅ [SIMPLE] QR Code obtido');\n    }\n\n    // Salvar no banco\n    const { data: transacaoRecord } = await supabaseClient\n      .from('transacoes')\n      .insert({\n        usuario_id: user_id,\n        plano_id: plan_id,\n        valor: foundPlan.price,\n        tipo_transacao: 'servico',\n        status: 'pendente',\n        asaas_payment_id: asaasResult.id,\n        payment_method: payment_method,\n        valor_liquido: foundPlan.price,\n        observacoes: `PIX Instantâneo: ${foundPlan.name}`\n      })\n      .select()\n      .single();\n\n    console.log('✅ [SIMPLE] PIX salvo no banco')\n\n    // Retornar PIX pronto\n    const responseData = {\n      success: true,\n      payment_id: asaasResult.id,\n      amount: foundPlan.price,\n      plan_name: foundPlan.name,\n      qr_code: pixQrCode,\n      pix_code: pixCode,\n      status: 'pending',\n      message: 'PIX gerado com sucesso!'\n    };\n\n    console.log('🎉 [SIMPLE] PIX PRONTO!')\n\n    return new Response(JSON.stringify(responseData), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      status: 200,\n    });\n\n  } catch (error) {\n    console.error('❌ [SIMPLE] Erro:', error)\n    return new Response(\n      JSON.stringify({ \n        success: false, \n        error: error.message || 'Erro interno' \n      }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 500,\n      }\n    )\n  }\n})","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/daily-credit-conversion/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/daily-trigger-check/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3642,3645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3642,3645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3656,3659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3656,3659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7119,7122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7119,7122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\n// Esta função deve ser executada pelo cron job do Supabase\n// Pode ser configurada para rodar diariamente às 2h da manhã\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    console.log(`[CRON] Iniciando verificação automática de gatilhos - ${new Date().toISOString()}`);\n\n    // Inicializar Supabase client com service role key\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    const now = new Date();\n    let totalProcessed = 0;\n\n    // Buscar gatilhos que precisam ser executados (data atual >= scheduled_for)\n    const { data: triggersToExecute, error: triggersError } = await supabaseClient\n      .from('notification_triggers')\n      .select(`\n        id,\n        user_id,\n        group_id,\n        trigger_type,\n        scheduled_for,\n        users (email, full_name),\n        groups (status, created_at, paid_amount)\n      `)\n      .eq('executed', false)\n      .lte('scheduled_for', now.toISOString());\n\n    if (triggersError) {\n      console.error('[CRON] Erro ao buscar gatilhos:', triggersError);\n      throw triggersError;\n    }\n\n    console.log(`[CRON] Encontrados ${triggersToExecute?.length || 0} gatilhos para executar`);\n\n    if (!triggersToExecute || triggersToExecute.length === 0) {\n      return new Response(\n        JSON.stringify({ \n          success: true, \n          message: \"Nenhum gatilho para executar\",\n          processed: 0,\n          timestamp: now.toISOString()\n        }),\n        {\n          headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n          status: 200,\n        }\n      );\n    }\n\n    // Processar cada gatilho\n    for (const trigger of triggersToExecute) {\n      try {\n        await processTrigger(supabaseClient, trigger);\n        totalProcessed++;\n        \n        // Marcar gatilho como executado\n        await supabaseClient\n          .from('notification_triggers')\n          .update({ \n            executed: true, \n            executed_at: now.toISOString() \n          })\n          .eq('id', trigger.id);\n\n        console.log(`[CRON] Gatilho ${trigger.id} executado com sucesso`);\n        \n      } catch (error) {\n        console.error(`[CRON] Erro ao processar gatilho ${trigger.id}:`, error);\n        // Continuar com os próximos gatilhos mesmo se um falhar\n      }\n    }\n\n    // Verificar conversões automáticas para créditos (180+ dias)\n    await processAutoConversions(supabaseClient);\n\n    console.log(`[CRON] Verificação concluída: ${totalProcessed} gatilhos processados`);\n\n    return new Response(\n      JSON.stringify({ \n        success: true, \n        message: \"Gatilhos processados com sucesso\",\n        processed: totalProcessed,\n        timestamp: now.toISOString()\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 200,\n      }\n    );\n\n  } catch (error) {\n    console.error('[CRON] Erro na execução do cron job:', error);\n    return new Response(\n      JSON.stringify({ \n        error: error.message,\n        timestamp: new Date().toISOString()\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n\nasync function processTrigger(supabaseClient: any, trigger: any) {\n  const { user_id, trigger_type, users, groups } = trigger;\n  \n  if (!users || !groups) {\n    console.log(`[CRON] Dados incompletos para gatilho ${trigger.id}`);\n    return;\n  }\n\n  const daysSinceCreation = Math.floor(\n    (new Date().getTime() - new Date(groups.created_at).getTime()) / (1000 * 60 * 60 * 24)\n  );\n\n  // Buscar contagem de referrals do usuário\n  const { data: referrals } = await supabaseClient\n    .from('group_members')\n    .select('id')\n    .eq('referred_by', user_id);\n\n  const referralCount = referrals?.length || 0;\n\n  let title = \"\";\n  let message = \"\";\n  let actionUrl = \"/dashboard\";\n  let notificationType = \"info\";\n\n  switch (trigger_type) {\n    case '15_days':\n      if (referralCount === 0) {\n        title = \"🚀 Vamos começar suas indicações!\";\n        message = \"Olá! Notamos que você ainda não fez nenhuma indicação. Enviamos materiais para te ajudar a começar!\";\n      } else {\n        title = \"📈 Continue compartilhando!\";\n        message = `Parabéns pelas ${referralCount} indicações! Continue assim para completar seu grupo mais rápido.`;\n      }\n      actionUrl = \"/materiais\";\n      break;\n\n    case '30_days':\n      title = \"💡 Novos materiais disponíveis!\";\n      message = \"Adicionamos novos materiais promocionais para ajudar você a divulgar melhor seus links!\";\n      actionUrl = \"/materiais\";\n      break;\n\n    case '60_days':\n      title = \"🎯 Estratégias avançadas\";\n      message = \"Acesse nossas dicas exclusivas para formar grupos mais rapidamente. Várias estratégias eficazes te esperam!\";\n      actionUrl = \"/materiais\";\n      break;\n\n    case '90_days':\n      title = \"🤝 Considere grupos públicos\";\n      message = \"Que tal tornar seu grupo público ou participar de outros grupos? Isso pode acelerar muito a formação!\";\n      actionUrl = \"/feira-grupos\";\n      break;\n\n    case '180_days':\n      title = \"✨ Seus créditos estão disponíveis!\";\n      message = \"Convertemos seu pagamento em créditos! Use no marketplace ou solicite saque quando quiser.\";\n      actionUrl = \"/creditos\";\n      notificationType = \"success\";\n      break;\n  }\n\n  // Criar notificação in-app\n  await supabaseClient\n    .from('notifications')\n    .insert({\n      user_id,\n      title,\n      message,\n      type: notificationType,\n      category: trigger_type === '180_days' ? 'system' : 'group',\n      read: false,\n      action_url: actionUrl,\n      action_text: trigger_type === '180_days' ? 'Ver Créditos' : 'Ver Materiais'\n    });\n\n  console.log(`[CRON] Notificação criada para usuário ${user_id}: ${title}`);\n\n  // Para 180 dias, processar conversão para créditos\n  if (trigger_type === '180_days' && groups.status === 'forming') {\n    try {\n      await supabaseClient.functions.invoke('add-user-credits', {\n        body: {\n          userId: user_id,\n          amount: groups.paid_amount,\n          source: 'initial_payment',\n          description: `Conversão automática após 180 dias - Grupo #${trigger.group_id}`,\n          relatedOrderId: trigger.group_id\n        }\n      });\n\n      // Atualizar status do grupo\n      await supabaseClient\n        .from('groups')\n        .update({ status: 'expired_converted' })\n        .eq('id', trigger.group_id);\n\n      console.log(`[CRON] Conversão para créditos realizada: ${groups.paid_amount} para usuário ${user_id}`);\n    } catch (error) {\n      console.error(`[CRON] Erro na conversão para créditos:`, error);\n    }\n  }\n}\n\nasync function processAutoConversions(supabaseClient: any) {\n  console.log('[CRON] Verificando conversões automáticas adicionais...');\n\n  // Buscar grupos antigos que ainda não foram convertidos (sem gatilho de 180 dias)\n  const { data: oldGroups, error } = await supabaseClient\n    .from('groups')\n    .select('id, user_id, paid_amount, created_at')\n    .eq('status', 'forming')\n    .lt('created_at', new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString());\n\n  if (error) {\n    console.error('[CRON] Erro ao buscar grupos antigos:', error);\n    return;\n  }\n\n  if (!oldGroups || oldGroups.length === 0) {\n    console.log('[CRON] Nenhum grupo antigo para conversão encontrado');\n    return;\n  }\n\n  for (const group of oldGroups) {\n    // Verificar se já foi convertido\n    const { data: existingTransaction } = await supabaseClient\n      .from('credit_transactions')\n      .select('id')\n      .eq('user_id', group.user_id)\n      .eq('source', 'initial_payment')\n      .eq('related_order_id', group.id)\n      .single();\n\n    if (existingTransaction) {\n      continue; // Já foi convertido\n    }\n\n    try {\n      await supabaseClient.functions.invoke('add-user-credits', {\n        body: {\n          userId: group.user_id,\n          amount: group.paid_amount,\n          source: 'initial_payment',\n          description: `Conversão automática de grupo antigo - Grupo #${group.id}`,\n          relatedOrderId: group.id\n        }\n      });\n\n      await supabaseClient\n        .from('groups')\n        .update({ status: 'expired_converted' })\n        .eq('id', group.id);\n\n      console.log(`[CRON] Conversão automática de grupo antigo: ${group.paid_amount} para usuário ${group.user_id}`);\n    } catch (error) {\n      console.error(`[CRON] Erro na conversão de grupo antigo ${group.id}:`, error);\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/force-delete-users/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/global-plan-deletion/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[895,898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[895,898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { plan_id, confirm } = await req.json();\n\n    if (!plan_id || !confirm) {\n      throw new Error('Plan ID and confirmation required');\n    }\n\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    console.log(`🗑️ Iniciando exclusão global do plano: ${plan_id}`);\n\n    // 1. Verificar se o plano existe e obter informações\n    let planData: any = null;\n    let tableName = '';\n\n    // Buscar em custom_plans\n    const { data: customPlan } = await supabase\n      .from('custom_plans')\n      .select('*')\n      .eq('id', plan_id)\n      .single();\n\n    if (customPlan) {\n      planData = customPlan;\n      tableName = 'custom_plans';\n    } else {\n      // Buscar em planos_tatuador\n      const { data: tattPlan } = await supabase\n        .from('planos_tatuador')\n        .select('*')\n        .eq('id', plan_id)\n        .single();\n\n      if (tattPlan) {\n        planData = tattPlan;\n        tableName = 'planos_tatuador';\n      } else {\n        // Buscar em planos_dentista\n        const { data: dentPlan } = await supabase\n          .from('planos_dentista')\n          .select('*')\n          .eq('id', plan_id)\n          .single();\n\n        if (dentPlan) {\n          planData = dentPlan;\n          tableName = 'planos_dentista';\n        }\n      }\n    }\n\n    if (!planData) {\n      throw new Error('Plano não encontrado');\n    }\n\n    console.log(`📋 Plano encontrado: ${planData.name} na tabela ${tableName}`);\n\n    // 2. Buscar todos os usuários/grupos afetados\n    const { data: affectedGroups } = await supabase\n      .from('plan_groups')\n      .select(`\n        id,\n        current_participants,\n        group_participants (\n          id,\n          user_id,\n          profiles!inner (id, full_name)\n        )\n      `)\n      .eq('service_id', plan_id);\n\n    const { data: affectedParticipants } = await supabase\n      .from('group_participants')\n      .select(`\n        id,\n        user_id,\n        group_id,\n        plan_groups!inner (service_id)\n      `)\n      .eq('plan_groups.service_id', plan_id);\n\n    const affectedUsersCount = affectedParticipants?.length || 0;\n    const affectedGroupsCount = affectedGroups?.length || 0;\n\n    console.log(`👥 Usuários afetados: ${affectedUsersCount}`);\n    console.log(`📦 Grupos afetados: ${affectedGroupsCount}`);\n\n    // 3. Remover participações dos usuários\n    if (affectedParticipants && affectedParticipants.length > 0) {\n      const participantIds = affectedParticipants.map(p => p.id);\n      \n      // Remover agendamentos relacionados\n      const { error: agendError } = await supabase\n        .from('agendamentos')\n        .delete()\n        .in('participation_id', participantIds);\n\n      if (agendError) {\n        console.error('Erro ao remover agendamentos:', agendError);\n      }\n\n      // Remover participações\n      const { error: partError } = await supabase\n        .from('group_participants')\n        .delete()\n        .in('id', participantIds);\n\n      if (partError) {\n        console.error('Erro ao remover participações:', partError);\n        throw partError;\n      }\n\n      console.log(`✅ Removidas ${participantIds.length} participações`);\n    }\n\n    // 4. Remover grupos relacionados\n    if (affectedGroups && affectedGroups.length > 0) {\n      const groupIds = affectedGroups.map(g => g.id);\n      \n      const { error: groupError } = await supabase\n        .from('plan_groups')\n        .delete()\n        .in('id', groupIds);\n\n      if (groupError) {\n        console.error('Erro ao remover grupos:', groupError);\n        throw groupError;\n      }\n\n      console.log(`✅ Removidos ${groupIds.length} grupos`);\n    }\n\n    // 5. Marcar plano como inativo/excluído\n    const { error: planError } = await supabase\n      .from(tableName)\n      .update({ \n        active: false,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', plan_id);\n\n    if (planError) {\n      console.error('Erro ao desativar plano:', planError);\n      throw planError;\n    }\n\n    console.log(`✅ Plano ${planData.name} marcado como inativo`);\n\n    // 6. Criar notificações para usuários afetados (se houver)\n    if (affectedParticipants && affectedParticipants.length > 0) {\n      const notifications = affectedParticipants.map(participant => ({\n        user_id: participant.user_id,\n        event_type: 'plan_deleted',\n        title: 'Plano Removido',\n        message: `O plano \"${planData.name}\" foi removido do sistema. Entre em contato com o suporte para mais informações.`,\n        data: {\n          deleted_plan_id: plan_id,\n          deleted_plan_name: planData.name\n        }\n      }));\n\n      const { error: notifError } = await supabase\n        .from('notification_triggers')\n        .insert(notifications);\n\n      if (notifError) {\n        console.error('Erro ao criar notificações:', notifError);\n      } else {\n        console.log(`📧 Criadas ${notifications.length} notificações`);\n      }\n    }\n\n    // 7. Preparar relatório\n    const report = {\n      planName: planData.name,\n      affectedUsers: affectedUsersCount,\n      affectedGroups: affectedGroupsCount,\n      success: true\n    };\n\n    console.log(`🎉 Exclusão global concluída com sucesso!`);\n\n    return new Response(\n      JSON.stringify({ \n        success: true, \n        report,\n        message: `Plano \"${planData.name}\" excluído com sucesso. ${affectedUsersCount} usuários e ${affectedGroupsCount} grupos foram atualizados.`\n      }),\n      { \n        headers: { \n          ...corsHeaders, \n          'Content-Type': 'application/json' \n        } \n      }\n    );\n\n  } catch (error) {\n    console.error('❌ Erro na exclusão global:', error);\n    \n    return new Response(\n      JSON.stringify({ \n        error: error.message,\n        success: false \n      }),\n      { \n        status: 500,\n        headers: { \n          ...corsHeaders, \n          'Content-Type': 'application/json' \n        } \n      }\n    );\n  }\n});","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/log-activity/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/log-error/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/manage-credits/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2145,2148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2145,2148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2977,2980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2977,2980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4191,4194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4191,4194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5391,5394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5391,5394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface CreditOperation {\n  action: 'add' | 'use' | 'withdraw' | 'balance';\n  amount?: number;\n  description?: string;\n  referenceId?: string;\n  referenceTable?: string;\n  withdrawalMethod?: 'pix' | 'bank_transfer';\n  pixKey?: string;\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const { data: { user } } = await supabase.auth.getUser(\n      req.headers.get('Authorization')?.replace('Bearer ', '') ?? ''\n    );\n\n    if (!user) {\n      return new Response(\n        JSON.stringify({ error: 'Unauthorized' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const body: CreditOperation = await req.json();\n\n    let result;\n    switch (body.action) {\n      case 'balance':\n        result = await getUserBalance(supabase, user.id);\n        break;\n      case 'add':\n        result = await addCredits(supabase, user.id, body);\n        break;\n      case 'use':\n        result = await useCredits(supabase, user.id, body);\n        break;\n      case 'withdraw':\n        result = await requestWithdrawal(supabase, user.id, body);\n        break;\n      default:\n        throw new Error('Ação inválida');\n    }\n\n    return new Response(\n      JSON.stringify({ success: true, data: result }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    console.error('Erro no gerenciamento de créditos:', error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});\n\nasync function getUserBalance(supabase: any, userId: string) {\n  // Buscar ou criar saldo do usuário\n  let { data: balance } = await supabase\n    .from('user_credits')\n    .select('*')\n    .eq('user_id', userId)\n    .single();\n\n  if (!balance) {\n    // Criar saldo inicial\n    const { data: newBalance } = await supabase\n      .from('user_credits')\n      .insert({\n        user_id: userId,\n        total_credits: 0,\n        available_credits: 0,\n        pending_credits: 0\n      })\n      .select()\n      .single();\n\n    balance = newBalance;\n  }\n\n  // Buscar últimas transações\n  const { data: transactions } = await supabase\n    .from('credit_transactions')\n    .select('*')\n    .eq('user_id', userId)\n    .order('created_at', { ascending: false })\n    .limit(10);\n\n  return {\n    balance,\n    transactions: transactions || []\n  };\n}\n\nasync function addCredits(supabase: any, userId: string, operation: CreditOperation) {\n  if (!operation.amount || operation.amount <= 0) {\n    throw new Error('Valor inválido');\n  }\n\n  // Buscar saldo atual\n  const { data: currentBalance } = await supabase\n    .from('user_credits')\n    .select('*')\n    .eq('user_id', userId)\n    .single();\n\n  const newTotal = (currentBalance?.total_credits || 0) + operation.amount;\n  const newAvailable = (currentBalance?.available_credits || 0) + operation.amount;\n\n  // Atualizar saldo\n  const { data: updatedBalance } = await supabase\n    .from('user_credits')\n    .upsert({\n      user_id: userId,\n      total_credits: newTotal,\n      available_credits: newAvailable,\n      updated_at: new Date().toISOString()\n    }, {\n      onConflict: 'user_id'\n    })\n    .select()\n    .single();\n\n  // Registrar transação\n  await supabase\n    .from('credit_transactions')\n    .insert({\n      user_id: userId,\n      type: 'earned',\n      amount: operation.amount,\n      description: operation.description || 'Créditos adicionados',\n      reference_id: operation.referenceId,\n      reference_table: operation.referenceTable,\n      status: 'completed'\n    });\n\n  return updatedBalance;\n}\n\nasync function useCredits(supabase: any, userId: string, operation: CreditOperation) {\n  if (!operation.amount || operation.amount <= 0) {\n    throw new Error('Valor inválido');\n  }\n\n  // Buscar saldo atual\n  const { data: currentBalance } = await supabase\n    .from('user_credits')\n    .select('*')\n    .eq('user_id', userId)\n    .single();\n\n  if (!currentBalance || currentBalance.available_credits < operation.amount) {\n    throw new Error('Saldo insuficiente');\n  }\n\n  const newAvailable = currentBalance.available_credits - operation.amount;\n\n  // Atualizar saldo\n  const { data: updatedBalance } = await supabase\n    .from('user_credits')\n    .update({\n      available_credits: newAvailable,\n      updated_at: new Date().toISOString()\n    })\n    .eq('user_id', userId)\n    .select()\n    .single();\n\n  // Registrar transação\n  await supabase\n    .from('credit_transactions')\n    .insert({\n      user_id: userId,\n      type: 'spent',\n      amount: -operation.amount,\n      description: operation.description || 'Créditos utilizados',\n      reference_id: operation.referenceId,\n      reference_table: operation.referenceTable,\n      status: 'completed'\n    });\n\n  return updatedBalance;\n}\n\nasync function requestWithdrawal(supabase: any, userId: string, operation: CreditOperation) {\n  if (!operation.amount || operation.amount <= 0) {\n    throw new Error('Valor inválido para saque');\n  }\n\n  const minWithdrawal = 50; // Valor mínimo para saque\n  if (operation.amount < minWithdrawal) {\n    throw new Error(`Valor mínimo para saque é R$ ${minWithdrawal}`);\n  }\n\n  // Buscar saldo atual\n  const { data: currentBalance } = await supabase\n    .from('user_credits')\n    .select('*')\n    .eq('user_id', userId)\n    .single();\n\n  if (!currentBalance || currentBalance.available_credits < operation.amount) {\n    throw new Error('Saldo insuficiente para saque');\n  }\n\n  // Criar solicitação de saque\n  const { data: withdrawal } = await supabase\n    .from('withdrawal_requests')\n    .insert({\n      user_id: userId,\n      amount: operation.amount,\n      method: operation.withdrawalMethod || 'pix',\n      pix_key: operation.pixKey,\n      status: 'pending'\n    })\n    .select()\n    .single();\n\n  // Bloquear créditos (mover para pending)\n  const newAvailable = currentBalance.available_credits - operation.amount;\n  const newPending = (currentBalance.pending_credits || 0) + operation.amount;\n\n  await supabase\n    .from('user_credits')\n    .update({\n      available_credits: newAvailable,\n      pending_credits: newPending,\n      updated_at: new Date().toISOString()\n    })\n    .eq('user_id', userId);\n\n  // Registrar transação\n  await supabase\n    .from('credit_transactions')\n    .insert({\n      user_id: userId,\n      type: 'withdrawal_request',\n      amount: -operation.amount,\n      description: `Solicitação de saque - ${operation.withdrawalMethod}`,\n      reference_id: withdrawal.id,\n      reference_table: 'withdrawal_requests',\n      status: 'pending'\n    });\n\n  // Notificar administradores\n  await supabase\n    .from('notification_triggers')\n    .insert({\n      event_type: 'withdrawal_request',\n      user_id: userId,\n      title: 'Nova Solicitação de Saque',\n      message: `Usuário solicitou saque de R$ ${operation.amount.toFixed(2)}`,\n      data: {\n        withdrawal_id: withdrawal.id,\n        amount: operation.amount,\n        method: operation.withdrawalMethod\n      }\n    });\n\n  return withdrawal;\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/mark-payment-paid/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/mlm-group-manager/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2194,2197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2194,2197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3329,3332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3329,3332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4811,4814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4811,4814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6704,6707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6704,6707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7544,7547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7544,7547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":308,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8442,8445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8442,8445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":308,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8496,8499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8496,8499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":336,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":336,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9444,9447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9444,9447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface GroupAction {\n  action: 'create' | 'join' | 'contemplate' | 'status' | 'history';\n  serviceId?: string;\n  amount?: number;\n  referrerId?: string;\n  groupId?: string;\n}\n\nserve(async (req) => {\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const { data: { user } } = await supabase.auth.getUser(\n      req.headers.get('Authorization')?.replace('Bearer ', '') ?? ''\n    );\n\n    if (!user) {\n      return new Response(\n        JSON.stringify({ error: 'Unauthorized' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const body: GroupAction = await req.json();\n\n    let result;\n    switch (body.action) {\n      case 'create':\n        result = await createGroup(supabase, user.id, body);\n        break;\n      case 'join':\n        result = await joinGroup(supabase, user.id, body);\n        break;\n      case 'contemplate':\n        result = await contemplateGroup(supabase, body.groupId!);\n        break;\n      case 'status':\n        result = await getGroupStatus(supabase, user.id, body.groupId);\n        break;\n      case 'history':\n        result = await getUserGroupHistory(supabase, user.id);\n        break;\n      default:\n        throw new Error('Ação inválida');\n    }\n\n    return new Response(\n      JSON.stringify({ success: true, data: result }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    console.error('Erro no gerenciamento de grupos:', error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});\n\nasync function createGroup(supabase: any, userId: string, action: GroupAction) {\n  if (!action.serviceId || !action.amount) {\n    throw new Error('ServiceId e amount são obrigatórios');\n  }\n\n  // Verificar se já existe grupo em formação para este serviço\n  const { data: existingGroup } = await supabase\n    .from('plan_groups')\n    .select('*')\n    .eq('service_id', action.serviceId)\n    .eq('status', 'forming')\n    .lt('current_participants', 10)\n    .order('created_at', { ascending: true })\n    .limit(1)\n    .single();\n\n  if (existingGroup) {\n    return { group: existingGroup, message: 'Grupo existente encontrado' };\n  }\n\n  // Criar novo grupo\n  const groupNumber = Math.floor(Math.random() * 10000);\n  const { data: newGroup } = await supabase\n    .from('plan_groups')\n    .insert({\n      service_id: action.serviceId,\n      group_number: groupNumber,\n      target_amount: action.amount * 10,\n      current_amount: 0,\n      current_participants: 0,\n      max_participants: 10,\n      status: 'forming',\n      created_by: userId\n    })\n    .select()\n    .single();\n\n  return { group: newGroup, message: 'Novo grupo criado' };\n}\n\nasync function joinGroup(supabase: any, userId: string, action: GroupAction) {\n  if (!action.serviceId || !action.amount) {\n    throw new Error('ServiceId e amount são obrigatórios');\n  }\n\n  // Buscar grupo disponível\n  const { data: availableGroup } = await supabase\n    .from('plan_groups')\n    .select('*')\n    .eq('service_id', action.serviceId)\n    .eq('status', 'forming')\n    .lt('current_participants', 10)\n    .order('created_at', { ascending: true })\n    .limit(1)\n    .single();\n\n  if (!availableGroup) {\n    // Criar novo grupo se não houver disponível\n    const newGroup = await createGroup(supabase, userId, action);\n    return newGroup;\n  }\n\n  // Verificar se usuário já está no grupo\n  const { data: existingParticipation } = await supabase\n    .from('group_participants')\n    .select('id')\n    .eq('group_id', availableGroup.id)\n    .eq('user_id', userId)\n    .single();\n\n  if (existingParticipation) {\n    throw new Error('Usuário já está neste grupo');\n  }\n\n  // Adicionar participante\n  const { data: participation } = await supabase\n    .from('group_participants')\n    .insert({\n      group_id: availableGroup.id,\n      user_id: userId,\n      amount_paid: action.amount,\n      referrer_id: action.referrerId,\n      status: 'pending' // Será confirmado via webhook de pagamento\n    })\n    .select()\n    .single();\n\n  return {\n    group: availableGroup,\n    participation,\n    message: 'Participação registrada (pendente confirmação de pagamento)'\n  };\n}\n\nasync function contemplateGroup(supabase: any, groupId: string) {\n  // Buscar grupo e participantes\n  const { data: group } = await supabase\n    .from('plan_groups')\n    .select('*')\n    .eq('id', groupId)\n    .eq('status', 'complete')\n    .single();\n\n  if (!group) {\n    throw new Error('Grupo não encontrado ou não está completo');\n  }\n\n  if (group.status === 'contemplated') {\n    throw new Error('Grupo já foi contemplado');\n  }\n\n  // Buscar participantes ativos\n  const { data: participants } = await supabase\n    .from('group_participants')\n    .select('user_id, profiles:user_id(full_name)')\n    .eq('group_id', groupId)\n    .eq('status', 'active');\n\n  if (!participants || participants.length < 10) {\n    throw new Error('Grupo não tem participantes suficientes para contemplação');\n  }\n\n  // Sortear contemplado\n  const winnerIndex = Math.floor(Math.random() * participants.length);\n  const winner = participants[winnerIndex];\n\n  // Atualizar grupo\n  const { data: updatedGroup } = await supabase\n    .from('plan_groups')\n    .update({\n      status: 'contemplated',\n      winner_id: winner.user_id,\n      contemplated_at: new Date().toISOString()\n    })\n    .eq('id', groupId)\n    .select()\n    .single();\n\n  // Atualizar participantes\n  await supabase\n    .from('group_participants')\n    .update({ status: 'completed' })\n    .eq('group_id', groupId);\n\n  // Marcar vencedor\n  await supabase\n    .from('group_participants')\n    .update({ status: 'winner' })\n    .eq('group_id', groupId)\n    .eq('user_id', winner.user_id);\n\n  // Enviar notificações\n  await sendContemplationNotifications(supabase, groupId, winner.user_id, participants);\n\n  // Processar comissões MLM\n  await processMLMCommissions(supabase, groupId, group.target_amount);\n\n  return {\n    group: updatedGroup,\n    winner: winner,\n    message: `Grupo contemplado! Vencedor: ${winner.profiles?.full_name || 'N/A'}`\n  };\n}\n\nasync function getGroupStatus(supabase: any, userId: string, groupId?: string) {\n  if (groupId) {\n    // Status de um grupo específico\n    const { data: group } = await supabase\n      .from('plan_groups')\n      .select(`\n        *,\n        participants:group_participants(\n          user_id,\n          amount_paid,\n          status,\n          joined_at,\n          profiles:user_id(full_name)\n        )\n      `)\n      .eq('id', groupId)\n      .single();\n\n    return { group };\n  } else {\n    // Grupos ativos do usuário\n    const { data: userGroups } = await supabase\n      .from('group_participants')\n      .select(`\n        *,\n        plan_groups:group_id(*)\n      `)\n      .eq('user_id', userId)\n      .in('status', ['active', 'pending', 'winner'])\n      .order('joined_at', { ascending: false });\n\n    return { userGroups };\n  }\n}\n\nasync function getUserGroupHistory(supabase: any, userId: string) {\n  const { data: history } = await supabase\n    .from('group_participants')\n    .select(`\n      *,\n      plan_groups:group_id(\n        group_number,\n        status,\n        winner_id,\n        contemplated_at,\n        target_amount\n      )\n    `)\n    .eq('user_id', userId)\n    .order('joined_at', { ascending: false })\n    .limit(20);\n\n  // Estatísticas do usuário\n  const { data: stats } = await supabase\n    .from('group_participants')\n    .select('status')\n    .eq('user_id', userId);\n\n  const statistics = {\n    total_groups: stats?.length || 0,\n    active_groups: stats?.filter(s => s.status === 'active')?.length || 0,\n    completed_groups: stats?.filter(s => s.status === 'completed')?.length || 0,\n    won_groups: stats?.filter(s => s.status === 'winner')?.length || 0\n  };\n\n  return { history, statistics };\n}\n\nasync function sendContemplationNotifications(supabase: any, groupId: string, winnerId: string, participants: any[]) {\n  // Notificar vencedor\n  await supabase\n    .from('notification_triggers')\n    .insert({\n      event_type: 'group_winner',\n      user_id: winnerId,\n      title: '🎉 PARABÉNS! Você foi contemplado!',\n      message: 'Seu grupo MLM foi concluído e você foi o sortudo contemplado! Entre em contato conosco para resgatar seu prêmio.',\n      data: { group_id: groupId }\n    });\n\n  // Notificar outros participantes\n  for (const participant of participants) {\n    if (participant.user_id !== winnerId) {\n      await supabase\n        .from('notification_triggers')\n        .insert({\n          event_type: 'group_completed',\n          user_id: participant.user_id,\n          title: 'Grupo MLM Concluído',\n          message: 'Seu grupo foi concluído! Continue participando para ter mais chances de ser contemplado.',\n          data: { group_id: groupId, winner_id: winnerId }\n        });\n    }\n  }\n}\n\nasync function processMLMCommissions(supabase: any, groupId: string, totalAmount: number) {\n  // Buscar participantes com referenciadores\n  const { data: participants } = await supabase\n    .from('group_participants')\n    .select('user_id, referrer_id, amount_paid')\n    .eq('group_id', groupId)\n    .not('referrer_id', 'is', null);\n\n  // Processar comissões (5% do valor total do grupo)\n  const commissionRate = 0.05;\n  \n  for (const participant of participants || []) {\n    if (participant.referrer_id) {\n      const commissionAmount = participant.amount_paid * commissionRate;\n\n      // Creditar comissão\n      await supabase.rpc('manage-credits', {\n        action: 'add',\n        user_id: participant.referrer_id,\n        amount: commissionAmount,\n        description: `Comissão MLM - Grupo contemplado #${groupId}`,\n        reference_id: groupId,\n        reference_table: 'plan_groups'\n      });\n\n      // Registrar comissão\n      await supabase\n        .from('mlm_commissions')\n        .insert({\n          referrer_id: participant.referrer_id,\n          referred_id: participant.user_id,\n          group_id: groupId,\n          commission_amount: commissionAmount,\n          commission_type: 'group_completion',\n          status: 'paid'\n        });\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/notification-triggers/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[516,519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[516,519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3946,3949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3946,3949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6839,6842],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6839,6842],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8971,8974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8971,8974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface UserAlert {\n  userId: string;\n  email: string;\n  fullName: string;\n  daysInactive: number;\n  groupStatus: string;\n  lastActivity: string;\n  referralCount: number;\n}\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[NOTIFICATION-TRIGGERS] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Iniciando verificação de gatilhos temporais\");\n\n    // Inicializar Supabase client com service role key\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    const now = new Date();\n    const alerts: UserAlert[] = [];\n\n    // Buscar usuários com grupos em formação há mais de 15 dias\n    const { data: usersWithGroups, error: groupsError } = await supabaseClient\n      .from('groups')\n      .select(`\n        user_id,\n        created_at,\n        status,\n        users (email, full_name),\n        group_members (count)\n      `)\n      .eq('status', 'forming');\n\n    if (groupsError) {\n      logStep(\"Erro ao buscar grupos\", { error: groupsError.message });\n    } else {\n      logStep(\"Grupos encontrados\", { count: usersWithGroups?.length || 0 });\n\n      for (const group of usersWithGroups || []) {\n        const createdAt = new Date(group.created_at);\n        const daysDiff = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));\n        \n        // Verificar se precisa de alerta (15, 30, 60, 90, 180 dias)\n        const alertDays = [15, 30, 60, 90, 180];\n        \n        if (alertDays.includes(daysDiff)) {\n          // Buscar contagem de indicações do usuário\n          const { data: referrals, error: referralsError } = await supabaseClient\n            .from('group_members')\n            .select('id')\n            .eq('referred_by', group.user_id);\n\n          const referralCount = referrals?.length || 0;\n\n          alerts.push({\n            userId: group.user_id,\n            email: group.users.email,\n            fullName: group.users.full_name,\n            daysInactive: daysDiff,\n            groupStatus: group.status,\n            lastActivity: group.created_at,\n            referralCount\n          });\n\n          logStep(`Alerta criado para usuário ${group.user_id}`, { \n            days: daysDiff, \n            referrals: referralCount \n          });\n        }\n      }\n    }\n\n    // Processar alertas e criar notificações\n    for (const alert of alerts) {\n      await processUserAlert(supabaseClient, alert);\n    }\n\n    // Verificar conversões automáticas para créditos (180+ dias)\n    await processAutoConversions(supabaseClient);\n\n    // Enviar resumo para admins se houver alertas\n    if (alerts.length > 0) {\n      await notifyAdmins(supabaseClient, alerts);\n    }\n\n    logStep(\"Verificação concluída\", { \n      alertsProcessed: alerts.length,\n      timestamp: now.toISOString()\n    });\n\n    return new Response(\n      JSON.stringify({ \n        success: true, \n        alertsProcessed: alerts.length,\n        timestamp: now.toISOString()\n      }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 200,\n      }\n    );\n\n  } catch (error) {\n    logStep(\"ERRO no processamento de gatilhos\", { message: error.message });\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});\n\nasync function processUserAlert(supabaseClient: any, alert: UserAlert) {\n  const { userId, daysInactive, referralCount, fullName } = alert;\n  \n  let title = \"\";\n  let message = \"\";\n  let actionUrl = \"/dashboard\";\n  let emailTemplate = \"\";\n\n  switch (daysInactive) {\n    case 15:\n      if (referralCount === 0) {\n        title = \"🚀 Vamos começar suas indicações!\";\n        message = \"Olá! Notamos que você ainda não fez nenhuma indicação. Que tal começar compartilhando com amigos?\";\n        emailTemplate = \"first_reminder\";\n      } else {\n        title = \"📈 Continue compartilhando!\";\n        message = `Parabéns pelas ${referralCount} indicações! Continue assim para completar seu grupo mais rápido.`;\n        emailTemplate = \"encouragement\";\n      }\n      break;\n\n    case 30:\n      title = \"💡 Materiais de ajuda disponíveis\";\n      message = \"Enviamos novos materiais promocionais para ajudar você a divulgar melhor seus links!\";\n      emailTemplate = \"materials_available\";\n      actionUrl = \"/biblioteca-materiais\";\n      break;\n\n    case 60:\n      title = \"🎯 Estratégias para acelerar seu grupo\";\n      message = \"Que tal conhecer nossas dicas para formar grupos mais rapidamente? Temos várias estratégias eficazes!\";\n      emailTemplate = \"strategies_tips\";\n      break;\n\n    case 90:\n      title = \"🤝 Grupos públicos disponíveis\";\n      message = \"Considere participar de grupos públicos ou tornar o seu público para acelerar a formação!\";\n      emailTemplate = \"public_groups_info\";\n      actionUrl = \"/feira-grupos\";\n      break;\n\n    case 180:\n      title = \"✨ Seus créditos estão disponíveis!\";\n      message = \"Após 180 dias, convertemos seu pagamento em créditos! Use no marketplace ou solicite saque.\";\n      emailTemplate = \"credits_available\";\n      actionUrl = \"/creditos\";\n      break;\n  }\n\n  // Criar notificação in-app\n  const { error: notificationError } = await supabaseClient\n    .from('notifications')\n    .insert({\n      user_id: userId,\n      title,\n      message,\n      type: daysInactive >= 180 ? 'success' : 'info',\n      category: daysInactive >= 180 ? 'system' : 'group',\n      read: false,\n      action_url: actionUrl,\n      action_text: daysInactive >= 180 ? 'Ver Créditos' : 'Ver Detalhes'\n    });\n\n  if (notificationError) {\n    logStep(\"Erro ao criar notificação\", { userId, error: notificationError.message });\n  }\n\n  // Enviar email\n  try {\n    await supabaseClient.functions.invoke('send-notification-email', {\n      body: {\n        userId,\n        type: 'automated_reminder',\n        templateData: {\n          fullName,\n          daysInactive,\n          referralCount,\n          template: emailTemplate,\n          actionUrl\n        }\n      }\n    });\n    logStep(`Email enviado para usuário ${userId}`, { template: emailTemplate });\n  } catch (emailError) {\n    logStep(\"Erro ao enviar email\", { userId, error: emailError.message });\n  }\n}\n\nasync function processAutoConversions(supabaseClient: any) {\n  logStep(\"Verificando conversões automáticas para créditos\");\n\n  // Buscar grupos com mais de 180 dias que ainda não foram convertidos\n  const { data: expiredGroups, error } = await supabaseClient\n    .from('groups')\n    .select(`\n      id,\n      user_id,\n      paid_amount,\n      created_at,\n      users (email, full_name)\n    `)\n    .eq('status', 'forming')\n    .lt('created_at', new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString());\n\n  if (error) {\n    logStep(\"Erro ao buscar grupos expirados\", { error: error.message });\n    return;\n  }\n\n  if (!expiredGroups || expiredGroups.length === 0) {\n    logStep(\"Nenhum grupo para conversão automática encontrado\");\n    return;\n  }\n\n  logStep(`Grupos para conversão encontrados`, { count: expiredGroups.length });\n\n  for (const group of expiredGroups) {\n    // Verificar se já foi convertido\n    const { data: existingTransaction } = await supabaseClient\n      .from('credit_transactions')\n      .select('id')\n      .eq('user_id', group.user_id)\n      .eq('source', 'initial_payment')\n      .eq('related_order_id', group.id)\n      .single();\n\n    if (existingTransaction) {\n      logStep(`Grupo ${group.id} já foi convertido anteriormente`);\n      continue;\n    }\n\n    // Adicionar créditos\n    try {\n      await supabaseClient.functions.invoke('add-user-credits', {\n        body: {\n          userId: group.user_id,\n          amount: group.paid_amount,\n          source: 'initial_payment',\n          description: `Conversão automática após 180 dias - Grupo #${group.id}`,\n          relatedOrderId: group.id\n        }\n      });\n\n      // Atualizar status do grupo\n      await supabaseClient\n        .from('groups')\n        .update({ status: 'expired_converted' })\n        .eq('id', group.id);\n\n      logStep(`Conversão automática realizada`, { \n        groupId: group.id, \n        userId: group.user_id, \n        amount: group.paid_amount \n      });\n\n    } catch (conversionError) {\n      logStep(\"Erro na conversão automática\", { \n        groupId: group.id, \n        error: conversionError.message \n      });\n    }\n  }\n}\n\nasync function notifyAdmins(supabaseClient: any, alerts: UserAlert[]) {\n  logStep(\"Enviando resumo para admins\");\n\n  // Buscar admins\n  const { data: admins, error } = await supabaseClient\n    .from('users')\n    .select('id, email')\n    .eq('role', 'admin');\n\n  if (error || !admins || admins.length === 0) {\n    logStep(\"Nenhum admin encontrado\");\n    return;\n  }\n\n  const alertsByType = {\n    critical: alerts.filter(a => a.daysInactive >= 90 && a.referralCount === 0),\n    warning: alerts.filter(a => a.daysInactive >= 30 && a.daysInactive < 90),\n    info: alerts.filter(a => a.daysInactive < 30)\n  };\n\n  for (const admin of admins) {\n    const { error: adminNotificationError } = await supabaseClient\n      .from('notifications')\n      .insert({\n        user_id: admin.id,\n        title: `📊 Relatório de Usuários - ${alerts.length} alertas`,\n        message: `Críticos: ${alertsByType.critical.length}, Atenção: ${alertsByType.warning.length}, Info: ${alertsByType.info.length}`,\n        type: alertsByType.critical.length > 0 ? 'warning' : 'info',\n        category: 'system',\n        read: false,\n        action_url: '/admin/relatorios',\n        action_text: 'Ver Relatório'\n      });\n\n    if (adminNotificationError) {\n      logStep(\"Erro ao notificar admin\", { adminId: admin.id, error: adminNotificationError.message });\n    }\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/process-mlm-purchase/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[507,510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[507,510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport Stripe from \"https://esm.sh/stripe@14.21.0\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface PurchaseRequest {\n  product_code: string;\n  referral_code?: string; // código de indicação (opcional)\n}\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[MLM-PURCHASE] ${step}${detailsStr}`);\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Iniciando processo de compra MLM\");\n\n    // Parse request body\n    const { product_code, referral_code } = await req.json() as PurchaseRequest;\n    logStep(\"Request recebido\", { product_code, referral_code });\n\n    // Initialize clients\n    const supabase = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    const stripe = new Stripe(Deno.env.get(\"STRIPE_SECRET_KEY\") || \"\", {\n      apiVersion: \"2023-10-16\",\n    });\n\n    // Authenticate user\n    const authHeader = req.headers.get(\"Authorization\");\n    if (!authHeader) throw new Error(\"Authorization header required\");\n    \n    const token = authHeader.replace(\"Bearer \", \"\");\n    const { data: userData, error: userError } = await supabase.auth.getUser(token);\n    if (userError) throw userError;\n    \n    const user = userData.user;\n    if (!user?.email) throw new Error(\"User not authenticated\");\n    logStep(\"Usuário autenticado\", { userId: user.id, email: user.email });\n\n    // Get product details\n    const { data: product, error: productError } = await supabase\n      .from(\"products\")\n      .select(\"*\")\n      .eq(\"product_code\", product_code)\n      .eq(\"active\", true)\n      .single();\n\n    if (productError || !product) {\n      throw new Error(`Produto não encontrado: ${product_code}`);\n    }\n    logStep(\"Produto encontrado\", product);\n\n    // Check if user already has an active group for this product\n    const { data: existingGroup, error: groupError } = await supabase\n      .from(\"groups\")\n      .select(\"*\")\n      .eq(\"buyer_id\", user.id)\n      .eq(\"product_id\", product.id)\n      .eq(\"status\", \"open\")\n      .single();\n\n    if (existingGroup) {\n      throw new Error(\"Você já possui um grupo ativo para este produto\");\n    }\n\n    let groupToJoin = null;\n    let isGroupCreator = false;\n\n    // Se tem código de indicação, tentar entrar em grupo existente\n    if (referral_code) {\n      logStep(\"Verificando código de indicação\", { referral_code });\n      \n      const { data: existingGroupByCode, error: codeError } = await supabase\n        .from(\"groups\")\n        .select(\"*, products(*)\")\n        .eq(\"referral_code\", referral_code)\n        .eq(\"status\", \"open\")\n        .eq(\"product_id\", product.id)\n        .single();\n\n      if (existingGroupByCode && existingGroupByCode.current_count < 10) {\n        groupToJoin = existingGroupByCode;\n        logStep(\"Grupo encontrado para entrada\", { \n          groupId: groupToJoin.id, \n          currentCount: groupToJoin.current_count \n        });\n      } else {\n        logStep(\"Código de indicação inválido ou grupo cheio\");\n      }\n    }\n\n    // Se não tem grupo para entrar, criar novo grupo\n    if (!groupToJoin) {\n      isGroupCreator = true;\n      \n      // Generate unique referral code\n      let newReferralCode;\n      let codeExists = true;\n      \n      while (codeExists) {\n        newReferralCode = await generateReferralCode();\n        const { data: existingCode } = await supabase\n          .from(\"groups\")\n          .select(\"id\")\n          .eq(\"referral_code\", newReferralCode)\n          .single();\n        \n        codeExists = !!existingCode;\n      }\n\n      logStep(\"Criando novo grupo\", { referralCode: newReferralCode });\n\n      const { data: newGroup, error: newGroupError } = await supabase\n        .from(\"groups\")\n        .insert({\n          product_id: product.id,\n          buyer_id: user.id,\n          referral_code: newReferralCode,\n          current_count: 1\n        })\n        .select()\n        .single();\n\n      if (newGroupError) throw newGroupError;\n      groupToJoin = newGroup;\n      logStep(\"Novo grupo criado\", { groupId: newGroup.id });\n    }\n\n    // Create Stripe checkout session\n    logStep(\"Criando sessão Stripe\", { \n      productName: product.name, \n      entryValue: product.entry_value \n    });\n\n    const session = await stripe.checkout.sessions.create({\n      line_items: [{\n        price: product.stripe_price_id,\n        quantity: 1,\n      }],\n      mode: 'payment',\n      success_url: `${req.headers.get(\"origin\")}/mlm/success?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${req.headers.get(\"origin\")}/mlm/cancel`,\n      metadata: {\n        user_id: user.id,\n        product_id: product.id,\n        group_id: groupToJoin.id,\n        referral_code: referral_code || \"\",\n        is_group_creator: isGroupCreator.toString()\n      }\n    });\n\n    // Create purchase record\n    const { data: purchase, error: purchaseError } = await supabase\n      .from(\"user_purchases\")\n      .insert({\n        user_id: user.id,\n        product_id: product.id,\n        group_id: groupToJoin.id,\n        stripe_session_id: session.id,\n        amount_paid: product.entry_value,\n        status: 'pending'\n      })\n      .select()\n      .single();\n\n    if (purchaseError) throw purchaseError;\n    logStep(\"Registro de compra criado\", { purchaseId: purchase.id });\n\n    // Se está entrando em grupo existente, criar referral record\n    if (referral_code && !isGroupCreator) {\n      const { error: referralError } = await supabase\n        .from(\"referrals\")\n        .insert({\n          referrer_id: groupToJoin.buyer_id,\n          referred_id: user.id,\n          group_id: groupToJoin.id,\n          referral_code: referral_code,\n          status: 'pending'\n        });\n\n      if (referralError) logStep(\"Erro ao criar referral\", referralError);\n      \n      // Criar comissão de influenciador com cálculo correto\n      logStep(\"Criando comissão de influenciador\");\n      try {\n        await supabase.rpc('create_influencer_commission', {\n          p_influencer_id: groupToJoin.buyer_id,\n          p_client_id: user.id,\n          p_product_id: product.id,\n          p_referral_code: referral_code,\n          p_product_total_value: product.total_price\n        });\n        logStep(\"Comissão criada com sucesso\");\n      } catch (commissionError) {\n        logStep(\"Erro ao criar comissão\", commissionError);\n      }\n    }\n\n    logStep(\"Processo concluído com sucesso\", { \n      sessionUrl: session.url,\n      groupId: groupToJoin.id\n    });\n\n    return new Response(JSON.stringify({\n      success: true,\n      checkout_url: session.url,\n      group_id: groupToJoin.id,\n      is_group_creator: isGroupCreator\n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Erro desconhecido\";\n    logStep(\"ERRO\", { message: errorMessage });\n    \n    return new Response(JSON.stringify({\n      success: false,\n      error: errorMessage\n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 400,\n    });\n  }\n});\n\nasync function generateReferralCode(): Promise<string> {\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 8; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n  return result;\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/process-payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/process-real-payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/release-professional-payment/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/request-withdrawal/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/secure-pix-webhook/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[410,413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[410,413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\nimport { crypto } from \"https://deno.land/std@0.190.0/crypto/mod.ts\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\nconst logStep = (step: string, details?: any) => {\n  const detailsStr = details ? ` - ${JSON.stringify(details)}` : '';\n  console.log(`[SECURE-PIX-WEBHOOK] ${step}${detailsStr}`);\n};\n\n// SECURITY: Verify webhook signature from Asaas\nconst verifyWebhookSignature = async (\n  rawBody: string,\n  signature: string | null,\n  secret: string\n): Promise<boolean> => {\n  if (!signature || !secret) {\n    logStep(\"Missing signature or secret\");\n    return false;\n  }\n\n  try {\n    const encoder = new TextEncoder();\n    const key = await crypto.subtle.importKey(\n      \"raw\",\n      encoder.encode(secret),\n      { name: \"HMAC\", hash: \"SHA-256\" },\n      false,\n      [\"sign\"]\n    );\n\n    const expectedSignature = await crypto.subtle.sign(\n      \"HMAC\",\n      key,\n      encoder.encode(rawBody)\n    );\n\n    const expectedHex = Array.from(new Uint8Array(expectedSignature))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    const receivedHex = signature.replace('sha256=', '');\n    \n    logStep(\"Signature verification\", { \n      expected: expectedHex.substring(0, 10) + \"...\", \n      received: receivedHex.substring(0, 10) + \"...\" \n    });\n\n    return expectedHex === receivedHex;\n  } catch (error) {\n    logStep(\"Signature verification error\", error);\n    return false;\n  }\n};\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    logStep(\"Secure webhook received\");\n\n    // Initialize Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    // SECURITY: Rate limiting check\n    const clientIp = req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\") || \"unknown\";\n    const userAgent = req.headers.get(\"user-agent\") || \"unknown\";\n    \n    // Check rate limit: max 10 webhook requests per minute per IP\n    const rateLimitCheck = await supabaseClient.rpc('check_rate_limit', {\n      identifier: clientIp,\n      action_type: 'webhook_request',\n      max_requests: 10,\n      window_minutes: 1\n    });\n\n    if (!rateLimitCheck.data) {\n      logStep(\"SECURITY: Rate limit exceeded\", { ip: clientIp });\n      \n      await supabaseClient.from(\"security_events\").insert({\n        event_type: \"webhook_rate_limit_exceeded\",\n        ip_address: clientIp,\n        user_agent: userAgent,\n        details: {\n          endpoint: \"secure-pix-webhook\",\n          timestamp: new Date().toISOString()\n        }\n      });\n\n      return new Response(\"Rate limit exceeded\", { status: 429 });\n    }\n\n    // Get raw body for signature verification\n    const rawBody = await req.text();\n    \n    // SECURITY: Validate JSON format\n    let webhookData;\n    try {\n      webhookData = JSON.parse(rawBody);\n    } catch (parseError) {\n      logStep(\"SECURITY: Invalid JSON in webhook\", parseError);\n      \n      await supabaseClient.from(\"security_events\").insert({\n        event_type: \"webhook_invalid_json\",\n        ip_address: clientIp,\n        user_agent: userAgent,\n        details: {\n          error: parseError.message,\n          body_length: rawBody.length\n        }\n      });\n\n      return new Response(\"Invalid JSON\", { status: 400 });\n    }\n    \n    logStep(\"Webhook data received\", { event: webhookData.event, paymentId: webhookData.payment?.id });\n\n    // SECURITY: Verify webhook signature\n    const asaasWebhookSecret = Deno.env.get(\"ASAAS_WEBHOOK_SECRET\");\n    const signature = req.headers.get(\"asaas-signature\");\n    \n    const isValidSignature = await verifyWebhookSignature(\n      rawBody,\n      signature,\n      asaasWebhookSecret || \"\"\n    );\n\n    if (!isValidSignature) {\n      logStep(\"SECURITY: Invalid webhook signature\");\n      \n      // Log security event\n      await supabaseClient.from(\"security_events\").insert({\n        event_type: \"invalid_webhook_signature\",\n        ip_address: req.headers.get(\"x-forwarded-for\") || \"unknown\",\n        user_agent: req.headers.get(\"user-agent\"),\n        details: {\n          webhook_event: webhookData.event,\n          payment_id: webhookData.payment?.id,\n          signature_provided: !!signature,\n          timestamp: new Date().toISOString()\n        }\n      });\n\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    logStep(\"Webhook signature verified successfully\");\n\n    // Extract payment information from webhook\n    const { event, payment } = webhookData;\n    \n    if (!payment || !payment.id) {\n      logStep(\"Invalid webhook data - no payment ID\");\n      return new Response(\"Invalid webhook data\", { status: 400 });\n    }\n\n    // Find payment record using Asaas payment ID\n    const { data: paymentRecord, error: paymentError } = await supabaseClient\n      .from(\"payments\")\n      .select(\"*\")\n      .eq(\"stripe_session_id\", payment.id) // Using stripe_session_id field for Asaas ID\n      .single();\n\n    if (paymentError || !paymentRecord) {\n      logStep(\"Payment not found in database\", { asaasId: payment.id, error: paymentError });\n      return new Response(\"Payment not found\", { status: 404 });\n    }\n\n    logStep(\"Payment found\", { paymentId: paymentRecord.id, currentStatus: paymentRecord.status });\n\n    // SECURITY: Validate payment amount\n    const amountValid = await supabaseClient.rpc('validate_payment_amount', {\n      payment_id: paymentRecord.id,\n      received_amount: payment.value || payment.amount || 0\n    });\n\n    if (!amountValid.data) {\n      logStep(\"SECURITY: Payment amount mismatch\", {\n        expected: paymentRecord.amount,\n        received: payment.value || payment.amount\n      });\n\n      // Log security event\n      await supabaseClient.from(\"security_events\").insert({\n        event_type: \"payment_amount_mismatch\",\n        user_id: paymentRecord.user_id,\n        details: {\n          payment_id: paymentRecord.id,\n          expected_amount: paymentRecord.amount,\n          received_amount: payment.value || payment.amount,\n          asaas_payment_id: payment.id\n        }\n      });\n\n      return new Response(\"Payment amount mismatch\", { status: 400 });\n    }\n\n    // Create payment validation record\n    await supabaseClient.from(\"payment_validations\").insert({\n      payment_id: paymentRecord.id,\n      asaas_payment_id: payment.id,\n      webhook_signature: signature,\n      amount_verified: true,\n      signature_verified: true\n    });\n\n    // Process payment confirmation\n    if (event === \"PAYMENT_RECEIVED\" && payment.status === \"RECEIVED\") {\n      logStep(\"Processing secure payment confirmation\");\n\n      // Update payment status\n      const { error: updateError } = await supabaseClient\n        .from(\"payments\")\n        .update({\n          status: \"paid\",\n          paid_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", paymentRecord.id);\n\n      if (updateError) {\n        logStep(\"Error updating payment status\", updateError);\n        throw new Error(\"Erro ao atualizar status do pagamento\");\n      }\n\n      // ... rest of payment processing logic (same as before but secure)\n      // Get plan details if available\n      let planData = null;\n      if (paymentRecord.plan_id) {\n        const { data: plan, error: planError } = await supabaseClient\n          .from(\"custom_plans\")\n          .select(\"*\")\n          .eq(\"id\", paymentRecord.plan_id)\n          .single();\n        \n        if (!planError && plan) {\n          planData = plan;\n        }\n      }\n\n      // Add user to MLM network if not already exists\n      const { data: existingNetwork, error: networkError } = await supabaseClient\n        .from(\"mlm_network\")\n        .select(\"*\")\n        .eq(\"user_id\", paymentRecord.user_id)\n        .single();\n\n      if (networkError && networkError.code === \"PGRST116\") {\n        // User not in network, add them\n        const { error: insertNetworkError } = await supabaseClient\n          .from(\"mlm_network\")\n          .insert({\n            user_id: paymentRecord.user_id,\n            referred_by_user_id: null,\n            status: \"active\",\n          });\n\n        if (insertNetworkError) {\n          logStep(\"Error adding user to MLM network\", insertNetworkError);\n        } else {\n          logStep(\"User added to MLM network\");\n        }\n      }\n\n      // Process referral commission with validation\n      if (paymentRecord.influencer_code) {\n        logStep(\"Processing referral commission\", { influencerCode: paymentRecord.influencer_code });\n\n        // Find referrer with rate limiting check\n        const { data: referrer, error: referrerError } = await supabaseClient\n          .from(\"mlm_network\")\n          .select(\"user_id, total_referrals\")\n          .eq(\"referral_code\", paymentRecord.influencer_code)\n          .single();\n\n        if (!referrerError && referrer) {\n          // SECURITY: Validate referral limits (prevent abuse)\n          if (referrer.total_referrals > 1000) {\n            logStep(\"SECURITY: Referral limit exceeded\", { referrerId: referrer.user_id });\n            \n            await supabaseClient.from(\"security_events\").insert({\n              event_type: \"referral_limit_exceeded\",\n              user_id: referrer.user_id,\n              details: { total_referrals: referrer.total_referrals }\n            });\n          } else {\n            // Process referral normally\n            const commissionAmount = paymentRecord.amount * 0.10; // 10% of entry/payment amount\n\n            // Update referred user's network record\n            await supabaseClient\n              .from(\"mlm_network\")\n              .update({\n                referred_by_user_id: referrer.user_id,\n                updated_at: new Date().toISOString(),\n              })\n              .eq(\"user_id\", paymentRecord.user_id);\n\n            // Create referral record\n            await supabaseClient\n              .from(\"mlm_referrals\")\n              .upsert({\n                referrer_id: referrer.user_id,\n                referred_id: paymentRecord.user_id,\n                referral_code_used: paymentRecord.influencer_code,\n                commission_earned: commissionAmount,\n                status: \"confirmed\",\n                confirmed_at: new Date().toISOString(),\n              }, {\n                onConflict: \"referrer_id,referred_id\"\n              });\n\n            // Create commission record (MLM side)\n            await supabaseClient\n              .from(\"mlm_commissions\")\n              .insert({\n                user_id: referrer.user_id,\n                source_user_id: paymentRecord.user_id,\n                level: 1,\n                amount: commissionAmount,\n                percentage: 10.0,\n                type: \"referral\",\n                status: \"pending\",\n              });\n\n            // Record influencer conversion and pending commission in dedicated tables\n            try {\n              await supabaseClient.rpc('record_influencer_conversion', {\n                p_referral_code: paymentRecord.influencer_code,\n                p_client_id: paymentRecord.user_id,\n                p_payment_id: paymentRecord.id,\n                p_entry_value: paymentRecord.amount,\n                p_product_total_value: null\n              });\n            } catch (e) {\n              logStep('record_influencer_conversion failed', { error: String(e) });\n            }\n\n            // Also register a credit transaction for referrer (auditable wallet)\n            try {\n              await supabaseClient\n                .from('credit_transactions')\n                .insert({\n                  user_id: referrer.user_id,\n                  type: 'earned',\n                  amount: commissionAmount,\n                  description: `Comissão de indicação (10%) sobre pagamento ${paymentRecord.id}`,\n                  source_type: 'referral_bonus',\n                  commission_rate: 10,\n                  reference_id: paymentRecord.id\n                });\n            } catch (e) {\n              logStep('credit_transactions insert failed', { error: String(e) });\n            }\n\n            logStep(\"Secure referral commission processed\");\n          }\n        }\n      }\n\n      // Log successful payment processing\n      await supabaseClient.from(\"security_events\").insert({\n        event_type: \"payment_processed_successfully\",\n        user_id: paymentRecord.user_id,\n        details: {\n          payment_id: paymentRecord.id,\n          amount: paymentRecord.amount,\n          asaas_payment_id: payment.id,\n          plan_id: paymentRecord.plan_id\n        }\n      });\n\n      logStep(\"Secure payment confirmation completed successfully\");\n    }\n\n    return new Response(JSON.stringify({ success: true }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 200,\n    });\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logStep(\"ERROR in secure-pix-webhook\", { message: errorMessage });\n    \n    // Log error as security event\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\n      { auth: { persistSession: false } }\n    );\n\n    await supabaseClient.from(\"security_events\").insert({\n      event_type: \"webhook_processing_error\",\n      details: { error: errorMessage, timestamp: new Date().toISOString() }\n    });\n    \n    return new Response(JSON.stringify({ \n      success: false, \n      error: errorMessage \n    }), {\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n      status: 500,\n    });\n  }\n});","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/send-contemplation-email/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/send-email-sendgrid/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/send-notification-email/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[464,467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[464,467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\n\nconst corsHeaders = {\n  \"Access-Control-Allow-Origin\": \"*\",\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\n};\n\ninterface EmailNotificationRequest {\n  userId: string;\n  type: 'group_complete' | 'referral_success' | 'payment_processed' | 'achievement_unlocked';\n  templateData: any;\n}\n\nserve(async (req) => {\n  if (req.method === \"OPTIONS\") {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { userId, type, templateData }: EmailNotificationRequest = await req.json();\n\n    // Inicializar Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\n      Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\"\n    );\n\n    // Buscar dados do usuário\n    const { data: userData, error: userError } = await supabaseClient\n      .from('users')\n      .select('email, full_name')\n      .eq('id', userId)\n      .single();\n\n    if (userError || !userData) {\n      throw new Error(\"Usuário não encontrado\");\n    }\n\n    // Preparar conteúdo do email baseado no tipo\n    let subject = \"\";\n    let htmlContent = \"\";\n\n    switch (type) {\n      case 'group_complete':\n        subject = \"🎉 Seu grupo está completo!\";\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #2563eb;\">Grupo Completo!</h2>\n            <p>Olá ${userData.full_name},</p>\n            <p>Temos uma ótima notícia! O grupo <strong>${templateData.groupName}</strong> atingiu o número máximo de participantes.</p>\n            <p>Em breve você receberá mais informações sobre o agendamento do seu serviço.</p>\n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3>Detalhes do Grupo:</h3>\n              <ul>\n                <li><strong>Plano:</strong> ${templateData.planName}</li>\n                <li><strong>Valor pago:</strong> R$ ${templateData.paidAmount}</li>\n                <li><strong>Total de participantes:</strong> ${templateData.totalMembers}</li>\n              </ul>\n            </div>\n            <p>Obrigado por fazer parte do Amigo do Peito!</p>\n          </div>\n        `;\n        break;\n\n      case 'referral_success':\n        subject = \"💰 Nova indicação convertida!\";\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #059669;\">Indicação Convertida!</h2>\n            <p>Olá ${userData.full_name},</p>\n            <p>Parabéns! Uma das suas indicações se converteu em venda.</p>\n            <div style=\"background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #059669;\">\n              <h3>Detalhes da Comissão:</h3>\n              <ul>\n                <li><strong>Indicado:</strong> ${templateData.referredName}</li>\n                <li><strong>Comissão:</strong> R$ ${templateData.commission}</li>\n                <li><strong>Plano:</strong> ${templateData.planName}</li>\n              </ul>\n            </div>\n            <p>Continue compartilhando seus links para ganhar ainda mais!</p>\n          </div>\n        `;\n        break;\n\n      case 'payment_processed':\n        subject = templateData.type === 'withdrawal' ? \"💳 Saque processado\" : \"💰 Comissão recebida\";\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #059669;\">${templateData.type === 'withdrawal' ? 'Saque Processado' : 'Comissão Recebida'}!</h2>\n            <p>Olá ${userData.full_name},</p>\n            <p>${templateData.type === 'withdrawal' \n              ? `Seu saque de R$ ${templateData.amount} foi processado com sucesso!`\n              : `Você recebeu uma nova comissão de R$ ${templateData.amount}!`\n            }</p>\n            <div style=\"background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3>Detalhes:</h3>\n              <ul>\n                <li><strong>Valor:</strong> R$ ${templateData.amount}</li>\n                <li><strong>Data:</strong> ${new Date().toLocaleDateString('pt-BR')}</li>\n                ${templateData.method ? `<li><strong>Método:</strong> ${templateData.method}</li>` : ''}\n              </ul>\n            </div>\n          </div>\n        `;\n        break;\n\n      case 'achievement_unlocked':\n        subject = \"🏆 Nova conquista desbloqueada!\";\n        htmlContent = `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #7c3aed;\">Conquista Desbloqueada!</h2>\n            <p>Olá ${userData.full_name},</p>\n            <p>Parabéns! Você desbloqueou uma nova conquista: <strong>${templateData.achievementName}</strong></p>\n            ${templateData.bonus ? `\n              <div style=\"background: #faf5ff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #7c3aed;\">\n                <h3>Bônus Especial!</h3>\n                <p>Você ganhou R$ ${templateData.bonus} de bônus por esta conquista!</p>\n              </div>\n            ` : ''}\n            <p>Continue assim e desbloqueie ainda mais conquistas!</p>\n          </div>\n        `;\n        break;\n    }\n\n    // Aqui você integraria com seu provedor de email (SendGrid, Resend, etc.)\n    // Por agora, vamos apenas logar o email que seria enviado\n    console.log('Email would be sent:', {\n      to: userData.email,\n      subject,\n      html: htmlContent\n    });\n\n    // Registrar notificação no banco\n    const { error: notificationError } = await supabaseClient\n      .from('notifications')\n      .insert({\n        user_id: userId,\n        title: subject,\n        message: `Email enviado: ${subject}`,\n        type: 'info',\n        read: false,\n        category: 'system'\n      });\n\n    if (notificationError) {\n      console.error('Erro ao criar notificação:', notificationError);\n    }\n\n    return new Response(\n      JSON.stringify({ success: true, message: \"Email notification processed\" }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 200,\n      }\n    );\n\n  } catch (error) {\n    console.error('Erro ao processar notificação por email:', error);\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\n        status: 500,\n      }\n    );\n  }\n});","usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/send-payment-notification/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/send-voucher/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/stripe-account-status/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/stripe-create-checkout/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/stripe-onboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/unified-plans-loader/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/upload-secure-file/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/supabase/functions/use-user-credits/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":145,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":145,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '2rem',\n\t\t\tscreens: {\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\n\t\t\t\t},\n\t\t\t\t// TEMA OFICIAL: PRETO E DOURADO\n\t\t\t\t'black-pure': 'hsl(var(--black-pure))',      // #000000\n\t\t\t\t'black-soft': 'hsl(var(--black-soft))',      // #121212  \n\t\t\t\t'black-light': 'hsl(var(--black-light))',    // Cinza escuro\n\t\t\t\t'gold-primary': 'hsl(var(--gold-primary))',  // #FFD700\n\t\t\t\t'gold-light': 'hsl(var(--gold-light))',      // Dourado claro\n\t\t\t\t'gold-dark': 'hsl(var(--gold-dark))',        // Dourado escuro\n\t\t\t\t'white-pure': 'hsl(var(--white-pure))',      // #FFFFFF\n\t\t\t\t'white-soft': 'hsl(var(--white-soft))',      // Branco suave\n\t\t\t\t\n\t\t\t\t// CORES DA MARCA \"AMIGO DO PEITO\"\n\t\t\t\t'ap-orange': 'hsl(var(--ap-orange))',           // Laranja principal\n\t\t\t\t'ap-orange-light': 'hsl(var(--ap-orange-light))', // Laranja claro\n\t\t\t\t'ap-orange-dark': 'hsl(var(--ap-orange-dark))',   // Laranja escuro\n\t\t\t\t'ap-light-orange': 'hsl(var(--ap-light-orange))', // Laranja muito claro\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t},\n                'fade-in': {\n                    from: { opacity: '0' },\n                    to: { opacity: '1' },\n                },\n                'slide-in': {\n                    from: { transform: 'translateY(20px)', opacity: '0' },\n                    to: { transform: 'translateY(0)', opacity: '1' },\n                },\n                'gold-shimmer': {\n                    '0%': { transform: 'translateX(-100%)' },\n                    '100%': { transform: 'translateX(100%)' }\n                },\n                'gold-pulse': {\n                    '0%, 100%': { \n                        boxShadow: '0 0 5px rgba(255, 215, 0, 0.3)',\n                        filter: 'brightness(1)'\n                    },\n                    '50%': { \n                        boxShadow: '0 0 20px rgba(255, 215, 0, 0.6)',\n                        filter: 'brightness(1.1)'\n                    }\n                },\n                'luxury-float': {\n                    '0%, 100%': { transform: 'translateY(0px)' },\n                    '50%': { transform: 'translateY(-5px)' }\n                }\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\n                'fade-in': 'fade-in 0.5s ease-in-out',\n                'slide-in': 'slide-in 0.5s ease-out',\n                'gold-shimmer': 'gold-shimmer 2s ease-in-out infinite',\n                'gold-pulse': 'gold-pulse 2s ease-in-out infinite',\n                'luxury-float': 'luxury-float 3s ease-in-out infinite'\n\t\t\t},\n            fontFamily: {\n                'inter': ['Inter', 'sans-serif'],\n            }\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/workspace/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]